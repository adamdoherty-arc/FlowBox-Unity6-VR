using UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.SceneManagement;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine.AddressableAssets;\nusing UnityEngine.ResourceManagement.AsyncOperations;\n\nnamespace VRBoxingGame.Performance\n{\n    /// <summary>\n    /// Fast Loading Optimizer - Dramatically reduces Unity Editor and runtime loading times\n    /// Implements multiple optimization strategies for FlowBox VR Boxing Game\n    /// </summary>\n    public class FastLoadingOptimizer : MonoBehaviour\n    {\n        [Header(\"Loading Optimization Settings\")]\n        public bool enableFastLoading = true;\n        public bool preloadCriticalAssets = true;\n        public bool enableAsyncSceneLoading = true;\n        public bool optimizeShaderWarmup = true;\n        \n        [Header(\"Performance Monitoring\")]\n        public bool showLoadingProgress = true;\n        public bool logOptimizationResults = true;\n        \n        [Header(\"VR-Specific Optimizations\")]\n        public bool enableVRLoadingScreen = true;\n        public GameObject vrLoadingScreenPrefab;\n        \n        // Private variables\n        private static FastLoadingOptimizer instance;\n        private Dictionary<string, AsyncOperationHandle> preloadedAssets;\n        private Coroutine currentLoadingOperation;\n        private float loadingStartTime;\n        \n        public static FastLoadingOptimizer Instance => instance;\n        \n        #region Unity Lifecycle\n        \n        private void Awake()\n        {\n            if (instance == null)\n            {\n                instance = this;\n                DontDestroyOnLoad(gameObject);\n                InitializeFastLoading();\n            }\n            else\n            {\n                Destroy(gameObject);\n            }\n        }\n        \n        private void Start()\n        {\n            if (enableFastLoading)\n            {\n                StartCoroutine(OptimizeLoadingPipeline());\n            }\n        }\n        \n        #endregion\n        \n        #region Fast Loading Implementation\n        \n        private void InitializeFastLoading()\n        {\n            preloadedAssets = new Dictionary<string, AsyncOperationHandle>();\n            loadingStartTime = Time.realtimeSinceStartup;\n            \n            // Apply Unity Editor optimizations if in editor\n            #if UNITY_EDITOR\n            ApplyEditorOptimizations();\n            #endif\n            \n            // Apply runtime optimizations\n            ApplyRuntimeOptimizations();\n            \n            if (logOptimizationResults)\n            {\n                Debug.Log(\"[FastLoadingOptimizer] Initialization complete. Loading optimizations active.\");\n            }\n        }\n        \n        private IEnumerator OptimizeLoadingPipeline()\n        {\n            yield return StartCoroutine(PreloadCriticalAssets());\n            yield return StartCoroutine(WarmupShaders());\n            yield return StartCoroutine(InitializeVRSystems());\n            \n            float totalLoadTime = Time.realtimeSinceStartup - loadingStartTime;\n            \n            if (logOptimizationResults)\n            {\n                Debug.Log($\"[FastLoadingOptimizer] Complete loading pipeline optimized. Total time: {totalLoadTime:F2}s\");\n            }\n        }\n        \n        #endregion\n        \n        #region Asset Preloading\n        \n        private IEnumerator PreloadCriticalAssets()\n        {\n            if (!preloadCriticalAssets) yield break;\n            \n            var criticalAssets = new string[]\n            {\n                \"BoxingGlove_Prefab\",\n                \"Target_Basic_Prefab\", \n                \"RainEffect_Prefab\",\n                \"BoxingRing_Environment\",\n                \"HitEffect_VFX\",\n                \"UI_MainMenu\",\n                \"Audio_PunchSound\",\n                \"Material_BoxingGlove\"\n            };\n            \n            foreach (string assetKey in criticalAssets)\n            {\n                if (!preloadedAssets.ContainsKey(assetKey))\n                {\n                    try\n                    {\n                        var handle = Addressables.LoadAssetAsync<GameObject>(assetKey);\n                        preloadedAssets[assetKey] = handle;\n                        yield return handle;\n                        \n                        if (handle.Status == AsyncOperationStatus.Succeeded)\n                        {\n                            if (showLoadingProgress)\n                            {\n                                Debug.Log($\"[FastLoader] Preloaded: {assetKey}\");\n                            }\n                        }\n                    }\n                    catch (System.Exception e)\n                    {\n                        Debug.LogWarning($\"[FastLoader] Could not preload {assetKey}: {e.Message}\");\n                    }\n                }\n                \n                yield return null; // Spread loading across frames\n            }\n        }\n        \n        #endregion\n        \n        #region Shader Optimization\n        \n        private IEnumerator WarmupShaders()\n        {\n            if (!optimizeShaderWarmup) yield break;\n            \n            // Get all shaders used in the scene\n            var shaders = Resources.FindObjectsOfTypeAll<Shader>();\n            var warmupShaders = new List<Shader>();\n            \n            // Filter for commonly used VR shaders\n            foreach (var shader in shaders)\n            {\n                if (shader.name.Contains(\"Universal Render Pipeline\") ||\n                    shader.name.Contains(\"Unlit\") ||\n                    shader.name.Contains(\"Lit\") ||\n                    shader.name.Contains(\"VR\"))\n                {\n                    warmupShaders.Add(shader);\n                }\n            }\n            \n            // Warmup shaders gradually\n            int shadersPerFrame = Mathf.Max(1, warmupShaders.Count / 30); // Spread over 30 frames\n            \n            for (int i = 0; i < warmupShaders.Count; i += shadersPerFrame)\n            {\n                for (int j = i; j < Mathf.Min(i + shadersPerFrame, warmupShaders.Count); j++)\n                {\n                    Shader.WarmupAllShaders();\n                }\n                yield return null;\n            }\n            \n            if (logOptimizationResults)\n            {\n                Debug.Log($\"[FastLoader] Warmed up {warmupShaders.Count} shaders\");\n            }\n        }\n        \n        #endregion\n        \n        #region VR-Specific Optimizations\n        \n        private IEnumerator InitializeVRSystems()\n        {\n            // Initialize VR systems asynchronously\n            yield return new WaitForSeconds(0.1f);\n            \n            // Set VR-specific quality settings for faster loading\n            QualitySettings.vSyncCount = 0; // Disable VSync for loading\n            QualitySettings.maxQueuedFrames = 1;\n            \n            // Enable XR optimizations\n            if (UnityEngine.XR.XRSettings.enabled)\n            {\n                UnityEngine.XR.XRSettings.useOcclusionMesh = true;\n                UnityEngine.XR.XRSettings.occlusionMaskScale = 1.0f;\n            }\n            \n            yield return null;\n        }\n        \n        public void ShowVRLoadingScreen(bool show)\n        {\n            if (!enableVRLoadingScreen || vrLoadingScreenPrefab == null) return;\n            \n            if (show)\n            {\n                if (vrLoadingScreenPrefab != null)\n                {\n                    Instantiate(vrLoadingScreenPrefab);\n                }\n            }\n        }\n        \n        #endregion\n        \n        #region Scene Loading Optimization\n        \n        public void LoadSceneAsync(string sceneName, System.Action onComplete = null)\n        {\n            if (currentLoadingOperation != null)\n            {\n                StopCoroutine(currentLoadingOperation);\n            }\n            \n            currentLoadingOperation = StartCoroutine(LoadSceneAsyncCoroutine(sceneName, onComplete));\n        }\n        \n        private IEnumerator LoadSceneAsyncCoroutine(string sceneName, System.Action onComplete)\n        {\n            ShowVRLoadingScreen(true);\n            \n            // Start async scene loading\n            AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(sceneName);\n            asyncLoad.allowSceneActivation = false;\n            \n            // Load scene in background while showing progress\n            while (asyncLoad.progress < 0.9f)\n            {\n                if (showLoadingProgress)\n                {\n                    float progress = asyncLoad.progress / 0.9f;\n                    Debug.Log($\"[FastLoader] Loading {sceneName}: {progress * 100:F1}%\");\n                }\n                yield return null;\n            }\n            \n            // Activate the scene\n            asyncLoad.allowSceneActivation = true;\n            \n            // Wait for completion\n            yield return asyncLoad;\n            \n            ShowVRLoadingScreen(false);\n            onComplete?.Invoke();\n            \n            if (logOptimizationResults)\n            {\n                Debug.Log($\"[FastLoader] Scene '{sceneName}' loaded successfully\");\n            }\n        }\n        \n        #endregion\n        \n        #region Editor Optimizations\n        \n        #if UNITY_EDITOR\n        private void ApplyEditorOptimizations()\n        {\n            // These optimizations only apply in Unity Editor\n            UnityEditor.EditorSettings.enterPlayModeOptionsEnabled = true;\n            UnityEditor.EditorSettings.enterPlayModeOptions = \n                UnityEditor.EnterPlayModeOptions.DisableDomainReload |\n                UnityEditor.EnterPlayModeOptions.DisableSceneReload;\n                \n            // Enable script compilation optimizations\n            UnityEditor.Compilation.CompilationPipeline.RequestScriptCompilation();\n        }\n        #endif\n        \n        #endregion\n        \n        #region Runtime Optimizations\n        \n        private void ApplyRuntimeOptimizations()\n        {\n            // Set target frame rate for VR\n            Application.targetFrameRate = 90; // Quest 3 target\n            \n            // Optimize garbage collection\n            System.GC.Collect();\n            \n            // Enable multithreaded rendering\n            QualitySettings.maxQueuedFrames = 2;\n            \n            // Optimize physics\n            Physics.defaultSolverIterations = 4;\n            Physics.defaultSolverVelocityIterations = 1;\n            \n            // Set appropriate quality level for VR\n            QualitySettings.SetQualityLevel(2, true); // High quality but not Ultra\n        }\n        \n        #endregion\n        \n        #region Public API\n        \n        /// <summary>\n        /// Preload specific asset asynchronously\n        /// </summary>\n        public void PreloadAsset(string assetKey, System.Action<bool> onComplete = null)\n        {\n            StartCoroutine(PreloadAssetCoroutine(assetKey, onComplete));\n        }\n        \n        private IEnumerator PreloadAssetCoroutine(string assetKey, System.Action<bool> onComplete)\n        {\n            if (preloadedAssets.ContainsKey(assetKey))\n            {\n                onComplete?.Invoke(true);\n                yield break;\n            }\n            \n            try\n            {\n                var handle = Addressables.LoadAssetAsync<GameObject>(assetKey);\n                preloadedAssets[assetKey] = handle;\n                yield return handle;\n                \n                bool success = handle.Status == AsyncOperationStatus.Succeeded;\n                onComplete?.Invoke(success);\n            }\n            catch (System.Exception e)\n            {\n                Debug.LogError($\"[FastLoader] Failed to preload {assetKey}: {e.Message}\");\n                onComplete?.Invoke(false);\n            }\n        }\n        \n        /// <summary>\n        /// Force optimize loading for immediate effect\n        /// </summary>\n        public void ForceOptimizeNow()\n        {\n            StartCoroutine(OptimizeLoadingPipeline());\n        }\n        \n        /// <summary>\n        /// Get loading statistics\n        /// </summary>\n        public string GetLoadingStats()\n        {\n            float currentTime = Time.realtimeSinceStartup - loadingStartTime;\n            return $\"Loading Time: {currentTime:F2}s | Preloaded Assets: {preloadedAssets.Count}\";\n        }\n        \n        #endregion\n        \n        #region Cleanup\n        \n        private void OnDestroy()\n        {\n            // Release preloaded assets\n            foreach (var kvp in preloadedAssets)\n            {\n                if (kvp.Value.IsValid())\n                {\n                    Addressables.Release(kvp.Value);\n                }\n            }\n            preloadedAssets.Clear();\n        }\n        \n        #endregion\n    }\n} 