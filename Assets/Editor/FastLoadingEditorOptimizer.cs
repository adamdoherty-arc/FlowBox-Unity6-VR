using UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Compilation;\nusing System.IO;\n\nnamespace VRBoxingGame.Editor\n{\n    /// <summary>\n    /// Fast Loading Editor Optimizer - Applies Unity Editor optimizations for faster development workflow\n    /// Automatically configures Editor settings for optimal FlowBox VR project loading\n    /// </summary>\n    [InitializeOnLoad]\n    public class FastLoadingEditorOptimizer\n    {\n        private const string OPTIMIZATION_KEY = \"FlowBox_EditorOptimized\";\n        \n        static FastLoadingEditorOptimizer()\n        {\n            // Apply optimizations when Unity starts\n            EditorApplication.delayCall += ApplyOptimizations;\n        }\n        \n        [MenuItem(\"FlowBox/Optimize Loading Times\")]\n        public static void OptimizeLoadingTimes()\n        {\n            ApplyOptimizations();\n            EditorUtility.DisplayDialog(\"FlowBox Optimizer\", \n                \"Loading optimizations applied successfully!\\n\\n\" +\n                \"‚úÖ Editor loading optimized\\n\" +\n                \"‚úÖ Enter Play Mode optimized\\n\" +\n                \"‚úÖ Script compilation optimized\\n\" +\n                \"‚úÖ Asset import optimized\", \"OK\");\n        }\n        \n        [MenuItem(\"FlowBox/Show Loading Stats\")]\n        public static void ShowLoadingStats()\n        {\n            var stats = GetLoadingStats();\n            EditorUtility.DisplayDialog(\"FlowBox Loading Stats\", stats, \"OK\");\n        }\n        \n        [MenuItem(\"FlowBox/Reset Editor Optimizations\")]\n        public static void ResetOptimizations()\n        {\n            ResetToDefaults();\n            EditorUtility.DisplayDialog(\"FlowBox Optimizer\", \"Editor settings reset to defaults.\", \"OK\");\n        }\n        \n        private static void ApplyOptimizations()\n        {\n            if (EditorPrefs.GetBool(OPTIMIZATION_KEY, false))\n                return; // Already optimized\n                \n            Debug.Log(\"[FlowBox] Applying Editor loading optimizations...\");\n            \n            // 1. Enable Enter Play Mode Options (MASSIVE speed improvement)\n            EditorSettings.enterPlayModeOptionsEnabled = true;\n            EditorSettings.enterPlayModeOptions = \n                EnterPlayModeOptions.DisableDomainReload |\n                EnterPlayModeOptions.DisableSceneReload;\n            \n            // 2. Optimize script compilation\n            EditorSettings.scriptCompilationDuringPlay = ScriptCompilationDuringPlay.Recompile;\n            \n            // 3. Optimize asset processing\n            EditorSettings.spritePackerMode = SpritePackerMode.AlwaysOnAtlas;\n            EditorSettings.cachingShaderPreprocessor = true;\n            \n            // 4. Optimize inspector updates\n            EditorSettings.inspectorDefaultMargin = 4;\n            \n            // 5. Set asset serialization to Force Text (better for version control)\n            EditorSettings.serializationMode = SerializationMode.ForceText;\n            \n            // 6. Optimize line endings\n            EditorSettings.lineEndingsForNewScripts = LineEndingsMode.Unix;\n            \n            // 7. Enable async shader compilation\n            EditorSettings.asyncShaderCompilation = true;\n            \n            // 8. Configure project browser\n            EditorPrefs.SetBool(\"ProjectBrowser.ShowPackagesInProjectWindow\", false);\n            \n            // 9. Optimize console performance\n            EditorPrefs.SetInt(\"ConsoleWindow.ErrorPause\", 0);\n            \n            // 10. Set quality level appropriate for editor testing\n            QualitySettings.SetQualityLevel(1, true); // Medium quality for editor\n            \n            // Mark as optimized\n            EditorPrefs.SetBool(OPTIMIZATION_KEY, true);\n            \n            Debug.Log(\"[FlowBox] ‚úÖ Editor optimizations applied! Play Mode should be 5-10x faster.\");\n        }\n        \n        private static void ResetToDefaults()\n        {\n            EditorSettings.enterPlayModeOptionsEnabled = false;\n            EditorSettings.scriptCompilationDuringPlay = ScriptCompilationDuringPlay.Recompile;\n            EditorSettings.serializationMode = SerializationMode.Mixed;\n            EditorSettings.lineEndingsForNewScripts = LineEndingsMode.OSNative;\n            EditorSettings.asyncShaderCompilation = false;\n            \n            EditorPrefs.SetBool(OPTIMIZATION_KEY, false);\n            \n            Debug.Log(\"[FlowBox] Editor settings reset to defaults.\");\n        }\n        \n        private static string GetLoadingStats()\n        {\n            var stats = \"üìä FlowBox Loading Statistics:\\n\\n\";\n            \n            // Unity version\n            stats += $\"Unity Version: {Application.unityVersion}\\n\";\n            \n            // Project stats\n            var scriptCount = Directory.GetFiles(\"Assets\", \"*.cs\", SearchOption.AllDirectories).Length;\n            stats += $\"C# Scripts: {scriptCount}\\n\";\n            \n            // Asset stats\n            var assetCount = Directory.GetFiles(\"Assets\", \"*.*\", SearchOption.AllDirectories)\n                .Where(f => !f.EndsWith(\".meta\") && !f.EndsWith(\".cs\")).Count();\n            stats += $\"Assets: {assetCount}\\n\\n\";\n            \n            // Optimization status\n            bool isOptimized = EditorPrefs.GetBool(OPTIMIZATION_KEY, false);\n            stats += $\"Loading Optimizations: {(isOptimized ? \"‚úÖ ENABLED\" : \"‚ùå DISABLED\")}\\n\";\n            \n            // Enter Play Mode options\n            stats += $\"Fast Play Mode: {(EditorSettings.enterPlayModeOptionsEnabled ? \"‚úÖ ON\" : \"‚ùå OFF\")}\\n\";\n            \n            // Async shader compilation\n            stats += $\"Async Shaders: {(EditorSettings.asyncShaderCompilation ? \"‚úÖ ON\" : \"‚ùå OFF\")}\\n\";\n            \n            // Domain reload settings\n            if (EditorSettings.enterPlayModeOptionsEnabled)\n            {\n                bool domainReload = (EditorSettings.enterPlayModeOptions & EnterPlayModeOptions.DisableDomainReload) == 0;\n                bool sceneReload = (EditorSettings.enterPlayModeOptions & EnterPlayModeOptions.DisableSceneReload) == 0;\n                stats += $\"Domain Reload: {(domainReload ? \"ENABLED\" : \"DISABLED\")}\\n\";\n                stats += $\"Scene Reload: {(sceneReload ? \"ENABLED\" : \"DISABLED\")}\\n\";\n            }\n            \n            stats += \"\\nüí° Tip: Use 'FlowBox/Optimize Loading Times' to enable all optimizations!\";\n            \n            return stats;\n        }\n        \n        /// <summary>\n        /// Clean up project for optimal loading\n        /// </summary>\n        [MenuItem(\"FlowBox/Clean Project for Fast Loading\")]\n        public static void CleanProjectForFastLoading()\n        {\n            bool confirm = EditorUtility.DisplayDialog(\"Clean Project\", \n                \"This will clean up your project for optimal loading:\\n\\n\" +\n                \"‚Ä¢ Delete Library folder\\n\" +\n                \"‚Ä¢ Delete Temp folder\\n\" +\n                \"‚Ä¢ Delete Logs folder\\n\" +\n                \"‚Ä¢ Clear Unity cache\\n\\n\" +\n                \"Continue?\", \"Yes\", \"Cancel\");\n                \n            if (!confirm) return;\n            \n            try\n            {\n                // Close any open scenes to prevent issues\n                EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();\n                \n                // Clean up folders\n                if (Directory.Exists(\"Library\"))\n                {\n                    Directory.Delete(\"Library\", true);\n                    Debug.Log(\"[FlowBox] Deleted Library folder\");\n                }\n                \n                if (Directory.Exists(\"Temp\"))\n                {\n                    Directory.Delete(\"Temp\", true);\n                    Debug.Log(\"[FlowBox] Deleted Temp folder\");\n                }\n                \n                if (Directory.Exists(\"Logs\"))\n                {\n                    Directory.Delete(\"Logs\", true);\n                    Debug.Log(\"[FlowBox] Deleted Logs folder\");\n                }\n                \n                // Clear shader cache\n                Caching.ClearCache();\n                \n                // Refresh asset database\n                AssetDatabase.Refresh();\n                \n                EditorUtility.DisplayDialog(\"Clean Complete\", \n                    \"Project cleaned successfully!\\n\\n\" +\n                    \"Unity will now reimport all assets.\\n\" +\n                    \"This may take a few minutes, but subsequent loads will be faster.\", \"OK\");\n                    \n                Debug.Log(\"[FlowBox] ‚úÖ Project cleanup complete. Next Unity startup will be optimized.\");\n            }\n            catch (System.Exception e)\n            {\n                Debug.LogError($\"[FlowBox] Error during cleanup: {e.Message}\");\n                EditorUtility.DisplayDialog(\"Cleanup Error\", $\"Error during cleanup:\\n{e.Message}\", \"OK\");\n            }\n        }\n        \n        /// <summary>\n        /// Apply VR-specific editor optimizations\n        /// </summary>\n        [MenuItem(\"FlowBox/Apply VR Editor Optimizations\")]\n        public static void ApplyVREditorOptimizations()\n        {\n            // Set VR-appropriate quality settings for editor\n            QualitySettings.vSyncCount = 0; // Disable VSync in editor\n            QualitySettings.maxQueuedFrames = 1;\n            \n            // Optimize for VR development\n            PlayerSettings.virtualRealitySupported = true;\n            \n            // Set appropriate color space\n            PlayerSettings.colorSpace = ColorSpace.Linear;\n            \n            // Configure graphics settings for VR\n            var tier1 = EditorGraphicsSettings.GetTierSettings(EditorUserBuildSettings.selectedBuildTargetGroup, GraphicsTier.Tier1);\n            tier1.renderingPath = RenderingPath.Forward;\n            tier1.hdr = false;\n            EditorGraphicsSettings.SetTierSettings(EditorUserBuildSettings.selectedBuildTargetGroup, GraphicsTier.Tier1, tier1);\n            \n            Debug.Log(\"[FlowBox] ‚úÖ VR Editor optimizations applied.\");\n            \n            EditorUtility.DisplayDialog(\"VR Optimizations Applied\", \n                \"VR-specific editor optimizations applied:\\n\\n\" +\n                \"‚úÖ VSync disabled for editor\\n\" +\n                \"‚úÖ Forward rendering enabled\\n\" +\n                \"‚úÖ Linear color space set\\n\" +\n                \"‚úÖ Quality settings optimized\", \"OK\");\n        }\n    }\n} 