{
  "summary": {
    "total_issues": 8599,
    "critical_issues": 32,
    "warning_issues": 1756,
    "info_issues": 6811,
    "issues_by_category": {
      "CodeQuality": 1579,
      "ErrorHandling": 5077,
      "MemoryManagement": 1222,
      "Threading": 155,
      "Performance": 63,
      "Unity6Compliance": 255,
      "VROptimization": 244,
      "AsyncPatterns": 3,
      "Architecture": 1
    },
    "all_issues": [
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int authTimeoutSeconds = 60;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float analysisUpdateRate = 0.1f; // 10 times per second"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCachedPlaylists = 25;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxSongsPerPlaylist = 150;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 205,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcfa Initializing YouTube Music Integration...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 233,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "energyData = new MusicEnergyData();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 YouTube Music Integration initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (enableRealTimeAnalysis && isAuthenticated && !string.IsNullOrEmpty(currentTrack.videoId))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (isAuthenticated && DateTime.Now >= tokenExpirationTime.AddMinutes(-5))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c YouTube Music Client ID or Secret not configured!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd10 Starting YouTube Music OAuth2 authentication...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcf1 Open this URL to authenticate: {authUrl}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Application.OpenURL(authUrl);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(authCode))"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 293,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 YouTube Music authentication successful!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f YouTube Music authentication failed or cancelled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c YouTube Music authentication error: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scopes = string.Join(\" \", requestedScopes);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string state = Guid.NewGuid().ToString(\"N\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "$\"redirect_uri={UnityWebRequest.EscapeURL(redirectURI)}&\" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "$\"scope={UnityWebRequest.EscapeURL(scopes)}&\" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(5000);"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 333,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return \"simulated_auth_code_\" + DateTime.Now.Ticks;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 340,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var form = new WWWForm();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"client_id\", clientId);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 342,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"client_secret\", clientSecret);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"code\", authCode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"grant_type\", \"authorization_code\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"redirect_uri\", redirectURI);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 347,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var request = UnityWebRequest.Post(OAUTH2_TOKEN_URL, form))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await request.SendWebRequest();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tokenExpirationTime = DateTime.Now.AddSeconds(tokenResponse.expiresIn);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Token exchange failed: {request.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Token exchange error: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(refreshToken))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f No refresh token available\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 388,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var form = new WWWForm();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"client_id\", clientId);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"client_secret\", clientSecret);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"refresh_token\", refreshToken);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "form.AddField(\"grant_type\", \"refresh_token\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var request = UnityWebRequest.Post(OAUTH2_TOKEN_URL, form))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await request.SendWebRequest();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tokenExpirationTime = DateTime.Now.AddSeconds(tokenResponse.expiresIn);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 YouTube Music token refreshed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Token refresh failed: {request.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Token refresh error: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with YouTube Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb Loading YouTube Music playlists...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var response = await request.SendWebRequest())"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 446,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPlaylistsLoaded?.Invoke(userPlaylists);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Loaded {userPlaylists.Count} YouTube Music playlists\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 453,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to load playlists: {response.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 460,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading playlists: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with YouTube Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Loading tracks for playlist: {playlistId}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var response = await request.SendWebRequest())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Loaded {tracks.Count} tracks from playlist\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to load tracks: {response.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading tracks: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with YouTube Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Searching YouTube Music for: {query}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string encodedQuery = UnityWebRequest.EscapeURL(query);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var response = await request.SendWebRequest())"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 528,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSearchResults?.Invoke(searchResults);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 529,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Found {results.Count} search results\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Search failed: {response.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Search error: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 552,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with YouTube Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(track.videoId))"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 562,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTrackChanged?.Invoke(currentTrack);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Now playing: {track.title} by {track.artist}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error playing track: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 636,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatDetection.beatConfidence = Mathf.Min(beatProbability, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 642,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float bpmDifference = Mathf.Abs(measuredBPM - beatDetection.averageBPM);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 645,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatDetection.tempoStability = Mathf.Lerp(beatDetection.tempoStability,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 650,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatDetection.averageBPM = Mathf.Lerp(beatDetection.averageBPM, measuredBPM, smoothingFactor);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 664,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBeatDetected?.Invoke(beatData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 675,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int numBands = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 679,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int band = 0; band < numBands; band++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 681,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float energy = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 683,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int endIndex = Mathf.Min(startIndex + samplesPerBand, frequencySpectrum.Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 697,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyData.overallEnergy = bandEnergies.Average();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 700,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyData.dynamicRange = bandEnergies.Max() - bandEnergies.Min();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 705,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnEnergyAnalyzed?.Invoke(energyData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 723,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float energy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 724,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 734,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float variance = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 736,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 748,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float flux = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 749,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 759,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float numerator = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 760,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float denominator = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 762,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 773,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 774,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 780,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float cumulativeEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 782,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 796,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int crossings = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 797,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 820,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 823,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float fundamental = Mathf.Sin(time * 2f * Mathf.PI * 440f * (i + 1) / 1000f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 824,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float harmonic2 = Mathf.Sin(time * 2f * Mathf.PI * 880f * (i + 1) / 1000f) * 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 825,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float harmonic3 = Mathf.Sin(time * 2f * Mathf.PI * 1320f * (i + 1) / 1000f) * 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 831,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 834,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float bassComponent = Mathf.Exp(-frequency * 5f) * 0.4f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 835,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float midComponent = Mathf.Exp(-Mathf.Abs(frequency - 0.3f) * 8f) * 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 839,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(time + i * 0.1f) * 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 845,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var request = UnityWebRequest.Get(url);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 846,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Authorization\", $\"Bearer {accessToken}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 847,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 863,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new YouTubeMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 863,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new YouTubeMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 870,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "createdDate = DateTime.Now.AddDays(-15),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 874,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new YouTubeMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 874,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new YouTubeMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 881,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "createdDate = DateTime.Now.AddDays(-5),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 892,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "tracks.Add(new YouTubeMusicTrack"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 892,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tracks.Add(new YouTubeMusicTrack"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 915,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(300);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 931,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd2c Starting enhanced analysis for track: {videoId}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 932,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(150);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 937,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcda Loading YouTube Music library...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 949,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 957,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Updating music recommendations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 960,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 962,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendedTracks.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 963,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendedTracks.Add(new YouTubeMusicTrack"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 963,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendedTracks.Add(new YouTubeMusicTrack"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 973,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnRecommendationsUpdated?.Invoke(recommendedTracks);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 981,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (userPreferences.ContainsKey(category))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 983,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "userPreferences[category] += 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 987,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "userPreferences[category] = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 995,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"YouTubeMusic_AccessToken\", accessToken);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 996,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"YouTubeMusic_RefreshToken\", refreshToken);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 997,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"YouTubeMusic_TokenExpiry\", tokenExpirationTime.ToBinary().ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 998,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"YouTubeMusic_UserEmail\", userEmail);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 999,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"YouTubeMusic_UserId\", userId);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1000,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"YouTubeMusic_IsAuthenticated\", isAuthenticated ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1005,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "isAuthenticated = PlayerPrefs.GetInt(\"YouTubeMusic_IsAuthenticated\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1005,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "isAuthenticated = PlayerPrefs.GetInt(\"YouTubeMusic_IsAuthenticated\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1006,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accessToken = PlayerPrefs.GetString(\"YouTubeMusic_AccessToken\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1007,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "refreshToken = PlayerPrefs.GetString(\"YouTubeMusic_RefreshToken\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1008,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userEmail = PlayerPrefs.GetString(\"YouTubeMusic_UserEmail\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1009,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userId = PlayerPrefs.GetString(\"YouTubeMusic_UserId\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1011,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string expiryString = PlayerPrefs.GetString(\"YouTubeMusic_TokenExpiry\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1012,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(expiryString) && long.TryParse(expiryString, out long expiryBinary))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1014,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tokenExpirationTime = DateTime.FromBinary(expiryBinary);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1044,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userPlaylists.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1045,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentPlaylistTracks.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1046,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "searchResults.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1047,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendedTracks.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1048,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userPreferences.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1051,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_AccessToken\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1052,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_RefreshToken\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1053,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_TokenExpiry\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1054,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_UserEmail\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1055,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_UserId\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1056,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"YouTubeMusic_IsAuthenticated\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1058,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1059,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcfa YouTube Music disconnected\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1065,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (audioSamples.IsCreated) audioSamples.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1066,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frequencySpectrum.IsCreated) frequencySpectrum.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1075,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float sum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1076,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < array.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1086,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < array.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/YouTubeMusicIntegration.cs",
        "line": 1096,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < array.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int sampleDataLength = 1024;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float updateRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatSensitivity = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatThreshold = 0.15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatCooldown = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int beatHistorySize = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int frequencyBands = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float bassRange = 0.125f;      // 0-12.5% of spectrum"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float midRange = 0.375f;       // 12.5-50% of spectrum"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float trebleRange = 0.5f;      // 50-100% of spectrum"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float bpmUpdateInterval = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minBPM = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxBPM = 200f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 90,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentBPM = 120f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Music Reactive System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicSource.GetSpectrumData(sampleData, 0, FFTWindow.BlackmanHarris);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 174,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sampleData.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = analysisJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete(); // Complete for this frame"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 203,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 218,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFrequencyUpdate?.Invoke(freqData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 228,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnEnergyUpdate?.Invoke(energyData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 239,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int bassEnd = Mathf.RoundToInt(frequencyBands.Length * bassRange);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 246,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < bassEnd; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int midEnd = Mathf.RoundToInt(frequencyBands.Length * midRange);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 280,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float weightedSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 281,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float magnitudeSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 283,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sampleData.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyHistory.Enqueue(instantEnergy);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 305,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 313,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float variance = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "variance += Mathf.Pow(energy - averageEnergy, 2);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyVariance = Mathf.Sqrt(variance / energyHistory.Count);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float confidence = Mathf.Clamp01(beatStrength / (beatThreshold * 2f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatHistory.Enqueue(Time.time);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 356,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBeatDetected?.Invoke(beatInfo);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float[] beats = beatHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 369,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < beats.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 374,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "intervals.Add(60f / interval); // Convert to BPM"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "intervals.Add(60f / interval); // Convert to BPM"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "intervals.Sort();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float targetBPM = Mathf.Clamp(medianBPM, minBPM, maxBPM);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentBPM = Mathf.Lerp(currentBPM, targetBPM, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 388,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBPMChanged?.Invoke(currentBPM);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 407,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 408,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < bandCount; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 410,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float average = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int sampleCount = (int)math.pow(2, i) * 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 413,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (i == 7) sampleCount += 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 415,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int j = 0; j < sampleCount; j++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 430,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 431,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyData.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicSource.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 458,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicSource.Stop();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicSource.volume = Mathf.Clamp01(volume);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (nativeSampleData.IsCreated) nativeSampleData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (nativeFrequencyData.IsCreated) nativeFrequencyData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (beatResults.IsCreated) beatResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 528,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 531,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Rect barRect = new Rect(i * barWidth, Screen.height - barHeight, barWidth - 2, barHeight);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 533,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color barColor = Color.Lerp(Color.blue, Color.red, frequencyBands[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.DrawTexture(barRect, Texture2D.whiteTexture);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 542,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 10, 200, 30), $\"BPM: {currentBPM:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 10, 200, 30), $\"BPM: {currentBPM:F1}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 543,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 40, 200, 30), $\"Energy: {instantEnergy:F3}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/MusicReactiveSystem.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 40, 200, 30), $\"Energy: {instantEnergy:F3}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int authTimeoutSeconds = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float analysisUpdateRate = 0.1f; // 10 times per second"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCachedPlaylists = 20;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxSongsPerPlaylist = 100;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf4e Initializing Apple Music Integration...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 187,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "energyData = new MusicEnergyData();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Apple Music Integration initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(developerToken))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Apple Music Developer Token not configured!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd10 Starting Apple Music authentication...\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 229,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Apple Music authentication successful!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Apple Music authentication failed or cancelled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Apple Music authentication error: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(2000); // Simulate auth time"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tokenExpirationTime = DateTime.Now.AddHours(1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with Apple Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb Loading Apple Music playlists...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var response = await request.SendWebRequest())"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 298,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPlaylistsLoaded?.Invoke(userPlaylists);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Loaded {userPlaylists.Count} Apple Music playlists\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to load playlists: {response.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading playlists: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with Apple Music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Loading tracks for playlist: {playlistId}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (var response = await request.SendWebRequest())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Loaded {tracks.Count} tracks from playlist\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to load tracks: {response.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading tracks: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Not authenticated with Apple Music\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 372,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTrackChanged?.Invoke(currentTrack);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Now playing: {track.title} by {track.artist}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error playing track: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23f8\ufe0f Apple Music playback paused\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u25b6\ufe0f Apple Music playback resumed\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 408,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "currentTrack = new AppleMusicTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 409,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23f9\ufe0f Apple Music playback stopped\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 436,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSamples[i] = Mathf.Sin(Time.time * 2f * Mathf.PI * (i + 1) / 100f) * 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 442,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencySpectrum.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frequencySpectrum[i] = Mathf.Abs(Mathf.Sin(Time.time + i * 0.1f)) * 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "beatDetection.averageBPM = Mathf.Lerp(beatDetection.averageBPM, measuredBPM, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 481,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBeatDetected?.Invoke(beatData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 496,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float bassEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 497,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float midEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 498,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float trebleEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 500,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < bassRange; i++)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 523,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnEnergyAnalyzed?.Invoke(energyData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 528,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float energy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 529,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 539,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var request = UnityWebRequest.Get(url);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 540,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Authorization\", $\"Bearer {developerToken}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Music-User-Token\", userToken);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 552,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new AppleMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 552,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new AppleMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastModified = DateTime.Now.AddDays(-7)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 562,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new AppleMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playlists.Add(new AppleMusicPlaylist"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 569,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastModified = DateTime.Now.AddDays(-3)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 580,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "tracks.Add(new AppleMusicTrack"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tracks.Add(new AppleMusicTrack"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 611,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd2c Starting real-time analysis for track: {trackId}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 612,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 617,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcda Loading Apple Music library...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 624,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"AppleMusic_UserToken\", userToken);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 625,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"AppleMusic_CountryCode\", currentCountryCode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 626,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"AppleMusic_TokenExpiry\", tokenExpirationTime.ToBinary().ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 627,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"AppleMusic_IsAuthenticated\", isAuthenticated ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 632,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "isAuthenticated = PlayerPrefs.GetInt(\"AppleMusic_IsAuthenticated\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 632,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "isAuthenticated = PlayerPrefs.GetInt(\"AppleMusic_IsAuthenticated\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 633,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userToken = PlayerPrefs.GetString(\"AppleMusic_UserToken\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 634,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentCountryCode = PlayerPrefs.GetString(\"AppleMusic_CountryCode\", \"US\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 636,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string expiryString = PlayerPrefs.GetString(\"AppleMusic_TokenExpiry\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 637,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(expiryString) && long.TryParse(expiryString, out long expiryBinary))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 639,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tokenExpirationTime = DateTime.FromBinary(expiryBinary);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "userPlaylists.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 663,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentPlaylistTracks.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 666,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"AppleMusic_UserToken\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 667,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"AppleMusic_CountryCode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"AppleMusic_TokenExpiry\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 669,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.DeleteKey(\"AppleMusic_IsAuthenticated\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 671,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 672,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf4e Apple Music disconnected\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 678,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (audioSamples.IsCreated) audioSamples.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Music/AppleMusicIntegration.cs",
        "line": 679,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frequencySpectrum.IsCreated) frequencySpectrum.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 59,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float menuDistance = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float selectionTime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 72,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentSceneIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 78,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastUIUpdateTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 79,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "OptimizedUpdateManager.Instance.RegisterSystem(this);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 124,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(WaitForSystemsAndInitialize());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 130,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitUntil(() =>"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "CriticalSystemIntegrator.Instance.AreSystemsInitialized());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enhanced Main Menu System (Optimized) initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcdd Menu system cached all optimized system references\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playButton) playButton.onClick.AddListener(QuickPlay);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameModesButton) gameModesButton.onClick.AddListener(ShowGameModes);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneSelectionButton) sceneSelectionButton.onClick.AddListener(ShowSceneSelection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (settingsButton) settingsButton.onClick.AddListener(ShowSettings);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (profileButton) profileButton.onClick.AddListener(ShowProfile);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (quitButton) quitButton.onClick.AddListener(QuitGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (traditionalModeButton) traditionalModeButton.onClick.AddListener(() => SelectGameMode(SceneGameModeIntegrator.GameMode.Traditional));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (flowModeButton) flowModeButton.onClick.AddListener(() => SelectGameMode(SceneGameModeIntegrator.GameMode.Flow));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (staffModeButton) staffModeButton.onClick.AddListener(() => SelectGameMode(SceneGameModeIntegrator.GameMode.Staff));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (dodgingModeButton) dodgingModeButton.onClick.AddListener(() => SelectGameMode(SceneGameModeIntegrator.GameMode.Dodging));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (aiCoachButton) aiCoachButton.onClick.AddListener(() => SelectGameMode(SceneGameModeIntegrator.GameMode.AICoach));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (normalModeToggle) normalModeToggle.onValueChanged.AddListener(OnNormalModeToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (immersiveModeToggle) immersiveModeToggle.onValueChanged.AddListener(OnImmersiveModeToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (scenePlayButton) scenePlayButton.onClick.AddListener(PlaySelectedScene);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (difficultySlider) difficultySlider.onValueChanged.AddListener(OnDifficultyChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSceneIndex = PlayerPrefs.GetInt(\"SelectedSceneIndex\", 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 216,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "isImmersiveMode = PlayerPrefs.GetInt(\"ImmersiveMode\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "isImmersiveMode = PlayerPrefs.GetInt(\"ImmersiveMode\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 217,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int savedGameMode = PlayerPrefs.GetInt(\"SelectedGameMode\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 267,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sceneDefinitions.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 270,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 291,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = sceneButtonContainer.childCount - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Destroy(sceneButtonContainer.GetChild(i).gameObject);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "DestroyImmediate(sceneButtonContainer.GetChild(i).gameObject);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 300,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < availableScenes.Count; i++)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 305,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject buttonObj = Instantiate(sceneButtonPrefab, sceneButtonContainer);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 306,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Button button = buttonObj.GetComponent<Button>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "button.onClick.AddListener(() => SelectScene(sceneIndex));"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 367,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "currentGazedButton.onClick.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentGazedButton.onClick.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 368,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"SelectedGameMode\", (int)gameMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameModeIntegrator.SetGameMode(gameMode);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 399,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameModeChanged?.Invoke(gameMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfae Selected game mode: {gameMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool flowSupported = gameModeIntegrator.IsGameModeSupported(SceneGameModeIntegrator.GameMode.Flow, currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool staffSupported = gameModeIntegrator.IsGameModeSupported(SceneGameModeIntegrator.GameMode.Staff, currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool dodgingSupported = gameModeIntegrator.IsGameModeSupported(SceneGameModeIntegrator.GameMode.Dodging, currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return gameModeIntegrator.IsGameModeSupported(gameMode, sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"SelectedSceneIndex\", sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 440,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneSelected?.Invoke(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (mainMenuPanel) mainMenuPanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameModesPanel) gameModesPanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneSelectionPanel) sceneSelectionPanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (settingsPanel) settingsPanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (profilePanel) profilePanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (panel != null) panel.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 531,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int timesPlayed = PlayerPrefs.GetInt($\"Scene_{currentSceneIndex}_TimesPlayed\", 0) + 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 532,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt($\"Scene_{currentSceneIndex}_TimesPlayed\", timesPlayed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool success = await sceneAssetManager.LoadSceneAsync(currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Failed to load scene\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneAssetManager not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 556,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameManager.StartGame();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 565,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameStarted?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfae Game started: {currentGameMode} mode in scene {currentSceneIndex}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 571,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd1a Quitting game...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Application.Quit();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 585,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"ImmersiveMode\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"ImmersiveMode\", 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 605,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat(\"GameDifficulty\", value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 610,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Scene {sceneIndex} loaded successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 620,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Performance warning in menu: {frameTime * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 628,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "uiAudioSource.PlayOneShot(uiSounds[soundIndex]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystemOptimized.cs",
        "line": 652,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "OptimizedUpdateManager.Instance.UnregisterSystem(this);"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 4,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxDisplayedLogs = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float updateInterval = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clearLogsButton.onClick.AddListener(ClearLogs);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "exportLogsButton.onClick.AddListener(ExportLogs);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 97,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleSystemStatusButton.onClick.AddListener(ToggleSystemStatus);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "togglePerformanceButton.onClick.AddListener(TogglePerformance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logLevelFilter.ClearOptions();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foreach (AdvancedLoggingSystem.LogLevel level in System.Enum.GetValues(typeof(AdvancedLoggingSystem.LogLevel)))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 112,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "levelOptions.Add(level.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 112,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "levelOptions.Add(level.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logLevelFilter.AddOptions(levelOptions);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logLevelFilter.onValueChanged.AddListener(OnLogLevelChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "categoryFilter.ClearOptions();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foreach (AdvancedLoggingSystem.LogCategory category in System.Enum.GetValues(typeof(AdvancedLoggingSystem.LogCategory)))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 126,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "categoryOptions.Add(category.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "categoryOptions.Add(category.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "categoryFilter.AddOptions(categoryOptions);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "categoryFilter.onValueChanged.AddListener(OnCategoryChanged);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 137,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "logCountSlider.minValue = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 138,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "logCountSlider.maxValue = 200;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logCountSlider.onValueChanged.AddListener(OnLogCountChanged);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 167,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "ctrlPressed = Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ctrlPressed = Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 170,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (ctrlPressed && Input.GetKeyDown(KeyCode.BackQuote))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (ctrlPressed && Input.GetKeyDown(KeyCode.BackQuote))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 178,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.C)) ClearLogs();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.C)) ClearLogs();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 179,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.E)) ExportLogs();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 179,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.E)) ExportLogs();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 180,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.S)) ToggleSystemStatus();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.S)) ToggleSystemStatus();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 181,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.P)) TogglePerformance();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.P)) TogglePerformance();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 193,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var displayText = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foreach (var log in logs.TakeLast(maxDisplayedLogs))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "displayText.AppendLine($\"{colorTag}{log.timestamp:HH:mm:ss.ff} {icon} [{log.category}] {log.system}: {log.message}</color>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logTextDisplay.text = displayText.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Canvas.ForceUpdateCanvases();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 209,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "logScrollRect.verticalNormalizedPosition = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var allLogs = AdvancedLoggingSystem.GetRecentLogs(500);"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 217,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "return allLogs.Where(log =>"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 217,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return allLogs.Where(log =>"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogLevel.Error => $\"<color=#{ColorUtility.ToHtmlStringRGB(errorColor)}>\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogLevel.Critical => $\"<color=#{ColorUtility.ToHtmlStringRGB(errorColor)}>\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogLevel.Warning => $\"<color=#{ColorUtility.ToHtmlStringRGB(warningColor)}>\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogLevel.Debug => $\"<color=#{ColorUtility.ToHtmlStringRGB(debugColor)}>\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "_ => $\"<color=#{ColorUtility.ToHtmlStringRGB(infoColor)}>\""
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 253,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var statusText = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine(\"<b>=== System Status ===</b>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Game Manager: {GetSystemStatus<GameManager>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Audio Manager: {GetSystemStatus<AdvancedAudioManager>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Hand Tracking: {GetSystemStatus<HandTrackingManager>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Rhythm Targets: {GetSystemStatus<RhythmTargetSystem>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Form Tracker: {GetSystemStatus<BoxingFormTracker>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"VR Camera Helper: {GetSystemStatus<VRCameraHelper>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Movement System: {GetSystemStatus<VR360MovementSystem>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Haptic Feedback: {GetSystemStatus<HapticFeedbackManager>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Performance Monitor: {GetSystemStatus<VRPerformanceMonitor>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"Render Graph: {GetSystemStatus<VRRenderGraphSystem>()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusText.AppendLine($\"\\n<b>Session:</b> {AdvancedLoggingSystem.GetSessionReport().Split('\\n')[1]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemStatusDisplay.text = statusText.ToString();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 290,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var perfText = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine(\"<b>=== Performance ===</b>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"FPS: <color={fpsColor}>{fps:F1}</color>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"Frame Time: <color={frameTimeColor}>{frameTime:F1}ms</color>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long memoryUsage = System.GC.GetTotalMemory(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"Memory: <color={memoryColor}>{memoryMB:F1} MB</color>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"Time Scale: {Time.timeScale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"Frame Count: {Time.frameCount}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var recentErrors = AdvancedLoggingSystem.GetErrorLogs(3);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine(\"\\n<b><color=red>Recent Errors:</color></b>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfText.AppendLine($\"<color=red>\u2022 {error.timestamp:HH:mm:ss} - {error.system}: {error.message.Substring(0, Mathf.Min(50, error.message.Length))}...</color>\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceDisplay.text = perfText.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "displayedLogs.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.UI, \"DebugPanel\", \"\ud83e\uddf9 Logs cleared from display\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.ExportLogsToFile();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.UI, \"DebugPanel\", \"\ud83d\udcc1 Logs exported to file\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statusPanel.gameObject.SetActive(showSystemStatus);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performancePanel.gameObject.SetActive(showPerformance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugCanvas.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.UI, \"DebugPanel\", \"\ud83d\udd0d Debug panel opened\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugCanvas.gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.ShowPanel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.HidePanel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugCanvas.transform.SetParent(VRCameraHelper.ActiveCamera.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 445,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "debugCanvas.transform.localPosition = new Vector3(0, 0, 2f); // 2 meters in front"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.VR, \"DebugPanel\", \"\ud83e\udd7d Debug panel attached to VR camera\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/DebugLogPanel.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.UI, \"DebugPanel\", \"\ud83d\udd0d Debug panel destroyed\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 78,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentBackgroundIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 79,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentSceneIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SpotifyIntegration.Instance.OnConnectionStatusChanged.AddListener(OnSpotifyConnectionChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Main Menu System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (startGameButton) startGameButton.onClick.AddListener(StartGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (settingsButton) settingsButton.onClick.AddListener(ShowSettings);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (backgroundsButton) backgroundsButton.onClick.AddListener(ShowBackgroundSelection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (scenesButton) scenesButton.onClick.AddListener(ShowSceneSelection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spotifyButton) spotifyButton.onClick.AddListener(ShowSpotifyPanel);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (creditsButton) creditsButton.onClick.AddListener(ShowCredits);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (quitButton) quitButton.onClick.AddListener(QuitGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (volumeSlider) volumeSlider.onValueChanged.AddListener(OnVolumeSliderChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (difficultySlider) difficultySlider.onValueChanged.AddListener(OnDifficultySliderChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (handTrackingToggle) handTrackingToggle.onValueChanged.AddListener(OnHandTrackingToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (autoOptimizationToggle) autoOptimizationToggle.onValueChanged.AddListener(OnAutoOptimizationToggled);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 156,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < backgroundButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundButtons[i].onClick.AddListener(() => SelectBackground(index));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 166,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sceneButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneButtons[i].onClick.AddListener(() => SelectScene(index));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (connectSpotifyButton) connectSpotifyButton.onClick.AddListener(ConnectToSpotify);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (disconnectSpotifyButton) disconnectSpotifyButton.onClick.AddListener(DisconnectFromSpotify);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scenesButton.onClick.AddListener(ToggleSceneSelection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "traditionalTargetsToggle.onValueChanged.AddListener(OnTargetModeToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float savedVolume = PlayerPrefs.GetFloat(\"GameVolume\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float savedDifficulty = PlayerPrefs.GetFloat(\"GameDifficulty\", 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 193,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bool savedHandTracking = PlayerPrefs.GetInt(\"HandTracking\", 1) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool savedHandTracking = PlayerPrefs.GetInt(\"HandTracking\", 1) == 1;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 194,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bool savedAutoOptimization = PlayerPrefs.GetInt(\"AutoOptimization\", 1) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool savedAutoOptimization = PlayerPrefs.GetInt(\"AutoOptimization\", 1) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int savedBackground = PlayerPrefs.GetInt(\"BackgroundIndex\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int savedScene = PlayerPrefs.GetInt(\"SceneIndex\", 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 197,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bool savedUseTraditionalTargets = PlayerPrefs.GetInt(\"UseTraditionalTargets\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool savedUseTraditionalTargets = PlayerPrefs.GetInt(\"UseTraditionalTargets\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.SetActive(active);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Starting VR Rhythm Game...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "DynamicBackgroundSystem.Instance.LoadTheme(currentBackgroundIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 312,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameStart?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "VRBoxingGame.Core.GameManager.Instance.StartGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Game started with scene: {sceneNames[currentSceneIndex]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Quitting game...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Application.Quit();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 337,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnVolumeChanged?.Invoke(value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat(\"GameVolume\", value);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 344,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDifficultyChanged?.Invoke(value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat(\"GameDifficulty\", value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"HandTracking\", enabled ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Hand tracking: {(enabled ? \"Enabled\" : \"Disabled\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"AutoOptimization\", enabled ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Auto optimization: {(enabled ? \"Enabled\" : \"Disabled\")}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 385,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBackgroundChanged?.Invoke(index);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"BackgroundIndex\", index);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Selected background: {backgroundNames[index]}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 405,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < backgroundButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 423,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneChanged?.Invoke(index);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"SceneIndex\", index);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 426,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Selected scene: {sceneNames[index]}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 448,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sceneButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneLoadingManager.LoadScene(currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SceneTransformationSystem.Instance.SetUseTraditionalTargets(useTraditionalTargets);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"SceneLoadingManager not found!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Attempting to connect to Spotify...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Disconnecting from Spotify...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 534,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (connectSpotifyButton) connectSpotifyButton.gameObject.SetActive(!isConnected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (disconnectSpotifyButton) disconnectSpotifyButton.gameObject.SetActive(isConnected);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 565,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject item = Instantiate(playlistItemPrefab, playlistContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 574,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "selectButton.onClick.AddListener(() => SelectPlaylist(playlistName));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Selected playlist: {playlistName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 595,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "VRBoxingGame.Audio.AdvancedAudioManager.Instance.SetMasterVolume(volumeSlider.value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 611,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"UseTraditionalTargets\", useTraditional ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 612,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.Save();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 620,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SceneTransformationSystem.Instance.SetUseTraditionalTargets(useTraditional);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 621,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Target mode changed to: {(useTraditional ? \"Traditional\" : \"Immersive\")}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 766,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fishSystemGO = new GameObject(\"Underwater Fish System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 768,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc1f Created Underwater Fish System for immersive mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 775,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Enabled Underwater Fish System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 786,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "handTracking.TriggerHapticFeedback(0.1f, 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 796,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var confirmationGO = new GameObject(\"TargetModeConfirmation\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 803,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "text.fontSize = 24;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 809,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "confirmationGO.transform.LookAt(cameraTransform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 810,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "confirmationGO.transform.Rotate(0, 180, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 821,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetModeInfoPanel.SetActive(!isActive);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 834,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetModeInfoPanel.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/MainMenuSystem.cs",
        "line": 841,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.Save();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 35,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve flashCurve = AnimationCurve.EaseInOut(0, 1, 1, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentScore = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 58,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 59,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playAgainButton) playAgainButton.onClick.AddListener(RestartGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (menuButton) menuButton.onClick.AddListener(ReturnToMenu);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (volumeSlider) volumeSlider.onValueChanged.AddListener(OnVolumeChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 96,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (difficultySlider) difficultySlider.onValueChanged.AddListener(OnDifficultyChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 97,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (handTrackingToggle) handTrackingToggle.onValueChanged.AddListener(OnHandTrackingToggle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 98,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (backgroundSelector) backgroundSelector.onValueChanged.AddListener(OnBackgroundChanged);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 114,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (scoreText == null) scoreText = CreateUIText(\"ScoreText\", \"Score: 0\", new Vector2(0, 100));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 121,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (comboText == null) comboText = CreateUIText(\"ComboText\", \"Combo: 0\", new Vector2(0, 50));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 128,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (multiplierText == null) multiplierText = CreateUIText(\"MultiplierText\", \"x1.0\", new Vector2(0, 0));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 135,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (timeText == null) timeText = CreateUIText(\"TimeText\", \"3:00\", new Vector2(0, -50));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 142,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (accuracyText == null) accuracyText = CreateUIText(\"AccuracyText\", \"Accuracy: 100%\", new Vector2(0, -100));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 149,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (bpmText == null) bpmText = CreateUIText(\"BPMText\", \"BPM: 120\", new Vector2(0, -150));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 156,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (comboMeter == null) comboMeter = CreateUISlider(\"ComboMeter\", new Vector2(0, 150));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 163,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (healthBar == null) healthBar = CreateUISlider(\"HealthBar\", new Vector2(0, 200));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 GameUI elements found and assigned successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (component != null && component.name.Contains(name))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform found = transform.root.Find(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "found = canvas.transform.Find(name);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 196,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return found.GetComponent<T>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 207,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 208,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 210,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.sizeDelta = new Vector2(200, 50);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 214,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "textComp.fontSize = 24;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 223,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sliderObj = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sliderObj.transform.SetParent(transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 227,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 228,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 230,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.sizeDelta = new Vector2(200, 20);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 233,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "slider.minValue = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 234,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "slider.maxValue = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 235,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "slider.value = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 238,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bg = new GameObject(\"Background\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bg.transform.SetParent(sliderObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 249,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fill = new GameObject(\"Fill\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fill.transform.SetParent(sliderObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 267,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject canvasObj = new GameObject(\"GameUI_Canvas\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "canvasObj.transform.SetParent(transform.parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 276,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "canvasObj.transform.position = new Vector3(0, 2, 2);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 277,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "canvasObj.transform.localScale = new Vector3(0.01f, 0.01f, 0.01f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 279,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform canvasRect = canvasObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 280,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "canvasRect.sizeDelta = new Vector2(1920, 1080);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 283,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "scaler.referenceResolution = new Vector2(1920, 1080);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.SetParent(canvasObj.transform, false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Created GameUI Canvas for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnScoreChanged.AddListener(UpdateScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnTimeChanged.AddListener(UpdateTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnGameStart.AddListener(OnGameStart);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnGameEnd.AddListener(OnGameEnd);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.OnCircleHit.AddListener(OnCircleHit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.OnBlockSuccess.AddListener(OnBlockSuccess);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener(OnBeatDetected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboText.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboText.gameObject.SetActive(false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 346,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = Instantiate(comboBreakEffect, transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboMeter.value = Mathf.Min(combo / 50f, 1f); // Max at 50 combo"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int minutes = Mathf.FloorToInt(timeRemaining / 60f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int seconds = Mathf.FloorToInt(timeRemaining % 60f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timeText.color = Color.Lerp(Color.white, Color.red, Mathf.PingPong(Time.time * 2f, 1f));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 420,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Image fillImage = healthBar.fillRect.GetComponent<Image>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 461,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = Instantiate(perfectHitEffect, transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 472,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "screenFlashCancellation = new CancellationTokenSource();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 483,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float alpha = flashCurve.Evaluate(elapsedTime / duration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 501,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "finalColor.a = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 518,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 519,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scoreText.transform.localScale = Vector3.Lerp(originalScoreScale, targetScale, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 531,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scoreText.transform.localScale = Vector3.Lerp(targetScale, originalScoreScale, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in score text animation: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 555,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 0.15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 556,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboText.transform.localScale = Vector3.Lerp(originalComboScale, targetScale, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 566,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 571,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboText.transform.localScale = Vector3.Lerp(targetScale, originalComboScale, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 579,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in combo text animation: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 587,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float pulseDuration = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 588,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float pulseScale = 1.05f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 596,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 601,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gamePanel.transform.localScale = Vector3.Lerp(originalScale, pulseScaleVector, Mathf.Sin(progress * Mathf.PI));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 602,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 610,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in UI pulse animation: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 646,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int highScore = PlayerPrefs.GetInt(\"HighScore\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 649,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"HighScore\", currentScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 660,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (panel) panel.SetActive(active);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 711,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Difficulty changed to: {difficulty}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 728,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "VRBoxingGame.Environment.DynamicBackgroundSystem.Instance.LoadTheme(backgroundIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 741,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnScoreChanged.RemoveListener(UpdateScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 742,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnTimeChanged.RemoveListener(UpdateTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 743,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnGameStart.RemoveListener(OnGameStart);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/GameUI.cs",
        "line": 744,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnGameEnd.RemoveListener(OnGameEnd);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 165,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float menuDistance = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 166,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float menuScale = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 169,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float selectionTime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 176,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float panelTransitionTime = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve transitionCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 201,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentSceneIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 207,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Initializing Enhanced Main Menu System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enhanced Main Menu System initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "appleMusic.OnConnectionStatusChanged.AddListener(OnAppleMusicConnectionChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "youtubeMusic.OnConnectionStatusChanged.AddListener(OnYouTubeMusicConnectionChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spotify.OnConnectionStatusChanged.AddListener(OnSpotifyConnectionChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.LookAt(xrOrigin.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 342,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gazePointer.SetActive(useGazeSelection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "handPointers.SetActive(useHandTracking);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playButton) playButton.onClick.AddListener(ShowGameModes);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameModesButton) gameModesButton.onClick.AddListener(ShowGameModes);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (musicButton) musicButton.onClick.AddListener(ShowMusicServices);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (settingsButton) settingsButton.onClick.AddListener(ShowSettings);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (profileButton) profileButton.onClick.AddListener(ShowProfile);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (achievementsButton) achievementsButton.onClick.AddListener(ShowAchievements);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (tutorialButton) tutorialButton.onClick.AddListener(ShowTutorial);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (quitButton) quitButton.onClick.AddListener(QuitGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (quickPlayButton) quickPlayButton.onClick.AddListener(QuickPlay);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (careerModeButton) careerModeButton.onClick.AddListener(StartCareerMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (challengeButton) challengeButton.onClick.AddListener(ShowChallenges);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 368,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (trainingButton) trainingButton.onClick.AddListener(StartTraining);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (customGameButton) customGameButton.onClick.AddListener(ShowCustomGame);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (normalModeToggle) normalModeToggle.onValueChanged.AddListener(OnNormalModeToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (immersiveModeToggle) immersiveModeToggle.onValueChanged.AddListener(OnImmersiveModeToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (modeInfoButton) modeInfoButton.onClick.AddListener(ShowModeComparison);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (flowModeButton) flowModeButton.onClick.AddListener(StartFlowMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (staffModeButton) staffModeButton.onClick.AddListener(StartStaffMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (dodgingModeButton) dodgingModeButton.onClick.AddListener(StartDodgingMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (aiCoachButton) aiCoachButton.onClick.AddListener(ToggleAICoach);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (enableDodgingToggle) enableDodgingToggle.onValueChanged.AddListener(OnDodgingToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (intensiveDodgingToggle) intensiveDodgingToggle.onValueChanged.AddListener(OnIntensiveDodgingToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (aiCoachingToggle) aiCoachingToggle.onValueChanged.AddListener(OnAICoachingToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (difficultyAdvancedSlider) difficultyAdvancedSlider.onValueChanged.AddListener(OnAdvancedDifficultyChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (appleMusicConnectButton) appleMusicConnectButton.onClick.AddListener(ConnectAppleMusic);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (youtubeMusicConnectButton) youtubeMusicConnectButton.onClick.AddListener(ConnectYouTubeMusic);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spotifyConnectButton) spotifyConnectButton.onClick.AddListener(ConnectSpotify);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (localMusicButton) localMusicButton.onClick.AddListener(ShowLocalMusic);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playPauseButton) playPauseButton.onClick.AddListener(TogglePlayPause);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (previousButton) previousButton.onClick.AddListener(PreviousTrack);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (nextButton) nextButton.onClick.AddListener(NextTrack);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (shuffleButton) shuffleButton.onClick.AddListener(ToggleShuffle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (repeatButton) repeatButton.onClick.AddListener(ToggleRepeat);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (volumeSlider) volumeSlider.onValueChanged.AddListener(OnPlayerVolumeChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (progressSlider) progressSlider.onValueChanged.AddListener(OnTrackProgressChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (masterVolumeSlider) masterVolumeSlider.onValueChanged.AddListener(OnMasterVolumeChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (musicVolumeSlider) musicVolumeSlider.onValueChanged.AddListener(OnMusicVolumeChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (effectsVolumeSlider) effectsVolumeSlider.onValueChanged.AddListener(OnEffectsVolumeChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (handTrackingToggle) handTrackingToggle.onValueChanged.AddListener(OnHandTrackingToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (hapticsToggle) hapticsToggle.onValueChanged.AddListener(OnHapticsToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 409,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (autoOptimizationToggle) autoOptimizationToggle.onValueChanged.AddListener(OnAutoOptimizationToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (qualityDropdown) qualityDropdown.onValueChanged.AddListener(OnQualityChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (languageDropdown) languageDropdown.onValueChanged.AddListener(OnLanguageChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (subtitlesToggle) subtitlesToggle.onValueChanged.AddListener(OnSubtitlesToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 413,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (comfortSettingsSlider) comfortSettingsSlider.onValueChanged.AddListener(OnComfortSettingsChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 414,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (colorBlindAssistToggle) colorBlindAssistToggle.onValueChanged.AddListener(OnColorBlindAssistToggled);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (editProfileButton) editProfileButton.onClick.AddListener(EditProfile);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (viewAchievementsButton) viewAchievementsButton.onClick.AddListener(ShowAchievements);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 421,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (createPlaylistButton) createPlaylistButton.onClick.AddListener(CreatePlaylist);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (scenePlayButton) scenePlayButton.onClick.AddListener(PlaySelectedScene);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneDifficultySlider) sceneDifficultySlider.onValueChanged.AddListener(OnDifficultyChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (authCancelButton) authCancelButton.onClick.AddListener(CancelAuthentication);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 437,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_0_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 446,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_0_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 450,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 458,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_1_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_1_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 463,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_2_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 472,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_2_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 476,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 484,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_3_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_3_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 489,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 497,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_4_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 498,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_4_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 502,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_5_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_5_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 515,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 515,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_6_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 524,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_6_BestScore\", 0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 528,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 528,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableScenes.Add(new SceneData"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timesPlayed = PlayerPrefs.GetInt(\"Scene_7_TimesPlayed\", 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bestScore = PlayerPrefs.GetFloat(\"Scene_7_BestScore\", 0f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c No scenes available! Check scene data setup.\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 553,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentSceneIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 554,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Invalid scene index, reset to 0\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Loaded {availableScenes.Count} scenes successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 567,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scene button container is null! Cannot create scene buttons.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scene button prefab is null! Cannot create scene buttons.\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 591,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < availableScenes.Count; i++)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 598,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject buttonObj = Instantiate(sceneButtonPrefab, sceneButtonContainer);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 599,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Button button = buttonObj.GetComponent<Button>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Scene button prefab missing Button component for scene {i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 615,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Scene button {i} missing text component\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 621,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "button.onClick.AddListener(() => SelectScene(sceneIndex));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 638,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to create button for scene {i}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 642,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Created {availableScenes.Count} scene buttons\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 659,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (panel != null) panel.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuParticles.Play();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 685,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "CanvasGroup canvasGroup = panel.GetComponent<CanvasGroup>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 690,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 696,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float curveValue = transitionCurve.Evaluate(progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 698,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "canvasGroup.alpha = Mathf.Lerp(startAlpha, endAlpha, curveValue);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 700,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 711,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "Invoke(nameof(ShowMainMenu), 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 772,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 Starting Career Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 780,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Showing Challenges\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 787,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a Starting Training Mode\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 805,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModeChanged?.Invoke(false);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 817,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModeChanged?.Invoke(true);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 882,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneSelected?.Invoke(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 904,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneLoader.LoadScene(currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 909,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneSenseSystem.SetImmersiveMode(isImmersiveMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 928,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return await appleMusic.AuthenticateAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 941,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return await youtubeMusic.AuthenticateAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 954,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return await spotify.AuthenticateWithSpotifyAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 976,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicServiceStatus[serviceName.Replace(\" \", \"\")] = true;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 998,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (authLoadingPanel) authLoadingPanel.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1000,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (authProgressSlider) authProgressSlider.value = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1003,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(AnimateAuthProgress());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1008,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float progress = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1019,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (authLoadingPanel) authLoadingPanel.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1024,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {serviceName} authentication successful!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1030,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c {serviceName} authentication failed: {error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1047,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await appleMusic.GetUserPlaylistsAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1053,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await youtubeMusic.GetUserPlaylistsAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1059,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await spotify.LoadUserPlaylistsAsync();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"AppleMusic\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"AppleMusic\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"YouTubeMusic\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"YouTubeMusic\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"Spotify\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool connected = musicServiceStatus.GetValueOrDefault(\"Spotify\", false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfb5 Toggling Apple Music playback\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcfa Toggling YouTube Music playback\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1182,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa7 Toggling Spotify playback\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f No music service connected for playback control\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ee\ufe0f Apple Music: Previous track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ee\ufe0f YouTube Music: Previous track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ee\ufe0f Spotify: Previous track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ed\ufe0f Apple Music: Next track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ed\ufe0f YouTube Music: Next track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23ed\ufe0f Spotify: Next track\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1240,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bool shuffleEnabled = PlayerPrefs.GetInt(\"ShuffleEnabled\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool shuffleEnabled = PlayerPrefs.GetInt(\"ShuffleEnabled\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"ShuffleEnabled\", shuffleEnabled ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd00 Apple Music shuffle: {(shuffleEnabled ? \"ON\" : \"OFF\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd00 YouTube Music shuffle: {(shuffleEnabled ? \"ON\" : \"OFF\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd00 Spotify shuffle: {(shuffleEnabled ? \"ON\" : \"OFF\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int repeatMode = PlayerPrefs.GetInt(\"RepeatMode\", 0); // 0=off, 1=repeat all, 2=repeat one"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"RepeatMode\", repeatMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd01 Apple Music repeat: {repeatModes[repeatMode]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd01 YouTube Music repeat: {repeatModes[repeatMode]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd01 Spotify repeat: {repeatModes[repeatMode]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var currentTrack = appleMusic.GetCurrentTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var currentTrack = youtubeMusic.GetCurrentTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(qualityIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfae Quality set to: {QualitySettings.names[qualityIndex]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetString(\"SelectedLanguage\", selectedLanguage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf0d Language set to: {selectedLanguage}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1414,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcdd Subtitles: {(enabled ? \"Enabled\" : \"Disabled\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\ude0c Comfort level set to: {(comfortLevel * 100):F0}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfa8 Color blind assistance: {(enabled ? \"Enabled\" : \"Disabled\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Player volume set to: {(volume * 100):F0}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u23ef\ufe0f Track progress: {(progress * 100):F1}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc64 Opening profile editor...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string currentName = PlayerPrefs.GetString(\"PlayerName\", \"VR Boxer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Current player name: {currentName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfb5 Creating new playlist...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Applying color blind friendly UI colors\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Restoring default UI colors\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (qualityDropdown) qualityDropdown.value = (int)GetSetting(\"QualityLevel\", QualitySettings.GetQualityLevel());"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1577,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "Ray gazeRay = new Ray(Camera.main.transform.position, Camera.main.transform.forward);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1577,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Ray gazeRay = new Ray(Camera.main.transform.position, Camera.main.transform.forward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Physics.Raycast(gazeRay, out hit, 10f))"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1582,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Button hoveredButton = hit.collider.GetComponent<Button>();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1596,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "hoveredButton.onClick.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hoveredButton.onClick.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1597,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1604,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1610,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gazeTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1617,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gazeTimer = 0f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1626,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var progressRing = gazePointer.GetComponent<Image>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1639,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "uiAudioSource.PlayOneShot(uiSounds[soundIndex]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1645,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat($\"EnhancedMenu_{key}\", value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1650,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return PlayerPrefs.GetFloat($\"EnhancedMenu_{key}\", defaultValue);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1655,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "isImmersiveMode = PlayerPrefs.GetInt(\"ImmersiveMode\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "isImmersiveMode = PlayerPrefs.GetInt(\"ImmersiveMode\", 0) == 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1656,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSceneIndex = PlayerPrefs.GetInt(\"LastSceneIndex\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1666,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playerNameText) playerNameText.text = PlayerPrefs.GetString(\"PlayerName\", \"VR Boxer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1667,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playerLevelText) playerLevelText.text = $\"Level {PlayerPrefs.GetInt(\"PlayerLevel\", 1)}\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1672,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int currentXP = PlayerPrefs.GetInt(\"PlayerXP\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int levelXP = PlayerPrefs.GetInt(\"PlayerLevel\", 1) * 1000; // 1000 XP per level"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1674,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int nextLevelXP = (PlayerPrefs.GetInt(\"PlayerLevel\", 1) + 1) * 1000;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1680,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int totalPlays = PlayerPrefs.GetInt(\"TotalPlays\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1681,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float bestScore = PlayerPrefs.GetFloat(\"BestScore\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1682,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int totalHits = PlayerPrefs.GetInt(\"TotalHits\", 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1683,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float accuracy = PlayerPrefs.GetFloat(\"OverallAccuracy\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 Loading achievements...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1700,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"First Play\"] = PlayerPrefs.GetInt(\"TotalPlays\", 0) > 0,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1701,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"Combo Master\"] = PlayerPrefs.GetInt(\"BestCombo\", 0) >= 50,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1702,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"Perfect Score\"] = PlayerPrefs.GetFloat(\"BestScore\", 0) >= 100000,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1703,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"All Scenes\"] = PlayerPrefs.GetInt(\"ScenesCompleted\", 0) >= 8,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1704,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"Music Lover\"] = PlayerPrefs.GetInt(\"TracksPlayed\", 0) >= 10,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1705,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[\"VR Veteran\"] = PlayerPrefs.GetInt(\"TotalPlays\", 0) >= 100"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1712,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfc6 Achievement Unlocked: {achievement.Key}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1720,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"ImmersiveMode\", isImmersiveMode ? 1 : 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1721,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"LastSceneIndex\", currentSceneIndex);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1723,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameStarted?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1729,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameManager.StartGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1733,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1743,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Application.Quit();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1773,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scene.timesPlayed = PlayerPrefs.GetInt($\"Scene_{sceneIndex}_TimesPlayed\", 0) + 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1774,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scene.bestScore = PlayerPrefs.GetFloat($\"Scene_{sceneIndex}_BestScore\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1777,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt($\"Scene_{sceneIndex}_TimesPlayed\", scene.timesPlayed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1778,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"TotalPlays\", PlayerPrefs.GetInt(\"TotalPlays\", 0) + 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1783,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Scene {scene.sceneName} played {scene.timesPlayed} times\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1795,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat($\"Scene_{sceneIndex}_BestScore\", score);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1796,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetFloat(\"BestScore\", Mathf.Max(PlayerPrefs.GetFloat(\"BestScore\", 0f), score));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/EnhancedMainMenuSystem.cs",
        "line": 1799,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfc6 New best score for {scene.sceneName}: {score:F0}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 13,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float circleSize = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 33,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Circle prefabs created and assigned!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 39,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject whiteCircle = GameObject.CreatePrimitive(PrimitiveType.Cylinder);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 41,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "whiteCircle.transform.localScale = new Vector3(circleSize, 0.05f, circleSize);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 44,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer renderer = whiteCircle.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 67,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "boxingTarget.baseScore = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 68,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "boxingTarget.lifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 76,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject grayCircle = GameObject.CreatePrimitive(PrimitiveType.Cylinder);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 78,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "grayCircle.transform.localScale = new Vector3(circleSize, 0.05f, circleSize);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 81,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer renderer = grayCircle.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 104,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "boxingTarget.baseScore = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 105,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "boxingTarget.lifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 113,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject block = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 118,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Prefabs assigned to Rhythm Target System!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"No Rhythm Target System found in scene!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/CirclePrefabCreator.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"LeftHand\") || other.CompareTag(\"RightHand\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 16,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 menuPosition = new Vector3(0, 2f, 3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 17,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 menuScale = new Vector3(0.01f, 0.01f, 0.01f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 20,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Color primaryColor = new Color(0.2f, 0.6f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 21,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Color secondaryColor = new Color(0.1f, 0.1f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 49,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Complete VR Main Menu created!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 55,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mainMenuCanvas = new GameObject(\"VR_MainMenu_Canvas\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mainMenuCanvas.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 69,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform canvasRect = mainMenuCanvas.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 70,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "canvasRect.sizeDelta = new Vector2(1920, 1080);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 78,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "scaler.referenceResolution = new Vector2(1920, 1080);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 80,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "scaler.matchWidthOrHeight = 0.5f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 86,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"MainMenuPanel\", Vector2.zero, new Vector2(1920, 1080));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 89,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"SettingsPanel\", Vector2.zero, new Vector2(1920, 1080), false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 92,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"BackgroundSelectionPanel\", Vector2.zero, new Vector2(1920, 1080), false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 95,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"SceneSelectionPanel\", Vector2.zero, new Vector2(1920, 1080), false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 98,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"SpotifyPanel\", Vector2.zero, new Vector2(1920, 1080), false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 101,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreatePanel(\"CreditsPanel\", Vector2.zero, new Vector2(1920, 1080), false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 106,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject panel = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.transform.SetParent(mainMenuCanvas.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 116,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "image.color = new Color(secondaryColor.r, secondaryColor.g, secondaryColor.b, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 118,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "panel.SetActive(active);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform mainPanel = mainMenuCanvas.transform.Find(\"MainMenuPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 128,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"VR RHYTHM BOXING\", mainPanel, new Vector2(0, 400), new Vector2(800, 100), 72);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 131,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"START GAME\", mainPanel, new Vector2(0, 250), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 132,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"SETTINGS\", mainPanel, new Vector2(0, 150), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 133,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACKGROUNDS\", mainPanel, new Vector2(0, 50), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 134,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"SCENES\", mainPanel, new Vector2(0, -50), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 135,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"SPOTIFY\", mainPanel, new Vector2(0, -150), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 136,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"CREDITS\", mainPanel, new Vector2(0, -250), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 137,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"QUIT\", mainPanel, new Vector2(0, -350), new Vector2(400, 80));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform settingsPanel = mainMenuCanvas.transform.Find(\"SettingsPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 146,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"SETTINGS\", settingsPanel, new Vector2(0, 400), new Vector2(400, 80), 48);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 149,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Volume\", settingsPanel, new Vector2(-200, 250), new Vector2(200, 60), 36);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 150,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateSlider(\"VolumeSlider\", settingsPanel, new Vector2(100, 250), new Vector2(300, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 153,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Difficulty\", settingsPanel, new Vector2(-200, 150), new Vector2(200, 60), 36);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 154,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateSlider(\"DifficultySlider\", settingsPanel, new Vector2(100, 150), new Vector2(300, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 157,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Hand Tracking\", settingsPanel, new Vector2(-200, 50), new Vector2(200, 60), 36);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 158,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateToggle(\"HandTrackingToggle\", settingsPanel, new Vector2(100, 50), new Vector2(60, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 161,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Auto Optimization\", settingsPanel, new Vector2(-200, -50), new Vector2(200, 60), 36);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 162,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateToggle(\"AutoOptimizationToggle\", settingsPanel, new Vector2(100, -50), new Vector2(60, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 165,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACK\", settingsPanel, new Vector2(0, -300), new Vector2(200, 60));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform bgPanel = mainMenuCanvas.transform.Find(\"BackgroundSelectionPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 174,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"SELECT BACKGROUND\", bgPanel, new Vector2(0, 400), new Vector2(600, 80), 48);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 177,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Current: Cyberpunk City\", bgPanel, new Vector2(0, 300), new Vector2(400, 60), 32);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 181,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < backgrounds.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(backgrounds[i], bgPanel, new Vector2(xPos, yPos), new Vector2(180, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 189,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACK\", bgPanel, new Vector2(0, -300), new Vector2(200, 60));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform scenePanel = mainMenuCanvas.transform.Find(\"SceneSelectionPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 198,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"SELECT SCENE\", scenePanel, new Vector2(0, 400), new Vector2(600, 80), 48);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 201,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Current: Default Arena\", scenePanel, new Vector2(0, 320), new Vector2(500, 60), 32);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 204,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Classic VR boxing arena with customizable backgrounds\", scenePanel, new Vector2(0, 260), new Vector2(800, 40), 24);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 208,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < scenes.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(scenes[i], scenePanel, new Vector2(xPos, yPos), new Vector2(160, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 216,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Scene Preview\", scenePanel, new Vector2(0, -120), new Vector2(200, 40), 28);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 219,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACK\", scenePanel, new Vector2(0, -300), new Vector2(200, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 228,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject toggleSection = new GameObject(\"TargetModeSection\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleSection.transform.SetParent(parent.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 232,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleSectionRect.sizeDelta = new Vector2(760, 80);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 233,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleSectionRect.anchoredPosition = new Vector2(0, 200);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 237,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "sectionBg.color = new Color(0.15f, 0.15f, 0.25f, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 240,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject toggleLabel = new GameObject(\"ToggleLabel\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleLabel.transform.SetParent(toggleSection.transform, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 245,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "labelText.fontSize = 18;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 249,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform labelRect = toggleLabel.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 250,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.sizeDelta = new Vector2(150, 40);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 251,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.anchoredPosition = new Vector2(-280, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 254,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject toggleObj = new GameObject(\"TraditionalTargetsToggle\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleObj.transform.SetParent(toggleSection.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 261,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject toggleBg = new GameObject(\"Background\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleBg.transform.SetParent(toggleObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 265,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleBgImage.color = new Color(0.2f, 0.2f, 0.3f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 267,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform toggleBgRect = toggleBg.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 268,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleBgRect.sizeDelta = new Vector2(40, 20);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 271,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject checkmark = new GameObject(\"Checkmark\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 272,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "checkmark.transform.SetParent(toggleBg.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 278,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform checkmarkRect = checkmark.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 279,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "checkmarkRect.sizeDelta = new Vector2(16, 16);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 285,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform toggleRect = toggleObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 286,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleRect.sizeDelta = new Vector2(40, 20);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 287,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "toggleRect.anchoredPosition = new Vector2(-100, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 290,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject modeTextObj = new GameObject(\"ModeText\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "modeTextObj.transform.SetParent(toggleSection.transform, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 295,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "modeText.fontSize = 16;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 299,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform modeTextRect = modeTextObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 300,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "modeTextRect.sizeDelta = new Vector2(300, 40);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 301,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "modeTextRect.anchoredPosition = new Vector2(100, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 306,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject infoTextObj = new GameObject(\"InfoText\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "infoTextObj.transform.SetParent(toggleSection.transform, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 311,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "infoText.fontSize = 12;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 312,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "infoText.color = new Color(0.8f, 0.8f, 0.8f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 315,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform infoTextRect = infoTextObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 316,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "infoTextRect.sizeDelta = new Vector2(700, 30);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 317,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "infoTextRect.anchoredPosition = new Vector2(0, -25);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 323,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Texture2D texture = new Texture2D(16, 16);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 327,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < pixels.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 333,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int y = 0; y < 16; y++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 335,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int x = 0; x < 16; x++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "texture.SetPixels(pixels);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 347,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "texture.Apply();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 349,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return Sprite.Create(texture, new Rect(0, 0, 16, 16), new Vector2(0.5f, 0.5f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Sprite.Create(texture, new Rect(0, 0, 16, 16), new Vector2(0.5f, 0.5f));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 355,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject buttonsContainer = new GameObject(\"SceneButtonsContainer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "buttonsContainer.transform.SetParent(parent.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 359,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "containerRect.sizeDelta = new Vector2(760, 200);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 360,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "containerRect.anchoredPosition = new Vector2(0, 50);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 368,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 370,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject buttonObj = new GameObject($\"SceneButton_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "buttonObj.transform.SetParent(buttonsContainer.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 378,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "buttonImage.color = new Color(0.2f, 0.3f, 0.5f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 381,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(\"Text\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(buttonObj.transform, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 386,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "buttonText.fontSize = 14;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 390,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform textRect = textObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 391,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "textRect.sizeDelta = new Vector2(170, 80);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 398,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 399,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "buttonRect.sizeDelta = new Vector2(180, 90);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 400,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "buttonRect.anchoredPosition = new Vector2(-285 + col * 190, 50 - row * 100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "button.onClick.AddListener(() => menuSystem.SelectScene(sceneIndex));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 411,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "colors.highlightedColor = new Color(0.3f, 0.4f, 0.6f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 412,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "colors.pressedColor = new Color(0.1f, 0.2f, 0.4f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform spotifyPanel = mainMenuCanvas.transform.Find(\"SpotifyPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 423,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"SPOTIFY INTEGRATION\", spotifyPanel, new Vector2(0, 400), new Vector2(600, 80), 48);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 426,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"Status: Not Connected\", spotifyPanel, new Vector2(0, 300), new Vector2(400, 60), 32);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 429,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"CONNECT TO SPOTIFY\", spotifyPanel, new Vector2(0, 200), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 430,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"DISCONNECT\", spotifyPanel, new Vector2(0, 100), new Vector2(400, 80));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 434,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "spotifyPanel, new Vector2(0, -50), new Vector2(500, 100), 24);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 437,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACK\", spotifyPanel, new Vector2(0, -300), new Vector2(200, 60));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform creditsPanel = mainMenuCanvas.transform.Find(\"CreditsPanel\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 446,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(\"CREDITS\", creditsPanel, new Vector2(0, 400), new Vector2(400, 80), 48);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 459,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateText(creditsText, creditsPanel, new Vector2(0, 0), new Vector2(600, 600), 28);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 462,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateButton(\"BACK\", creditsPanel, new Vector2(0, -350), new Vector2(200, 60));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 467,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject button = new GameObject($\"Button_{text.Replace(\" \", \"\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject button = new GameObject($\"Button_{text.Replace(\" \", \"\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "button.transform.SetParent(parent, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 471,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 472,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 482,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(\"Text\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(button.transform, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 494,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "textComp.fontSize = 24;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 496,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (menuFont != null) textComp.font = TMP_FontAsset.CreateFontAsset(menuFont);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 503,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject($\"Text_{text.Replace(\" \", \"\").Substring(0, Mathf.Min(10, text.Length))}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 503,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject($\"Text_{text.Replace(\" \", \"\").Substring(0, Mathf.Min(10, text.Length))}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(parent, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 507,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 508,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (menuFont != null) textComp.font = TMP_FontAsset.CreateFontAsset(menuFont);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 524,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject slider = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "slider.transform.SetParent(parent, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 528,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 529,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 534,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "sliderComp.minValue = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 535,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "sliderComp.maxValue = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 536,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "sliderComp.value = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 540,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "background.transform.SetParent(slider.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 541,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "background.GetComponent<Image>().color = Color.gray;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 544,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fillArea = new GameObject(\"Fill Area\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 545,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fillArea.transform.SetParent(slider.transform, false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 554,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fill.transform.SetParent(fillArea.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 555,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "fill.GetComponent<Image>().color = primaryColor;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 558,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject handleArea = new GameObject(\"Handle Slide Area\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "handleArea.transform.SetParent(slider.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 567,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject handle = CreatePanel(\"Handle\", Vector2.zero, new Vector2(20, size.y));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "handle.transform.SetParent(handleArea.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 569,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "handle.GetComponent<Image>().color = Color.white;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 572,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "sliderComp.fillRect = fill.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 573,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "sliderComp.handleRect = handle.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 580,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject toggle = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggle.transform.SetParent(parent, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 584,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMin = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 585,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.anchorMax = new Vector2(0.5f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 593,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "background.transform.SetParent(toggle.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 594,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "background.GetComponent<Image>().color = Color.gray;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 598,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "checkmark.transform.SetParent(background.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 599,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "checkmark.GetComponent<Image>().color = primaryColor;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 602,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "toggleComp.targetGraphic = background.GetComponent<Image>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 603,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "toggleComp.graphic = checkmark.GetComponent<Image>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 614,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.mainMenuPanel = mainMenuCanvas.transform.Find(\"MainMenuPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 615,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.settingsPanel = mainMenuCanvas.transform.Find(\"SettingsPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 616,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.backgroundSelectionPanel = mainMenuCanvas.transform.Find(\"BackgroundSelectionPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 617,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.sceneSelectionPanel = mainMenuCanvas.transform.Find(\"SceneSelectionPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 618,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.spotifyPanel = mainMenuCanvas.transform.Find(\"SpotifyPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 619,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuSystem.creditsPanel = mainMenuCanvas.transform.Find(\"CreditsPanel\")?.gameObject;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 639,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < bgButtonNames.Length && i < menuSystem.backgroundButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 647,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < sceneButtonNames.Length && i < menuSystem.sceneButtons.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 657,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 MainMenuSystem configured with all UI elements including scene selection\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform found = mainMenuCanvas.transform.Find($\"MainMenuPanel/{name}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 663,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return found?.GetComponent<Button>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform found = mainMenuCanvas.transform.Find($\"{panelName}/{buttonName}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 669,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return found?.GetComponent<Button>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 674,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform found = mainMenuCanvas.transform.Find($\"{panelName}/{textName}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 675,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return found?.GetComponent<TextMeshProUGUI>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 680,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform found = mainMenuCanvas.transform.Find($\"SettingsPanel/{name}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/UI/VRMainMenuCreator.cs",
        "line": 681,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return found?.GetComponent<T>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRate = 90; // Quest 3 target"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float renderScale = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int msaaSamples = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float shadowDistance = 25f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 47,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeCriticalOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 59,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f); // Allow systems to initialize"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 64,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateProjectSettings());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 70,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConfigureSinglePassRendering());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 76,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupFixedFoveatedRendering());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 82,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeQualitySettings());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 86,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConfigureURPForVR());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var scriptingBackend = PlayerSettings.GetScriptingBackend(targetGroup);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var graphicsAPIs = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 139,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (OculusSettings.GetInstance() != null)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 205,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var ovrManagerType = System.Type.GetType(\"OVRManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instanceProperty = ovrManagerType.GetProperty(\"instance\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var foveatedRenderingLevelProperty = ovrManagerType.GetProperty(\"foveatedRenderingLevel\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var useDynamicFoveatedRenderingProperty = ovrManagerType.GetProperty(\"useDynamicFoveatedRendering\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foveatedRenderingLevelProperty.SetValue(ovrInstance, 3);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "useDynamicFoveatedRenderingProperty.SetValue(ovrInstance, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 251,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // VR runtime handles sync"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 255,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowCascades = 1; // Single cascade for VR"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 261,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverIterations = 4; // Reduce from default 6"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 262,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverVelocityIterations = 1; // Reduce from default 4"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 282,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "urpAsset.cascadeCount = 1; // Single cascade for VR"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "VRPerformanceMonitor.Instance.ForceOptimization();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 331,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeCriticalOptimizations());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== CRITICAL VR OPTIMIZATION REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"XR System Active: {(xrActive ? \"\u2705 YES\" : \"\u274c NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"URP Asset Configured: {(urpAsset != null ? \"\u2705 YES\" : \"\u274c NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"VSync Disabled: {(QualitySettings.vSyncCount == 0 ? \"\u2705 YES\" : \"\u274c NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Target Frame Rate: {Application.targetFrameRate} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"MSAA: {QualitySettings.antiAliasing}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Shadow Distance: {QualitySettings.shadowDistance}m\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Shadow Cascades: {QualitySettings.shadowCascades}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Current FPS: {metrics.frameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 363,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Frame Time: {metrics.frameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Performance Status: {(metrics.frameRate >= targetFrameRate * 0.9f ? \"\u2705 OPTIMAL\" : \"\u26a0\ufe0f SUBOPTIMAL\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[CriticalVROptimizer] {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalVROptimizer.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GetOptimizationReport());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float coachDistance = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float voiceVolume = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float demoScale = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxTrainingPlan = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float adaptiveLearningRate = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd16 Initializing Enhanced AI Coach Visual System...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 160,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"stance\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 161,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"power\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"accuracy\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 163,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"endurance\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 164,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"form\"] = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 180,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnObj = new GameObject(\"AI Coach Spawn Point\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachSpawnPoint.LookAt(playerPos);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 197,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach = Instantiate(holographicCoachPrefab, coachSpawnPoint.position, coachSpawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 198,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "coachAnimator = activeHolographicCoach.GetComponent<Animator>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc3\u200d\u2642\ufe0f Holographic AI Coach spawned successfully!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetFloat(\"_Mode\", 3); // Transparent mode"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetColor(\"_BaseColor\", new Color(0.3f, 0.8f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetColor(\"_BaseColor\", new Color(0.3f, 0.8f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 217,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.EnableKeyword(\"_ALPHABLEND_ON\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hologramEffect.Initialize();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 238,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject voiceObj = new GameObject(\"AI Coach Voice\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 240,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.spatialBlend = 1f; // 3D spatial audio"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 243,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.maxDistance = 10f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa4 AI Coach voice system initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 261,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(\"Coaching Text\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(coachingCanvas.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 265,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachingText.fontSize = 24;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 269,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform rectTransform = textObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 270,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rectTransform.sizeDelta = new Vector2(400, 100);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 271,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rectTransform.anchoredPosition = new Vector2(0, 200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc41\ufe0f AI Coach visual feedback system ready\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 287,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "formMeter = CreateProgressMeter(\"Form\", new Vector2(-200, -200), correctFormColor);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 293,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "powerMeter = CreateProgressMeter(\"Power\", new Vector2(0, -200), Color.yellow);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 299,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "accuracyMeter = CreateProgressMeter(\"Accuracy\", new Vector2(200, -200), Color.blue);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 305,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject meterObj = new GameObject($\"{name} Meter\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "meterObj.transform.SetParent(coachingCanvas.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 309,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.sizeDelta = new Vector2(150, 20);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 318,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject labelObj = new GameObject($\"{name} Label\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "labelObj.transform.SetParent(meterObj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 322,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.sizeDelta = new Vector2(150, 20);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 323,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.anchoredPosition = new Vector2(0, -25);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 327,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "label.fontSize = 16;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameStateManager.OnCoachingInstruction.AddListener(OnCoachingInstructionReceived);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameStateManager.OnPerformanceAnalysis.AddListener(OnPerformanceAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnFormAnalyzed.AddListener(OnFormAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnStanceChanged.AddListener(OnStanceChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instruction = pendingInstructions.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (enableVoiceCoaching && !string.IsNullOrEmpty(instruction.voiceKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (coachAnimator != null && !string.IsNullOrEmpty(instruction.demoAnimation))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachAnimator.SetTrigger(instruction.demoAnimation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(instruction.duration * 1000));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = formCorrectionClips[UnityEngine.Random.Range(0, formCorrectionClips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = motivationalClips[UnityEngine.Random.Range(0, motivationalClips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = techniqueTips[UnityEngine.Random.Range(0, techniqueTips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.PlayOneShot(clipToPlay);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 457,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject demo = Instantiate(demoPrefab, demoSpawnPoint.position, demoSpawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 464,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var demoAnimator = demo.GetComponent<Animator>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "demoAnimator.SetTrigger(\"PlayDemo\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(3000);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 486,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material demoMaterial = new Material(renderer.material);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 488,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "color.a = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "marker = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 506,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "marker.GetComponent<Collider>().enabled = false;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 510,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "marker.GetComponent<Renderer>().material.color = color;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "marker.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 514,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "Invoke(nameof(HidePositionMarker), 5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 561,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 targetRotation = Quaternion.Euler(0, hipRotation, 0) * Vector3.forward;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(0, hipPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(1, hipPos + targetRotation * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 577,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(0, formTracker.leftFootReference.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 578,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(1, formTracker.rightFootReference.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "powerMeter.fillAmount = Mathf.Clamp01(formData.powerMultiplier - 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accuracyMeter.fillAmount = UnityEngine.Random.Range(0.6f, 1f); // Placeholder"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 641,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.RemoveAt(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 654,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 665,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 673,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(drill);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(drill);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 680,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(CreateGeneralImprovementDrill());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 680,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(CreateGeneralImprovementDrill());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 686,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var drill = new PersonalizedDrill();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 694,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 3;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 701,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 20;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 708,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 15;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 735,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(visualInstruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 790,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"stance\"] = Mathf.Lerp(playerWeaknesses[\"stance\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 792,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"power\"] = Mathf.Lerp(playerWeaknesses[\"power\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 793,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "1f - Mathf.Clamp01(performance.powerGeneration - 1f), adaptiveLearningRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 794,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"accuracy\"] = Mathf.Lerp(playerWeaknesses[\"accuracy\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 814,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 830,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 838,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 851,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 874,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 892,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float pulseSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 893,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float glitchFrequency = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 900,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < renderers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 911,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float pulse = 0.7f + 0.3f * Mathf.Sin(Time.time * pulseSpeed);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 925,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(GlitchEffect());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AICoachVisualSystem.cs",
        "line": 937,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.05f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 118,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Initializing Comprehensive Project Validator...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 122,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new PerformanceAnalysisModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 123,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Unity6ComplianceModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 124,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new VROptimizationModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 125,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new CodeQualityModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 126,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new ArchitectureValidationModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 127,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new AsyncPatternModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 128,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new MemoryManagementModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 129,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new ErrorHandlingModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 130,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new ThreadingModule(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 131,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new SceneIntegrationModule()"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Initialized {validationModules.Count} validation modules\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Validation already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting COMPREHENSIVE project validation...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb This will find ALL issues in one systematic pass\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 154,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationProgress?.Invoke(\"Starting comprehensive validation\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 170,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "tasks.Add(RunModuleAsync(module));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "tasks.Add(RunModuleAsync(module));"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 174,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationProgress?.Invoke($\"Running {tasks.Count} analysis modules in parallel...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var results = await Task.WhenAll(tasks);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "allIssues.AddRange(moduleIssues);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 191,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationProgress?.Invoke($\"Running {module.GetType().Name}...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "OnValidationProgress?.Invoke($\"Running {module.GetType().Name}...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "allIssues.AddRange(moduleIssues);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var category = issue.category.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issuesByCategory[category] = issuesByCategory.GetValueOrDefault(category, 0) + 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "criticalIssues = allIssues.FindAll(i => i.severity == IssueSeverity.Critical).Count,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warningIssues = allIssues.FindAll(i => i.severity == IssueSeverity.Warning).Count,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "infoIssues = allIssues.FindAll(i => i.severity == IssueSeverity.Info).Count,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "isFullyValid = allIssues.FindAll(i => i.severity == IssueSeverity.Critical).Count == 0,"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 219,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnIssuesFound?.Invoke(allIssues);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 220,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationComplete?.Invoke(lastReport);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Validation failed: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return await module.ValidateAsync(targetDirectories, fileExtensions);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Module {module.GetType().Name} failed: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var criticalCount = issues.FindAll(i => i.severity == IssueSeverity.Critical).Count;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var warningCount = issues.FindAll(i => i.severity == IssueSeverity.Warning).Count;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var infoCount = issues.FindAll(i => i.severity == IssueSeverity.Info).Count;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var criticalIssues = issues.FindAll(i => i.severity == IssueSeverity.Critical);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc1 COMPREHENSIVE VALIDATION COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Total Issues: {report.totalIssues}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd34 Critical: {report.criticalIssues}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udfe1 Warnings: {report.warningIssues}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd35 Info: {report.infoIssues}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u23f1\ufe0f Validation Time: {report.validationTime:F2}s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 PROJECT IS FULLY VALIDATED - READY FOR DEPLOYMENT!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f {report.criticalIssues} critical issues need attention\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(report.summaryReport);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fixableIssues = lastReport.allIssues.FindAll(i => i.canAutoFix);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 352,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int fixedCount = 0;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 354,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationProgress?.Invoke($\"Auto-fixing {fixableIssues.Count} issues...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to auto-fix {issue.description}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Auto-fixed {fixedCount}/{fixableIssues.Count} issues\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (issue.description.Contains(\"FindObjectOfType\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fileContent = await File.ReadAllTextAsync(issue.file);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fixedContent = fileContent.Replace(\"FindObjectOfType<\", \"CachedReferenceManager.Get<\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(issue.file, fixedContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (issue.description.Contains(\"async void\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fileContent = await File.ReadAllTextAsync(issue.file);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fixedContent = fileContent.Replace(\"async void\", \"async Task\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 409,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(issue.file, fixedContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var files = Directory.GetFiles(directory, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var content = await File.ReadAllTextAsync(file);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var lines = content.Split('\\n');"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 438,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < lines.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (line.Contains(\"FindObjectOfType\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 445,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "codeSnippet = line.Trim()"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 459,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "if (line.Contains(\"using System.Linq\") || line.Contains(\".Where(\") || line.Contains(\".Select(\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (line.Contains(\"using System.Linq\") || line.Contains(\".Where(\") || line.Contains(\".Select(\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 461,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "codeSnippet = line.Trim()"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 476,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(new ComprehensiveProjectValidator.Issue"
      },
      {
        "severity": "Critical",
        "category": "AsyncPatterns",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 482,
        "description": "async void can cause unhandled exceptions and memory leaks",
        "solution": "Change to async Task",
        "can_auto_fix": true,
        "code_snippet": "description = \"async void can cause unhandled exceptions\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ComprehensiveProjectValidator.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "codeSnippet = line.Trim()"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 17,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int normalUpdateHz = 90;      // Match VR framerate"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 18,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int slowUpdateHz = 30;        // For less critical systems"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int fastUpdateHz = 120;       // For critical VR systems"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float performanceWarningThreshold = 0.011f; // 11ms warning"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 48,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const int HISTORY_SIZE = 300; // 5 seconds at 60fps"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 81,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\ude80 Optimized Update Manager initialized - Managing {TotalManagedSystems} systems\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 82,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Fast Update: {fastUpdateHz}Hz ({fastSystems.Count} systems)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Normal Update: {normalUpdateHz}Hz ({normalSystems.Count} systems)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Slow Update: {slowUpdateHz}Hz ({slowSystems.Count} systems)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "switch (system.GetUpdateFrequency())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!fastSystems.Contains(system))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 108,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "fastSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fastSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc8 Registered {system.GetType().Name} for Fast Updates ({fastUpdateHz}Hz)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!normalSystems.Contains(system))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 116,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "normalSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "normalSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u26a1 Registered {system.GetType().Name} for Normal Updates ({normalUpdateHz}Hz)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!slowSystems.Contains(system))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 124,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "slowSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "slowSystems.Add(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udc0c Registered {system.GetType().Name} for Slow Updates ({slowUpdateHz}Hz)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fastSystems.Remove(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "normalSystems.Remove(system);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "slowSystems.Remove(system);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 151,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFastUpdate?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 152,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "fastUpdateTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 159,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnNormalUpdate?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 160,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "normalUpdateTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 167,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSlowUpdate?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 168,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "slowUpdateTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 181,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFixedUpdate?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 188,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = systems.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systems.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!system.IsUpdateEnabled())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "system.OptimizedUpdate();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string systemName = system.GetType().Name;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Slow system detected: {systemName} took {systemTime * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error updating {system.GetType().Name}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateTimeHistory.Enqueue(updateTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateTimeHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Update Manager took {updateTime * 1000:F2}ms (target: <{performanceWarningThreshold * 1000:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd04 Updated {frequency} frequency to {newHz}Hz\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "switch (headsetName.ToLower())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd7d Optimized update frequencies for {headsetName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Update Manager Performance Report:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Total Systems: {TotalManagedSystems}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Average Update Time: {AverageUpdateTime * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Fast Systems: {fastSystems.Count} @ {fastUpdateHz}Hz\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Normal Systems: {normalSystems.Count} @ {normalUpdateHz}Hz\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Slow Systems: {slowSystems.Count} @ {slowUpdateHz}Hz\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sortedSystems.Sort((x, y) => y.Value.CompareTo(x.Value));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"  Slowest Systems:\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 344,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(5, sortedSystems.Count); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(5, sortedSystems.Count); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 347,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"    {system.Key}: {system.Value * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fastSystems.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "normalSystems.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/OptimizedUpdateManager.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "slowSystems.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 34,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject helperGO = new GameObject(\"VR Camera Helper\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 78,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "activeCamera = Camera.main;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"VRCameraHelper: No camera found. VR functionality may be limited.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 99,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Instance.playerTransform.TransformPoint(localOffset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Vector3.Angle(Instance.activeCameraTransform.forward, directionToTarget);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Vector3.Distance(Instance.playerTransform.position, worldPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/VRCameraHelper.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Instance.InitializeCameraReferences();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 17,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83d\udea8 APPLYING EMERGENCY PERFORMANCE FIX!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 18,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83d\udcca Targeting 209 FindObjectOfType calls causing 20ms+ overhead\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalReplacements = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 21,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 23,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Directory.Exists(scriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 25,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scripts directory not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 29,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(scriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 30,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc1 Processing {csFiles.Length} C# files...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 34,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(\".backup\") || filePath.Contains(\"EmergencyPerformanceFix\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 40,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf EMERGENCY FIX COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {totalReplacements} FindObjectOfType calls replaced\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 42,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u26a1 Estimated performance gain: {totalReplacements * 0.1f:F1}ms per frame\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 43,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\ude80 Estimated FPS improvement: +{totalReplacements * 0.5f:F0} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 47,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 CRITICAL PERFORMANCE CRISIS RESOLVED!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 48,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Project is now VR-ready for 90+ FPS!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 58,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacements = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 61,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"FindObjectOfType\"))"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 65,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "string backupPath = filePath + \".backup\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 66,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!File.Exists(backupPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(backupPath, originalContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"using VRBoxingGame.Core;\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 86,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern, replacement);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {Path.GetFileName(filePath)}: {replacements} calls optimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to process {Path.GetFileName(filePath)}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var usingMatches = Regex.Matches(content, @\"using\\s+[\\w\\.]+;\\s*\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(insertIndex, \"using VRBoxingGame.Core;\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 116,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return \"using VRBoxingGame.Core;\\n\" + content;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 122,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Directory.Exists(scriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(scriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(\".backup\")) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 136,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var matches = Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)*>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)*>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc4 {Path.GetFileName(filePath)}: {matches.Count} remaining calls\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca TOTAL REMAINING FINDOBJECTOFTYPE CALLS: {count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Optimization SUCCESS - Performance crisis resolved!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f {count} calls still remain - further optimization needed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 163,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] backupFiles = Directory.GetFiles(scriptsPath, \"*.backup\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 165,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int restored = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string originalPath = backupPath.Replace(\".backup\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (File.Exists(originalPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(originalPath, File.ReadAllText(backupPath));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EmergencyPerformanceFix.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd04 Restored {restored} files from backups\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 33,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject registryGO = new GameObject(\"System Registry\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 37,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instance.InitializeRegistry();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 65,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfd7\ufe0f System Registry initialized with {systemCache.Count} cached systems\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Instance.systemCache.TryGetValue(typeof(T), out Component system))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Instance.systemCache.Remove(typeof(T));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Instance.systemCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Instance.CacheSystemReferences();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== System Registry Status ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Cached Systems: {Instance.systemCache.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"{kvp.Key.Name}: {status}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemRegistry.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 17,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCacheSize = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 18,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float cacheCleanupInterval = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private static int totalCacheHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private static int totalCacheMisses = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private static float totalFindObjectTime = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 41,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "private static readonly object cleanupLock = new object();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcbe Initializing Enhanced Cached Reference Manager...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Enhanced Cache Manager initialized - Max cache size: {maxCacheSize}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 103,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int preloadedCount = 0;"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 107,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var component = FindObjectOfType(type) as Component;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryAdd(type, component);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcdd Pre-cached {type.Name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Pre-cached {preloadedCount} critical systems\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentCache.TryGetValue(type, out Component cachedComponent))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentCache.Count < Instance.GetMaxCacheSize())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryAdd(type, foundComponent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcdd Cached new reference: {type.Name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 175,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Component not found: {type.Name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentArrayCache.TryGetValue(type, out Component[] cachedArray))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentArrayCache.Count < Instance.GetMaxCacheSize())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.TryAdd(type, foundComponents);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.TryRemove(type, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\uddd1\ufe0f Cleared cache for {type.Name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!cacheStatistics.ContainsKey(type))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 310,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int removedCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 320,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "keysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "keysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.TryRemove(key, out _);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 337,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "arrayKeysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "arrayKeysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 354,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "arrayKeysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "arrayKeysToRemove.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.TryRemove(key, out _);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\uddf9 Cache cleanup removed {removedCount} invalid entries\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentArrayCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cacheStatistics.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 406,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalCacheHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 407,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalCacheMisses = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 408,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalFindObjectTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\uddd1\ufe0f All caches cleared\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca CACHED REFERENCE MANAGER PERFORMANCE REPORT\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Cache Size: {GetCacheSize()}/{maxCacheSize}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Total Accesses: {totalAccesses}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 421,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Cache Hit Ratio: {hitRatio:P1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Performance Savings: {totalFindObjectTime * 1000:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 426,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd1d TOP CACHED SYSTEMS:\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 433,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "sortedStats.Add(stat);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sortedStats.Add(stat);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sortedStats.Sort((a, b) => (b.hits + b.misses).CompareTo(a.hits + a.misses));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 438,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < System.Math.Min(10, sortedStats.Count); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < System.Math.Min(10, sortedStats.Count); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  {stat.typeName}: {total} accesses ({hitRatio:P0} hit rate)\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 44,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunCriticalPerformanceFixes());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 55,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 59,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(FixFindObjectOfTypeCalls());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 63,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeUpdateMethods());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 67,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CacheGetComponents());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 71,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(IdentifyCoroutinesForModernization());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 80,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 81,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFixed = 0;"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 87,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "int fixesInFile = await ProcessFileForFindObjectOfType(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogFix($\"  \u2705 Fixed {fixesInFile} calls in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 103,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "private async Task<int> ProcessFileForFindObjectOfType(string filePath)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 109,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacements = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 112,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(\"FindObjectOfType\") && !content.Contains(\"using VRBoxingGame.Core;\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "{@\"GameObject\\.FindGameObjectWithTag\\(([^)]+)\\)\", \"CachedReferenceManager.GetByTag($1)\"},"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "{@\"GameObject\\.Find\\(([^)]+)\\)\", \"CachedReferenceManager.GetByName($1)\"}"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 130,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern.Key, pattern.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 152,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFound = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var updateMatches = Regex.Matches(content, @\"(private|protected|public)?\\s*void\\s+Update\\s*\\(\\s*\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogFix($\"  \ud83d\udccb Found {updateMatches.Count} Update methods in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogFix($\"  \u2705 Converted {Path.GetFileName(filePath)} to OptimizedUpdatable\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"IOptimizedUpdatable\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"GetUpdateFrequency\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var lastBrace = content.LastIndexOf('}');"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(lastBrace,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"OptimizedUpdateManager.Instance.RegisterSystem\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var startMethodMatch = Regex.Match(content, @\"(private|protected|public)?\\s*void\\s+Start\\s*\\(\\s*\\)\\s*{\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(insertIndex,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var classBodyMatch = Regex.Match(content, @\"(class\\s+\\w+[^{]*{)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(insertIndex,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 245,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFound = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 252,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var getComponentMatches = Regex.Matches(content, @\"GetComponent<(\\w+)>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var getComponentMatches = Regex.Matches(content, @\"GetComponent<(\\w+)>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogFix($\"  \ud83d\udccb Found {getComponentMatches.Count} GetComponent calls in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 274,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFound = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var coroutineMatches = Regex.Matches(content, @\"StartCoroutine\\([^)]+\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogFix($\"  \ud83d\udccb Found {coroutineMatches.Count} coroutines in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string fileName = Path.GetFileName(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return !fileName.StartsWith(\"Unity6\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\"Library\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\"Packages\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\".git\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Contains(\"MonoBehaviour\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!content.Contains(\"IOptimizedUpdatable\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!content.Contains(\"Unity6PerformanceFixer\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!content.Contains(\"OptimizedUpdateManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(usingStatement)) return content;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var firstUsingIndex = content.IndexOf(\"using \");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 321,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(firstUsingIndex, usingStatement + \"\\n\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(firstUsingIndex, usingStatement + \"\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 325,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return usingStatement + \"\\n\" + content;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 345,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float improvementFactor = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 351,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "report.isVRReady = report.estimatedPerformanceGain >= 50f; // 50%+ improvement should achieve VR readiness"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timeStamp = System.DateTime.Now.ToString(\"HH:mm:ss\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[{timeStamp}] {message}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6PerformanceFixer.cs",
        "line": 388,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunCriticalPerformanceFixes());"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 3,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float validationInterval = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 0.011f; // 11ms for 90 FPS"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxActiveUpdate = 5; // Maximum allowed individual Update() methods"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxFindObjectCalls = 3; // Maximum allowed FindObjectOfType calls per frame"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 90,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformComprehensiveValidation());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Starting comprehensive system validation...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "criticalIssues.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 104,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warnings.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 107,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 110,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateCoreSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 113,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateMenuSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 116,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidatePerformanceSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 119,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateSystemIntegration());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Validation complete - Score: {currentReport.overallScore:F1}/100\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating core systems...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 172,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int individualUpdates = 0;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 177,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "if (mono.GetComponent<LegacyUpdateDisabled>() != null) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 179,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var updateMethod = mono.GetType().GetMethod(\"Update\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (updateMethod != null && updateMethod.DeclaringType == mono.GetType())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AddWarning(\"Performance\", $\"Individual Update() method in {mono.GetType().Name}\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int cacheSize = cacheManager.GetCacheSize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!sceneManager.AreSceneAssetsConfigured())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!systemIntegrator.AreSystemsInitialized())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating menu systems...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 272,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int menuCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating performance systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating system integration...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Frame time exceeded threshold: {currentFrameTime * 1000:F2}ms (max: {maxFrameTime * 1000:F1}ms)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 424,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "criticalIssues.Add(new ValidationIssue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "criticalIssues.Add(new ValidationIssue"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 436,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "warnings.Add(new ValidationIssue"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warnings.Add(new ValidationIssue"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 449,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 100f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "score = Mathf.Max(0f, score);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 460,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timestamp = System.DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return statuses.ToArray();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 488,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "statuses.Add(new SystemStatus"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "statuses.Add(new SystemStatus"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca SYSTEM VALIDATION REPORT\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Overall Score: {currentReport.overallScore:F1}/100\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 503,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Critical Issues: {criticalIssues.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Warnings: {warnings.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 508,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c CRITICAL ISSUES:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"  - {issue.category}: {issue.description}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 512,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"    Solution: {issue.solution}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f WARNINGS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"  - {warning.category}: {warning.description}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"    Solution: {warning.solution}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 528,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All systems validated successfully!\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/SystemIntegrationValidator.cs",
        "line": 540,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformComprehensiveValidation());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 34,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\uddc3\ufe0f Initializing Cached Reference Manager...\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 51,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "if (Instance == null) return FindObjectOfType<T>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 55,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentCache.TryGetValue(type, out Component cached))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 58,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.Remove(type);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 66,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Instance == null) return GameObject.Find(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameObjectCache.TryGetValue(name, out GameObject cached))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 71,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObjectCache.Remove(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 74,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject found = GameObject.Find(name);"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 81,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "T found = FindObjectOfType<T>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcdd Cached {typeof(T).Name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObjectCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CachedReferenceManager.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 All caches refreshed\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 5,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalReplacements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float estimatedPerformanceGain = 0f;"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 45,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"FindObjectOfType<(\\w+)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 47,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"FindObjectOfType<(\\w+\\.\\w+)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 51,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(\\w+\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 52,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(var\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 53,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(auto\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 56,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"if\\s*\\(\\s*FindObjectOfType<(\\w+)>\\(\\)\\s*!=\\s*null\\s*\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 57,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"if\\s*\\(\\s*FindObjectOfType<(\\w+)>\\(\\)\\s*==\\s*null\\s*\\)\","
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 77,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformAutomaticReplacement());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Starting FindObjectOfType automatic replacement...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 85,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f); // Wait for other systems"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 88,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ProcessAllCSharpFiles());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 FindObjectOfType replacement complete - {totalReplacements} replacements made\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 98,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string fullScriptsPath = Path.Combine(Application.dataPath, scriptsPath.Replace(\"Assets/\", \"\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Directory.Exists(fullScriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Scripts directory not found: {fullScriptsPath}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(fullScriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Processing {csFiles.Length} C# files...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 111,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int processedCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(backupSuffix)) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string relativePath = filePath.Replace(Application.dataPath, \"Assets\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {result.fileName}: {result.replacementCount} replacements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Processed {processedCount} files\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fileName = Path.GetFileName(filePath),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!File.Exists(backupPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(backupPath, originalContent);"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 173,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "if (!content.Contains(\"using VRBoxingGame.Core;\") && ContainsFindObjectOfType(content))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"using VRBoxingGame.Core;\") && ContainsFindObjectOfType(content))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var usingMatch = Regex.Match(content, @\"using\\s+[\\w\\.]+;\\s*\\r?\\n\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(insertIndex, \"using VRBoxingGame.Core;\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 185,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "content = \"using VRBoxingGame.Core;\\n\" + content;"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 193,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "content = ReplaceBasicFindObjectOfType(content, replacedLines);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "result.replacedLines = replacedLines.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error processing {result.fileName}: {ex.Message}\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 225,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "private bool ContainsFindObjectOfType(string content)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Contains(\"FindObjectOfType\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 230,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "private string ReplaceBasicFindObjectOfType(string content, List<string> replacedLines)"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 233,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var pattern = @\"FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Replace(match.Value, replacement);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 241,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"CachedReferenceManager.Get<{typeName}>() \u2192 CachedReferenceManager.Get<{typeName}>()\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"CachedReferenceManager.Get<{typeName}>() \u2192 CachedReferenceManager.Get<{typeName}>()\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 252,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(\\w+\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 253,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(var\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 254,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"(auto\\s+\\w+\\s*=\\s*)FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\""
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern, match =>"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 264,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 277,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"if\\s*\\(\\s*FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\\s*!=\\s*null\\s*\\)\","
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 278,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "@\"if\\s*\\(\\s*FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\\s*==\\s*null\\s*\\)\""
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, patterns[0], match =>"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 285,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, patterns[1], match =>"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 293,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 303,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var pattern = @\"(\\w+\\s*=\\s*\\w+\\s*\\?\\?\\s*)FindObjectOfType<(\\w+(?:\\.\\w+)?)>\\(\\)\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern, match =>"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 310,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "replacedLines.Add($\"{match.Value} \u2192 {replacement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca FINDOBJECTOFTYPE REPLACEMENT REPORT\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Total Files Processed: {replacementResults.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Total Replacements: {totalReplacements}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Estimated Performance Gain: {estimatedPerformanceGain:F1}ms per frame\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 323,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Estimated FPS Improvement: +{CalculateFPSImprovement(estimatedPerformanceGain):F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\\n\ud83d\udccb FILES WITH MOST REPLACEMENTS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var sortedResults = replacementResults.Values.OrderByDescending(r => r.replacementCount).Take(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  {result.fileName}: {result.replacementCount} replacements (+{result.estimatedSpeedGain:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\\n\u2705 OPTIMIZATION COMPLETE - VR Performance Ready!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Before: 60-70 FPS (FindObjectOfType bottlenecks)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   After: 90+ FPS (Cached references)\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 352,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformAutomaticReplacement());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Restoring files from backups...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string fullScriptsPath = Path.Combine(Application.dataPath, scriptsPath.Replace(\"Assets/\", \"\"));"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 365,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "string[] backupFiles = Directory.GetFiles(fullScriptsPath, \"*\" + backupSuffix, SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] backupFiles = Directory.GetFiles(fullScriptsPath, \"*\" + backupSuffix, SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 367,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int restoredCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string originalPath = backupPath.Replace(backupSuffix, \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (File.Exists(originalPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string backupContent = File.ReadAllText(backupPath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(originalPath, backupContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to restore {Path.GetFileName(originalPath)}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Restored {restoredCount} files from backups\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating FindObjectOfType replacements...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c CachedReferenceManager not found! Replacements may fail at runtime.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string fullScriptsPath = Path.Combine(Application.dataPath, scriptsPath.Replace(\"Assets/\", \"\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(fullScriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 406,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int remainingCalls = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(backupSuffix)) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 413,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var matches = Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)?>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 413,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)?>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Validation Results:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Remaining FindObjectOfType calls: {remainingCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  CachedReferenceManager: {(CachedReferenceManager.Instance != null ? \"\u2705 Available\" : \"\u274c Missing\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/FindObjectTypeReplacer.cs",
        "line": 422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Overall Status: {(isValid ? \"\u2705 VALIDATED\" : \"\u274c ISSUES FOUND\")}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxInstancesPerBatch = 511; // VR-optimized batch size"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxVerticesPerBatch = 300000; // Conservative for VR"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int previousDrawCalls = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int previousBatches = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float performanceImprovement = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 79,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Enabling Unity 6 GPU Resident Drawer for VR optimization...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 GPU Resident Drawer enabled successfully!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 122,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "SerializedObject urpAssetSO = new SerializedObject(urpAsset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SerializedProperty gpuResidentDrawerProp = urpAssetSO.FindProperty(\"m_GPUResidentDrawer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "urpAssetSO.ApplyModifiedProperties();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf GPU Resident Drawer enabled in URP settings\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f GPU Resident Drawer property not found - may not be available in this Unity version\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c URP Asset not found - GPU Resident Drawer requires Universal Render Pipeline\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Applying VR-specific GPU optimizations...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 157,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "SerializedObject urpAssetSO = new SerializedObject(urpAsset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SerializedProperty srpBatcherProp = urpAssetSO.FindProperty(\"m_UseSRPBatcher\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SerializedProperty gpuInstancingProp = urpAssetSO.FindProperty(\"m_SupportsGPUInstancing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "urpAssetSO.ApplyModifiedProperties();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 184,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // VR handles VSync"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 185,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.maxQueuedFrames = 2; // Reduce latency"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 GPU Instancing enabled globally\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udce6 Configuring batching settings for VR...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Batch limits: Max instances per batch: {maxInstancesPerBatch}, Max vertices: {maxVerticesPerBatch}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 220,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u274c URP Asset not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u274c URP Asset not found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 225,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 URP Asset found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 URP Asset found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 232,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add($\"\u2705 Graphics API compatible: {graphicsAPI}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add($\"\u2705 Graphics API compatible: {graphicsAPI}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 236,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add($\"\u26a0\ufe0f Graphics API may not support all features: {graphicsAPI}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add($\"\u26a0\ufe0f Graphics API may not support all features: {graphicsAPI}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 242,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 GPU Instancing supported\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 GPU Instancing supported\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 246,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u274c GPU Instancing not supported\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u274c GPU Instancing not supported\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 253,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 Compute Shaders supported\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u2705 Compute Shaders supported\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 257,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u26a0\ufe0f Compute Shaders not supported - some optimizations unavailable\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validation.Add(\"\u26a0\ufe0f Compute Shaders not supported - some optimizations unavailable\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d GPU Resident Drawer Validation Results:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(result);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 GPU Resident Drawer fully validated and ready!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Some GPU Resident Drawer features may not be available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Configuring materials for GPU Resident Drawer...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 290,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int materialsConfigured = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Configured {materialsConfigured} materials for GPU instancing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.shader.name.Contains(\"Universal Render Pipeline\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.shader.name.Contains(\"URP\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 335,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var stats = new GPUDrawerStats();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 390,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var rect = new Rect(10, 10, 300, 120);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(rect, \"GPU Resident Drawer Stats\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 393,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var style = new GUIStyle(GUI.skin.label);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 394,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "style.fontSize = 12;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 396,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 30, 290, 20), $\"Draw Calls: {stats.currentDrawCalls}\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 30, 290, 20), $\"Draw Calls: {stats.currentDrawCalls}\", style);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 397,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 45, 290, 20), $\"Batches: {stats.currentBatches}\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 45, 290, 20), $\"Batches: {stats.currentBatches}\", style);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 398,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 60, 290, 20), $\"Draw Call Reduction: {stats.drawCallReduction:F1}%\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 60, 290, 20), $\"Draw Call Reduction: {stats.drawCallReduction:F1}%\", style);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 399,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 75, 290, 20), $\"Batch Reduction: {stats.batchReduction:F1}%\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 75, 290, 20), $\"Batch Reduction: {stats.batchReduction:F1}%\", style);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 400,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 90, 290, 20), $\"Frame Rate: {stats.frameRate:F1} FPS\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 90, 290, 20), $\"Frame Rate: {stats.frameRate:F1} FPS\", style);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 401,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 105, 290, 20), $\"Enabled: {(stats.isEnabled ? \"\u2705\" : \"\u274c\")}\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(15, 105, 290, 20), $\"Enabled: {(stats.isEnabled ? \"\u2705\" : \"\u274c\")}\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\uded1 Disabling GPU Resident Drawer...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6GPUResidentDrawerEnabler.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23f9\ufe0f GPU Resident Drawer disabled\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float validationInterval = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float criticalFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 11.1f; // 90fps = 11.1ms"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float currentFPS = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float averageFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalChecks = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int passedChecks = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 92,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport = new ValidationReport();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Runtime Validation Summary initialized - Press F12 to toggle GUI\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 101,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(toggleKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(toggleKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 118,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float score = currentReport.GetOverallScore();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[ValidationSummary] Overall Status: {currentReport.overallStatus} (Score: {score:F1}%)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 165,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"VSync should be disabled for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 165,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"VSync should be disabled for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 172,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Target frame rate is {Application.targetFrameRate}, recommend {targetFrameRate}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Target frame rate is {Application.targetFrameRate}, recommend {targetFrameRate}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 178,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"MSAA is {QualitySettings.antiAliasing}x, recommend 4x for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"MSAA is {QualitySettings.antiAliasing}x, recommend 4x for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 184,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Shadow cascades is {QualitySettings.shadowCascades}, recommend 1 for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Shadow cascades is {QualitySettings.shadowCascades}, recommend 1 for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 188,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (allValid) currentReport.optimizations.Add(\"Project settings optimized for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (allValid) currentReport.optimizations.Add(\"Project settings optimized for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 197,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"No URP asset assigned\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"No URP asset assigned\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 207,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"URP shadow distance is {urpAsset.shadowDistance}m, recommend < 50m for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 207,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"URP shadow distance is {urpAsset.shadowDistance}m, recommend < 50m for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 213,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"URP MSAA is {urpAsset.msaaSampleCount}x, recommend 4x for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"URP MSAA is {urpAsset.msaaSampleCount}x, recommend 4x for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 219,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"SRP Batcher enabled for better performance\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"SRP Batcher enabled for better performance\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 223,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"SRP Batcher should be enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"SRP Batcher should be enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 228,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (validConfig) currentReport.optimizations.Add(\"URP configured optimally for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (validConfig) currentReport.optimizations.Add(\"URP configured optimally for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 238,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"No XR loader active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add(\"No XR loader active\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 243,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"XR system active and configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"XR system active and configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 257,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add($\"Performance optimal: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add($\"Performance optimal: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 262,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Performance acceptable: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add($\"Performance acceptable: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 267,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add($\"Performance critical: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.errors.Add($\"Performance critical: {metrics.frameRate:F1} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 273,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"VR Performance Monitor not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"VR Performance Monitor not found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 285,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Modern Input System detected\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Modern Input System detected\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 290,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Legacy Input detected - consider migrating to Input System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Legacy Input detected - consider migrating to Input System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 299,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Addressable Streaming System active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Addressable Streaming System active\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 304,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Addressable Streaming System not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Addressable Streaming System not found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 313,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Object Pooling System active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Object Pooling System active\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 318,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Object Pooling System not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Object Pooling System not found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 327,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Optimized Update Manager active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.optimizations.Add(\"Optimized Update Manager active\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 332,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Optimized Update Manager not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentReport.warnings.Add(\"Optimized Update Manager not found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 344,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "headerStyle = new GUIStyle(GUI.skin.label) { fontSize = 16, fontStyle = FontStyle.Bold };"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 345,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "normalStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 345,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "normalStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 346,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "errorStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 346,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "errorStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 348,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "successStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 348,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "successStyle = new GUIStyle(GUI.skin.label) { fontSize = 12 };"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 353,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 10, 400, 600), \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 10, 400, 600), \"\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 354,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 20, 380, 580));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 20, 380, 580));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\ud83d\udd0d ENHANCING PROMPT VALIDATION\", headerStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUIStyle statusStyle = currentReport.GetOverallScore() >= 75f ? successStyle : errorStyle;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Overall Status: {currentReport.overallStatus}\", statusStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Score: {currentReport.GetOverallScore():F1}%\", normalStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"FPS: {currentReport.currentFPS:F1} | Frame: {currentReport.averageFrameTime:F1}ms\", fpsStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"SYSTEM STATUS:\", headerStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\u274c ERRORS:\", errorStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"\u2022 {error}\", errorStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(5);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\u26a0\ufe0f WARNINGS:\", normalStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"\u2022 {warning}\", normalStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(5);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\u2705 OPTIMIZATIONS:\", successStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 413,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"\u2022 {optimization}\", successStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Refresh Validation\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Apply Critical Fixes\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 430,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Press {toggleKey} to toggle this panel\", normalStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"{indicator} {name}\", style);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Applying critical fixes...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 449,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Fixed: VSync disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 457,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Fixed: Target frame rate set to {targetFrameRate}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "CriticalVROptimizer.Instance.ReapplyOptimizations();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 464,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Applied: Critical VR optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GenerateTextReport());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 491,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var sb = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"=== ENHANCING PROMPT VALIDATION REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Overall Status: {currentReport.overallStatus}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Score: {currentReport.GetOverallScore():F1}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 495,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Performance: {currentReport.currentFPS:F1} FPS | {currentReport.averageFrameTime:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 496,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 498,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"SYSTEM STATUS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Project Settings: {(currentReport.projectSettingsValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"URP Configuration: {(currentReport.urpConfigurationValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"XR System: {(currentReport.xrSystemValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Performance: {(currentReport.performanceOptimal ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 503,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Input System: {(currentReport.inputSystemModernized ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Addressables: {(currentReport.addressablesConfigured ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 505,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Object Pooling: {(currentReport.objectPoolingActive ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Optimized Updates: {(currentReport.optimizedUpdateActive ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"ERRORS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"\u2022 {error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 519,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"WARNINGS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"\u2022 {warning}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"OPTIMIZATIONS ACTIVE:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 529,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"\u2022 {optimization}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/RuntimeValidationSummary.cs",
        "line": 532,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return sb.ToString();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float coachingUpdateFrequency = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int performanceHistorySize = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float skillAnalysisWindow = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyUpdateInterval = 10f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 37,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve difficultyResponseCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxDifficultyIncrease = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 145,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 146,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int maxCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 Initializing Advanced Game State Manager...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 175,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "performanceModel = new PlayerPerformanceModel();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 176,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "difficultyEngine = new AdaptiveDifficultyEngine();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 177,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "realTimeCoach = new RealTimeCoach();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 178,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "sessionAnalytics = new SessionAnalytics();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced Game State Manager initialized!\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 206,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 207,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "maxCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "BoxingFormTracker.Instance.OnFormAnalyzed.AddListener(OnFormAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 217,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "BoxingFormTracker.Instance.OnHipPowerGenerated.AddListener(OnPowerGenerated);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.OnCircleHit.AddListener(OnTargetHit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener(OnBeatDetected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle = analyticsJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instruction = await realTimeCoach.GenerateInstructionAsync(performanceAnalysis);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 285,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Add(instruction.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Add(instruction.Value);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 286,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnCoachingInstruction?.Invoke(instruction.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield(); // Simulate ML inference"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 321,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = pendingInstructions.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSessionData.formConsistency = Mathf.Lerp(currentSessionData.formConsistency, formQuality, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 347,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSessionData.punchPower = Mathf.Max(currentSessionData.punchPower, power);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "maxCombo = Mathf.Max(maxCombo, currentCombo);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSessionData.accuracy = Mathf.Lerp(currentSessionData.accuracy, hitAccuracy, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "realTimeCoach.AnalyzeRhythmTiming(beatData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 381,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float total = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 382,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 384,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < reactionTimeHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float enduranceFactor = Mathf.Exp(-sessionTime / 300f); // Exponential decay over 5 minutes"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(enduranceFactor);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 417,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float accuracyWeight = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 418,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float powerWeight = 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 419,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float formWeight = 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 420,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float enduranceWeight = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 431,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSessionComplete?.Invoke(sessionSummary);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 457,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.accuracy > 0.8f) improvedAreas.Add(SkillArea.Accuracy);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 457,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.accuracy > 0.8f) improvedAreas.Add(SkillArea.Accuracy);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 458,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.punchPower > 1.5f) improvedAreas.Add(SkillArea.Power);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 458,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.punchPower > 1.5f) improvedAreas.Add(SkillArea.Power);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 459,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.formConsistency > 0.8f) improvedAreas.Add(SkillArea.Form);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.formConsistency > 0.8f) improvedAreas.Add(SkillArea.Form);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return improvedAreas.ToArray();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 468,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.accuracy < 0.6f) improvementAreas.Add(SkillArea.Accuracy);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.accuracy < 0.6f) improvementAreas.Add(SkillArea.Accuracy);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 469,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.punchPower < 1.2f) improvementAreas.Add(SkillArea.Power);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.punchPower < 1.2f) improvementAreas.Add(SkillArea.Power);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 470,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.formConsistency < 0.6f) improvementAreas.Add(SkillArea.Form);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.formConsistency < 0.6f) improvementAreas.Add(SkillArea.Form);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 471,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.endurance < 0.7f) improvementAreas.Add(SkillArea.Endurance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentSessionData.endurance < 0.7f) improvementAreas.Add(SkillArea.Endurance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return improvementAreas.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Session saved: {summary.overallPerformanceRating:F2} rating, {summary.totalTargetsHit} targets hit\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (analyticsJobHandle.IsCreated) analyticsJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceHistory.IsCreated) performanceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (punchPositionHistory.IsCreated) punchPositionHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (reactionTimeHistory.IsCreated) reactionTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(10); // Simulate ML inference"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return data.overallSkillLevel * 0.9f + UnityEngine.Random.Range(-0.1f, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 509,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float targetAccuracy = 0.75f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp(1f + difficultyAdjustment, 0.5f, 2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 517,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastInstructionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 518,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const float instructionCooldown = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 528,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instruction = new AdvancedGameStateManager.CoachingInstruction();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 535,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.urgency = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 541,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.urgency = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 547,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.urgency = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 553,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.urgency = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 556,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.duration = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 599,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float recentPerformanceAvg = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 600,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int recentSamples = math.min(60, performanceHistory.Length); // Last 60 samples"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 610,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validPunches = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 612,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < punchPositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 614,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.length(punchPositions[i]) > 0.01f) // Valid punch position"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 627,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgReactionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 628,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validReactions = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedGameStateManager.cs",
        "line": 630,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < reactionTimes.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 50,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunUnity6FeatureUpgrade());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 61,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 65,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementECSArchitecture());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 69,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableJobSystemOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 73,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(UpgradeToAddressableAssets());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 77,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ModernizeInputSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 81,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(UpgradeRenderingPipeline());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 85,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableAdvancedPhysics());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 94,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupECSWorld());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 95,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSTargetSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 96,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSMovementSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 97,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSRenderingSystem());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 100,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Unity ECS Architecture\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Unity ECS Architecture\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 109,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var ecsWorldSetup = GetComponent<ECSWorldSetup>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 115,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 127,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var systemObj = new GameObject(\"ECS Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 136,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 144,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 163,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 170,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateBurstCompiledJobs());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 171,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupNativeCollections());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 172,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementParallelProcessing());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 175,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Job System + Burst Compilation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 175,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Job System + Burst Compilation\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 187,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var systemObj = new GameObject(\"Native Optimization System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 196,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 211,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 219,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConfigureAddressableGroups());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 220,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConvertResourcesLoading());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 221,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupAssetStreaming());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 224,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Addressable Asset System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Addressable Asset System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 236,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var systemObj = new GameObject(\"Addressable Streaming System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 245,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 252,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 260,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 268,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConvertLegacyInput());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 269,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupInputActions());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 270,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConfigureVRInputHandling());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 273,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Modern Input System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Modern Input System\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 279,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "LogUpgrade(\"  \ud83d\udd04 Converting legacy Input.GetKey to Input Actions...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 281,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 289,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 308,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 315,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConvertPostProcessingToVolumes());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 316,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableHDRPFeatures());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 317,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeVRRendering());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 320,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"URP Volume System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"URP Volume System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 339,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 346,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 365,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 372,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnablePhysicsOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 373,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConfigureVRPhysics());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 376,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Advanced Physics System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.featuresImplemented.Add(\"Advanced Physics System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 384,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 392,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 415,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFeatures = 6;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 416,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int implementedFeatures = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 426,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "report.isUnity6Ready = implementedFeatures >= 4; // At least 4/6 features for Unity 6 readiness"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 462,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timeStamp = System.DateTime.Now.ToString(\"HH:mm:ss\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[{timeStamp}] {message}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 475,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunUnity6FeatureUpgrade());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureUpgrader.cs",
        "line": 484,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"ECS World setup initialized\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float replacementCheckInterval = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalReplacements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float totalPerformanceGain = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastCheckTime = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 57,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeReplacementSystem());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Initializing Legacy System Replacer...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 71,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitUntil(() =>"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 76,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ScanForLegacySystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 81,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ReplaceLegacySystems());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Legacy System Replacer initialized - {totalReplacements} systems optimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Scanning for legacy systems...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 92,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int processedCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 105,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemReplacements[mono.GetType()] = systemInfo;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 106,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "legacySystems.Add(mono);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "legacySystems.Add(mono);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcdd Found legacy system: {systemInfo.systemName} \" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Scan complete - Found {legacySystems.Count} legacy systems\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemName = system.GetType().Name,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 139,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Type systemType = system.GetType();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var updateMethod = systemType.GetMethod(\"Update\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 146,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "info.performanceImpact += 0.1f; // Estimated impact"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fixedUpdateMethod = systemType.GetMethod(\"FixedUpdate\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 154,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "info.performanceImpact += 0.05f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var lateUpdateMethod = systemType.GetMethod(\"LateUpdate\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "info.performanceImpact += 0.05f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var fields = systemType.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (field.FieldType.IsSubclassOf(typeof(Component)) || field.FieldType == typeof(Component))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var value = field.GetValue(system);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 176,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "info.performanceImpact += 0.2f; // Higher impact for FindObjectOfType"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Replacing legacy systems...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 189,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacedCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Type systemType = legacySystem.GetType();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Replaced {systemInfo.systemName} with optimized version\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Replacement complete - {replacedCount} systems optimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "wrapperComponent.Initialize(legacySystem, systemInfo);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "OptimizedUpdateManager.Instance.RegisterSystem(wrapperComponent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to create optimized wrapper for {systemInfo.systemName}: {ex.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 259,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var flagComponent = system.gameObject.GetComponent<LegacyUpdateDisabled>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Performance Impact Report:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Total Replacements: {totalReplacements}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Estimated Frame Time Improvement: {estimatedFrameTimeImprovement * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Estimated FPS Improvement: +{estimatedFPSImprovement:F1} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 324,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ScanForLegacySystems());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Type systemType = system.GetType();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateMethod = systemType.GetMethod(\"Update\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fixedUpdateMethod = systemType.GetMethod(\"FixedUpdate\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lateUpdateMethod = systemType.GetMethod(\"LateUpdate\", BindingFlags.NonPublic | BindingFlags.Instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (updateMethod != null && updateMethod.DeclaringType == wrappedSystem.GetType())"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 362,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "updateMethod.Invoke(wrappedSystem, null);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateMethod.Invoke(wrappedSystem, null);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in wrapped system {systemInfo.systemName}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string systemName = systemInfo.systemName.ToLower();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (systemName.Contains(\"hand\") || systemName.Contains(\"tracking\") || systemName.Contains(\"input\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacySystemReplacer.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (systemName.Contains(\"ui\") || systemName.Contains(\"menu\") || systemName.Contains(\"debug\"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFPS = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 11.11f; // 90 FPS = 11.11ms"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 57,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveIntegrationValidation());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 68,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f); // Allow systems to fully initialize"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 72,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateCoreSystemsIntegration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 76,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidatePerformanceOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 80,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateUnity6Features());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 84,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateVRCompatibility());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 88,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateGameModeIntegration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 92,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(RunPerformanceBenchmarks());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 104,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateOptimizedUpdateManager());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 105,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateCachedReferenceManager());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 106,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateSceneAssetManager());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 107,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateCriticalSystemIntegrator());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int registeredSystems = updateManager.GetRegisteredSystemsCount();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 121,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add($\"OptimizedUpdateManager ({registeredSystems} systems)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add($\"OptimizedUpdateManager ({registeredSystems} systems)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 127,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"OptimizedUpdateManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"OptimizedUpdateManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 132,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int cachedReferences = refManager.GetCachedReferenceCount();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 144,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add($\"CachedReferenceManager ({cachedReferences} references)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add($\"CachedReferenceManager ({cachedReferences} references)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 150,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"CachedReferenceManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"CachedReferenceManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 155,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 166,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"SceneAssetManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"SceneAssetManager\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 170,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string sceneName = sceneManager.GetSceneName(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(sceneName))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 187,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"SceneAssetManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"SceneAssetManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 192,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (systemIntegrator != null && systemIntegrator.AreSystemsInitialized())"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 203,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"CriticalSystemIntegrator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"CriticalSystemIntegrator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 209,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"CriticalSystemIntegrator not initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"CriticalSystemIntegrator not initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 225,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateFrameRatePerformance());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 226,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateMemoryOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 227,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateRenderingOptimizations());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 237,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 238,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int frameCount = 60; // Measure over 60 frames"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 240,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameCount; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 268,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add($\"Performance below target: {averageFPS:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add($\"Performance below target: {averageFPS:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long memoryUsage = System.GC.GetTotalMemory(false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 297,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add($\"High memory usage: {memoryMB:F1} MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add($\"High memory usage: {memoryMB:F1} MB\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 302,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 316,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"VR Render Graph System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"VR Render Graph System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 322,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Compute Shader Rendering System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Compute Shader Rendering System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 326,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 337,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateECSIntegration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 338,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateJobSystemIntegration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 339,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateAddressableAssets());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 352,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"ECS Target System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"ECS Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 373,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Job System + Native Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Job System + Native Optimization\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 383,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 394,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Addressable Streaming System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Addressable Streaming System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 404,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 415,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateXROrigin());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 416,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateHandTracking());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 417,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateVRPerformanceMonitoring());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 430,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"XR Origin\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 430,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"XR Origin\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 437,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"XR Origin missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"XR Origin missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 443,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 454,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Hand Tracking Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Hand Tracking Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 464,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 475,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"VR Performance Monitor\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"VR Performance Monitor\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 485,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 496,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateGameModeIntegrator());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 497,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateIndividualGameModes());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 510,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"SceneGameModeIntegrator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"SceneGameModeIntegrator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 516,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"SceneGameModeIntegrator missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.issuesFound.Add(\"SceneGameModeIntegrator missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 521,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 533,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Traditional Boxing Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 533,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Traditional Boxing Mode\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 541,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Flow Mode (Beat Saber style)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Flow Mode (Beat Saber style)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 549,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Two-Handed Staff Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Two-Handed Staff Mode\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 557,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Comprehensive Dodging Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"Comprehensive Dodging Mode\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 565,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"AI Coach System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.validatedSystems.Add(\"AI Coach System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 569,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 580,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(BenchmarkTargetSpawning());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 581,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(BenchmarkComplexSceneRendering());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 594,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 100; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 623,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 624,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int frameCount = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 626,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameCount; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 679,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.integrationScore = Mathf.Max(0f, baseScore - penaltyForIssues);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 756,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "validationLog.Add(message);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validationLog.Add(message);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 760,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timeStamp = System.DateTime.Now.ToString(\"HH:mm:ss\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 761,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[{timeStamp}] {message}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6IntegrationValidator.cs",
        "line": 778,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveIntegrationValidation());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int quest3TargetFPS = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int quest2TargetFPS = 72;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 11.1f; // 90 FPS = 11.1ms"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 74,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Initializing Unity 6 Advanced Systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Unity 6 Advanced Systems initialized successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize Unity 6 systems: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Initializing Performance Monitor...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 115,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var perfMonitorGO = new GameObject(\"VR Performance Monitor\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Initializing VR Render Graph...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 135,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var renderGraphGO = new GameObject(\"VR Render Graph System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a Initializing Advanced Form Processor...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 154,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var formProcessorGO = new GameObject(\"Advanced Boxing Form Processor\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 159,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "formProcessor.updateFrequency = 30f; // 30 FPS analysis"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Initializing ECS Target System...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 172,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var ecsSystemGO = new GameObject(\"ECS Target System\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 176,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "ecsTargetSystem.maxTargets = 1000;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating System Integration...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f System {system.Key} failed to initialize\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var formData = formProcessor.GetCurrentFormData();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udccb Form-Target integration test: Stance = {formData.stance}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc8 Performance-Render integration test: FPS = {currentFPS:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All systems validated successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c System validation failed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string deviceModel = SystemInfo.deviceModel.ToLower();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (deviceModel.Contains(\"quest 3\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Applying Quest 3 optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.OptimizeForQuest3();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (deviceModel.Contains(\"quest 2\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Applying Quest 2 optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.OptimizeForQuest2();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f Applying PC VR optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.SetTargetFrameRate(90);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.SetRenderScale(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000); // Check every second"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float formProcessorPerf = formProcessor != null ? formProcessor.GetFormScore() : 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float renderGraphPerf = renderGraphSystem != null ? renderGraphSystem.GetCurrentRenderScale() : 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\ud83d\udea8 System failure detected: {system.Key}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "integrationJobHandle = optimizationJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "integrationJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ecsTargetSystem.maxTargets = Mathf.RoundToInt(recommendedTargetLimit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.SetRenderScale(recommendedRenderScale);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "optimizationJob.optimizationResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== Unity 6 System Status ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"{system.Key}: {status}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\\n=== Performance Metrics ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Form Processor: {systemPerformanceData[0]:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"ECS Targets: {systemPerformanceData[1]:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Render Scale: {systemPerformanceData[2]:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Restarting failed systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "integrationJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemPerformanceData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float recommendedFormFreq = math.lerp(20f, 40f, 1f - formPerf);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float recommendedTargetLimit = math.lerp(500f, 1500f, 1f - ecsPerf);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6IntegrationManager.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float recommendedRenderScale = math.clamp(renderPerf * 1.1f, 0.7f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 26,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Fixing menu system conflicts...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 33,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Found menu systems: {mainMenuSystems.Length} Main, {enhancedMenuSystems.Length} Enhanced, {optimizedMenuSystems.Length} Optimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 40,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menu.gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u274c Disabled MainMenuSystem\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 46,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menu.gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 47,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u274c Disabled EnhancedMainMenuSystem\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 59,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menu.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 60,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enabled EnhancedMainMenuSystemOptimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 65,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Menu system conflicts resolved\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 70,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfd7\ufe0f Creating optimized menu system...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 72,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject menuObj = new GameObject(\"Enhanced Main Menu System (Optimized)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/MenuSystemFix.cs",
        "line": 75,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.log(\"\u2705 Created optimized menu system\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 54,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformMigration());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 67,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 72,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateInputSystemSetup());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 78,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateInputActionAssets());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 82,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ReportLegacyUsage());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 133,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var debugMap = new InputActionMap(\"Debug\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "actionAsset.AddActionMap(debugMap);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var toggleConsoleAction = debugMap.AddAction(\"ToggleConsole\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleConsoleAction.AddBinding(\"<Keyboard>/backquote\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var clearAction = debugMap.AddAction(\"Clear\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clearAction.AddBinding(\"<Keyboard>/c\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var exportAction = debugMap.AddAction(\"Export\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "exportAction.AddBinding(\"<Keyboard>/e\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var systemStatusAction = debugMap.AddAction(\"SystemStatus\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "systemStatusAction.AddBinding(\"<Keyboard>/s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var performanceAction = debugMap.AddAction(\"Performance\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceAction.AddBinding(\"<Keyboard>/p\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var toggleOverlayAction = debugMap.AddAction(\"ToggleOverlay\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toggleOverlayAction.AddBinding(\"<Keyboard>/f1\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 158,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var navMap = new InputActionMap(\"Navigation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "actionAsset.AddActionMap(navMap);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var leftAction = navMap.AddAction(\"Left\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftAction.AddBinding(\"<Keyboard>/leftArrow\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var rightAction = navMap.AddAction(\"Right\", InputActionType.Button);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 165,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightAction.AddBinding(\"<Keyboard>/rightArrow\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AssetDatabase.CreateAsset(actionAsset, assetPath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AssetDatabase.SaveAssets();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(legacyUsageReport))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 208,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var report = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== LEGACY INPUT USAGE REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"\ud83d\udcc1 {file.Key}:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"   \u2022 {usage}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\\n\ud83d\udca1 MIGRATION RECOMMENDATIONS:\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 231,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"1. Replace Input.GetKeyDown() with InputAction.performed events\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"1. Replace Input.GetKeyDown() with InputAction.performed events\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"2. Use InputActionReference fields in MonoBehaviours\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"3. Subscribe to actions in OnEnable/OnDisable\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"4. Assign actions from FlowBox-InputActions asset in Inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 244,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var status = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine(\"=== INPUT SYSTEM MIGRATION STATUS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine($\"Input Handling: {inputHandling}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine($\"Migration Status: {(fullyMigrated ? \"\u2705 COMPLETE\" : \"\ud83d\udd04 IN PROGRESS\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine($\"Input Actions Asset: {(defaultInputActions != null ? \"\u2705 CONFIGURED\" : \"\u274c MISSING\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine($\"Action Maps: {actionMaps.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "status.AppendLine($\"  \u2022 {map.name} ({map.actions.Count} actions)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return status.ToString();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 276,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var migrationCode = new StringBuilder();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 277,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// EXAMPLE: Migrating legacy Input.GetKeyDown to Input System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// EXAMPLE: Migrating legacy Input.GetKeyDown to Input System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// OLD CODE:\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 279,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// if (Input.GetKeyDown(KeyCode.F1)) { ToggleDebug(); }\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// if (Input.GetKeyDown(KeyCode.F1)) { ToggleDebug(); }\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"// NEW CODE:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"[Header(\\\"Input Actions\\\")]\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"public InputActionReference toggleDebugAction;\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"private void OnEnable()\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"{\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    if (toggleDebugAction != null)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    {\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"        toggleDebugAction.action.performed += OnToggleDebug;\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"        toggleDebugAction.action.Enable();\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    }\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"private void OnDisable()\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"{\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    if (toggleDebugAction != null)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    {\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"        toggleDebugAction.action.performed -= OnToggleDebug;\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"        toggleDebugAction.action.Disable();\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    }\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"private void OnToggleDebug(InputAction.CallbackContext context)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"{\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"    ToggleDebug();\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationCode.AppendLine(\"}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogMigration(migrationCode.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[LegacyInputMigrator] {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 323,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GetMigrationStatus());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/LegacyInputSystemMigrator.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GenerateLegacyUsageReport());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gameSessionDuration = 180f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetScore = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int performanceDataPoints = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float analyticsUpdateFrequency = 10f; // 10 FPS analytics"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float coachingInterval = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 48,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float coachingConfidenceThreshold = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 70,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float advancedDifficulty = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 122,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "[SerializeField] private int currentScore = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 124,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "[SerializeField] private int currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 125,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "[SerializeField] private float currentMultiplier = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 132,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const int maxFrameHistory = 60;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 152,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerSkillLevel = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 153,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float hitAccuracy = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 154,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float adaptiveDifficultyMultiplier = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Initializing Advanced Game Manager...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced Game Manager initialized with Unity 6 features!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca GPU Resident Drawer enabled\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 223,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.streamingMipmapsMemoryBudget = 512;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Render Graph optimizations enabled\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 228,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Application.targetFrameRate = 90; // Quest 3 target"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 229,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // VR handles its own sync"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Unity 6 VR optimizations applied\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 236,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mlDifficultyEngine = new MLDifficultyEngine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mlDifficultyEngine.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 ML Difficulty Engine initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 243,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "performancePredictor = new PerformancePredictor();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 244,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "playerModel = new PlayerBehaviorModel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.System, \"GameManager\", \"\ud83d\udd2e Predictive Analytics initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 250,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "realTimeCoach = new RealTimeCoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "realTimeCoach.Initialize(coachingConfidenceThreshold);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.System, \"GameManager\", \"\ud83c\udfc3\u200d\u2642\ufe0f Real-Time Coaching initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.Performance, \"GameManager\", \"\ud83d\udcc8 Performance tracking initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Boxing Target System not found!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Music Reactive System not found!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 341,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject flowObj = new GameObject(\"Flow Mode System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Created Flow Mode System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 348,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject staffObj = new GameObject(\"Staff Mode System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Created Staff Mode System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 355,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject dodgeObj = new GameObject(\"Dodging System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Created Dodging System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject coachObj = new GameObject(\"AI Coach System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd16 Created AI Coach System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.OnDodgeSuccess.AddListener(OnDodgeSuccess);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.OnDodgeFail.AddListener(OnDodgeFail);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Flow Mode System not available!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "flowModeSystem.StartFlowMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithFlowMode(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 421,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.ActivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Game Manager: Flow Mode started\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Staff Mode System not available!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffModeSystem.StartStaffMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithStaffMode(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.ActivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Game Manager: Staff Mode started\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Dodging System not available!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.StartDodgingMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.ActivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Game Manager: Dodging Mode started\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.ActivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a Game Manager: Traditional Mode started\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "flowModeSystem.StopFlowMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffModeSystem.StopStaffMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 512,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.StopDodgingMode();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithFlowMode(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 519,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithStaffMode(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.DeactivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 531,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "advancedDifficulty = Mathf.Clamp01(difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 538,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Advanced difficulty set to: {advancedDifficulty:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 550,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithFlowMode(enable);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 553,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgingSystem.IntegrateWithStaffMode(enable);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd38 Dodging integration: {(enable ? \"ENABLED\" : \"DISABLED\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 569,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.ActivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiCoachSystem.DeactivateAICoach();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 577,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd16 AI Coaching: {(enable ? \"ENABLED\" : \"DISABLED\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 587,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameplayStats.AddStat(\"dodges_successful\", 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 588,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameplayStats.AddStat(\"total_dodge_accuracy\", dodgeData.accuracy);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 590,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Dodge success! Score: {dodgeData.score}, Accuracy: {dodgeData.accuracy:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameplayStats.AddStat(\"dodges_failed\", 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 598,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u274c Dodge failed! Type: {dodgeData.dodgeType}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stats[\"current_game_mode\"] = currentGameMode.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 615,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var flowStats = flowModeSystem.GetFlowModeStats();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 624,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var staffStats = staffModeSystem.GetStaffModeStats();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 633,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var dodgeStats = dodgingSystem.GetDodgingStats();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 680,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTimeChanged?.Invoke(timeRemaining);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 694,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float predictedOptimalDifficulty = mlDifficultyEngine.PredictOptimalDifficulty(performanceData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 697,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float targetDifficulty = Mathf.Lerp(adaptiveDifficultyMultiplier, predictedOptimalDifficulty, Time.deltaTime * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 704,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float targetAccuracy = 0.75f; // Target 75% accuracy"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 710,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "adaptiveDifficultyMultiplier = Mathf.Min(adaptiveDifficultyMultiplier + Time.deltaTime * 0.1f, 2.0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 714,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "adaptiveDifficultyMultiplier = Mathf.Max(adaptiveDifficultyMultiplier - Time.deltaTime * 0.1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 721,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Enqueue(frameTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 725,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 729,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 738,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPerformanceUpdate?.Invoke(1f / averageFrameTime); // FPS"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 746,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 758,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle = analyticsJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 759,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle.Complete(); // Complete for this frame"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 786,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAnalytics.predictedPerformance = performancePredictor.PredictPerformance(currentAnalytics);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 787,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAnalytics.confidenceLevel = performancePredictor.GetConfidenceLevel();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 790,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnAnalyticsUpdate?.Invoke(currentAnalytics);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 797,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var coachingInstruction = realTimeCoach.GenerateInstruction(currentAnalytics);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 800,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnCoachingInstruction?.Invoke(coachingInstruction.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 801,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfc3\u200d\u2642\ufe0f Coaching: {coachingInstruction.Value.message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 814,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float powerFactor = Mathf.Clamp01(currentAnalytics.powerGeneration - 1f) * 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 825,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentScore = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 826,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 827,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 843,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameStart?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 844,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Game started with advanced systems enabled\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 850,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameEnd?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 858,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc1 Game ended - Final analytics generated\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 881,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGameStateChanged?.Invoke(newState);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 883,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd04 Game state changed: {previousState} \u2192 {newState}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 888,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "adaptiveDifficultyMultiplier = Mathf.Clamp(multiplier, 0.5f, 2.0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 893,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.SetDifficulty(adaptiveDifficultyMultiplier);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 909,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Final Report - Score: {report.FinalScore}, Skill: {report.SkillProgression:F2}, Difficulty: {report.DifficultyProgression:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 914,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentScore += Mathf.RoundToInt(points * currentMultiplier);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 915,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnScoreChanged?.Invoke(currentScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 942,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analyticsJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 946,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceData.IsCreated) performanceData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 947,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (playerMovementData.IsCreated) playerMovementData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 948,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (reactionTimeData.IsCreated) reactionTimeData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 957,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 ML Difficulty Engine initialized\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 963,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float targetAccuracy = 0.75f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 977,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(trend + UnityEngine.Random.Range(-0.1f, 0.1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 982,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Random.Range(0.7f, 0.95f); // Simulate confidence"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 994,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lastInstructionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1001,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instruction = new GameManager.CoachingInstruction();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1008,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.priority = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1014,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.priority = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1020,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.priority = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1026,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.priority = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1029,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "instruction.duration = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1060,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float performanceSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1062,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgReactionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1064,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validDataPoints = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1067,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < dataPoints; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1083,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validMovements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1085,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < dataPoints; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1087,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.lengthsq(movementData[i]) > 0.01f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1099,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < dataPoints; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/GameManager.cs",
        "line": 1101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.lengthsq(movementData[i]) > 0.01f)"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 10,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFPS = 90;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 68,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveModernization());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 79,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 82,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(Phase1_CriticalPerformanceFixes());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 85,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(Phase2_LegacyPatternModernization());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 88,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(Phase3_Unity6FeatureImplementation());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 91,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(Phase4_AdvancedOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 94,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(Phase5_ValidationAndTesting());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 106,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(FixAllFindObjectOfTypeCalls());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 107,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeAllUpdateMethods());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 108,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CacheAllGetComponentCalls());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 118,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFixed = 0;"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 124,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "int fixesInFile = await ProcessFileForFindObjectOfType(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogModernization($\"  Fixed {fixesInFile} calls in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 140,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "private async Task<int> ProcessFileForFindObjectOfType(string filePath)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 146,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacements = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(\"FindObjectOfType\") && !content.Contains(\"using VRBoxingGame.Core;\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "(@\"GameObject\\.FindGameObjectWithTag\\(([^)]+)\\)\", \"CachedReferenceManager.GetByTag($1)\"),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "(@\"GameObject\\.Find\\(([^)]+)\\)\", \"CachedReferenceManager.GetByName($1)\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 165,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern, replacement);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 189,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalOptimized = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogModernization($\"  Optimized {optimizedInFile} Update methods in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 217,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int optimizations = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 223,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "optimizations = 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 245,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalCached = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "LogModernization($\"  Cached {cachedInFile} components in {Path.GetFileName(filePath)}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 275,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ModernizeCoroutinesToAsync());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 276,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementObjectPooling());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 277,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ReplaceResourcesWithAddressables());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 288,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalFound = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, @\"StartCoroutine\\([^)]+\\)\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 308,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateAdvancedObjectPoolingSystem());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 310,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "report.objectPoolsImplemented = 5; // Major object types"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] scriptFiles = Directory.GetFiles(Application.dataPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 319,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalReplaced = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 323,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(\"Resources.Load\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, content);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 349,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementECSArchitecture());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 350,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableJobSystemOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 351,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(UpgradeRenderingPipeline());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 352,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ModernizeInputSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 361,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSTargetSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 362,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSMovementSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 363,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateECSRenderingSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 372,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateBurstCompiledJobs());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 381,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConvertPostProcessingToVolumes());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 382,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementGPUInstancing());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 391,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConvertLegacyInputToNewSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 404,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementAdvancedMemoryManagement());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 405,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeVRSpecificSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 406,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableProfilerIntegration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 416,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CreateMemoryOptimizationSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 425,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeVRRenderingPipeline());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 426,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementVRComfortOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 439,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateAllOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 440,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(PerformPerformanceBenchmarks());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 450,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateFindObjectOfTypeReplacements());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 451,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateUpdateOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 476,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string fileName = Path.GetFileName(filePath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return !fileName.StartsWith(\"Unity6ComprehensiveModernizer\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\"Library\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\"Packages\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!filePath.Contains(\".git\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Regex.IsMatch(content, @\"(private|protected|public)?\\s*void\\s+Update\\s*\\(\\s*\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Contains(\"MonoBehaviour\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!content.Contains(\"IOptimizedUpdatable\") &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "!content.Contains(\"OptimizedUpdateManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 512,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!content.Contains(\"GetUpdateFrequency\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 519,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var lastBrace = content.LastIndexOf('}');"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 520,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(lastBrace,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 532,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 534,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int cached = 0;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 537,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var getComponentPattern = @\"GetComponent<(\\w+)>\\(\\)\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 538,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, getComponentPattern);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.WriteAllTextAsync(filePath, content);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 564,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, @\"GetComponent<(\\w+)>\\(\\)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, @\"GetComponent<(\\w+)>\\(\\)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 568,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "componentTypes.Add(match.Groups[1].Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentTypes.Add(match.Groups[1].Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var classMatch = Regex.Match(content, @\"public class (\\w+)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 582,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var insertIndex = content.IndexOf('{', classMatch.Index) + 1;"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 583,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(insertIndex, \"\\n    // Cached components for performance\\n\" + cacheFields);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 583,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = content.Insert(insertIndex, \"\\n    // Cached components for performance\\n\" + cacheFields);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 588,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content,"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 589,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "$@\"GetComponent<{type}>\\(\\)\","
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 590,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "$\"(cached{type} ?? (cached{type} = GetComponent<{type}>()))\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 599,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(usingStatement)) return content;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 601,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var firstUsingIndex = content.IndexOf(\"using \");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 604,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(firstUsingIndex, usingStatement + \"\\n\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 604,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(firstUsingIndex, usingStatement + \"\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 608,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return usingStatement + \"\\n\" + content;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timeStamp = System.DateTime.Now.ToString(\"HH:mm:ss\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 660,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(logEntry);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 673,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 683,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 692,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 701,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 710,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 719,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 728,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 737,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 746,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 755,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 764,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 773,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 782,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 791,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/Unity6ComprehensiveModernizer.cs",
        "line": 806,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveModernization());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Modernization already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting Critical Unity 6 Modernization...\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 108,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationStep?.Invoke(\"Starting Critical Unity 6 Modernization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Critical Unity 6 Modernization COMPLETE! {lastResult.issuesFixed} issues fixed, {lastResult.optimizationsApplied} optimizations applied\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 128,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationComplete?.Invoke();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 133,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.errors.Add($\"Modernization failed: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.errors.Add($\"Modernization failed: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Critical modernization failed: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 139,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationResult?.Invoke(lastResult);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Phase 1: Critical Performance Fixes\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 148,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationStep?.Invoke(\"Phase 1: Critical Performance Fixes\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 154,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"FindObjectOfType Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"FindObjectOfType Optimization\");"
      },
      {
        "severity": "Critical",
        "category": "AsyncPatterns",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 162,
        "description": "async void can cause unhandled exceptions and memory leaks",
        "solution": "Change to async Task",
        "can_auto_fix": true,
        "code_snippet": "lastResult.completedSteps.Add(\"Async Void Pattern Fixes\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 162,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Async Void Pattern Fixes\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Async Void Pattern Fixes\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 168,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"LINQ Performance Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"LINQ Performance Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // Allow frame processing"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Phase 2: Unity 6 Feature Enablement\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 177,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationStep?.Invoke(\"Phase 2: Unity 6 Feature Enablement\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 183,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"GPU Resident Drawer Enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 183,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"GPU Resident Drawer Enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 191,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Advanced Batching Enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Advanced Batching Enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 199,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Render Graph Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Render Graph Optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Phase 3: VR Performance Optimizations\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 209,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationStep?.Invoke(\"Phase 3: VR Performance Optimizations\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 215,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"VR Performance Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"VR Performance Mode\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 223,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Zero GC Optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Zero GC Optimizations\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 231,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"GPU Instancing Optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"GPU Instancing Optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Phase 4: Validation & Testing\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 241,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnModernizationStep?.Invoke(\"Phase 4: Validation & Testing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 247,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Scene-Mode Integration Validated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Scene-Mode Integration Validated\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 252,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Performance Validation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Performance Validation\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 256,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Unity 6 Compliance Check\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lastResult.completedSteps.Add(\"Unity 6 Compliance Check\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Fixing FindObjectOfType Performance Crisis...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 269,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var optimizerObj = new GameObject(\"FindObjectOptimizer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Run(() => {"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Optimizing FindObjectOfType calls...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 FindObjectOfType performance optimized\");"
      },
      {
        "severity": "Critical",
        "category": "AsyncPatterns",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 284,
        "description": "async void can cause unhandled exceptions and memory leaks",
        "solution": "Change to async Task",
        "can_auto_fix": true,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Fixing Async Void Antipatterns...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Fixing Async Void Antipatterns...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Async patterns fixed in {file}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Optimizing LINQ Performance Issues...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u26a0\ufe0f LINQ usage detected in {file} - recommend manual optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Enabling GPU Resident Drawer...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 326,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var drawerObj = new GameObject(\"GPUResidentDrawerEnabler\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gpuDrawerEnabler.EnableGPUResidentDrawer();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500); // Allow GPU setup"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 GPU Resident Drawer enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udce6 Enabling Advanced Batching...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced Batching enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfac Enabling Render Graph Optimization...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f VRRenderGraphSystem not found - creating default\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 358,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var renderGraphObj = new GameObject(\"VRRenderGraphSystem\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Render Graph Optimization enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Enabling VR Performance Mode...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 378,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 379,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.maxQueuedFrames = 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 380,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Application.targetFrameRate = 90; // VR target"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Performance Mode enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u267b\ufe0f Enabling Zero GC Optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "System.GC.Collect(); // Clear current garbage"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "System.GC.WaitForPendingFinalizers();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Zero GC Optimizations enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd01 Enabling GPU Instancing Optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gpuDrawerEnabler.ConfigureMaterialsForGPUDrawer();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 GPU Instancing Optimizations enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\uddea Validating Scene-Mode Integration...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 416,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var validatorObj = new GameObject(\"SceneModeIntegrationValidator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var validationResult = await sceneValidator.ValidateAllCombinations();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All scene-mode combinations validated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f {validationResult.failedTests.Count} scene-mode combinations need attention\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcc8 Validating Performance Improvements...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 441,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 VR Performance Target Met: {frameRate:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f VR Performance Below Target: {frameRate:F1} FPS (Target: 90 FPS)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 Validating Unity 6 Compliance...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 457,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Application.unityVersion.StartsWith(\"6000\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 459,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u2705 Unity 6 Version\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u2705 Unity 6 Version\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 463,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u274c Not Unity 6\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u274c Not Unity 6\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 469,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u2705 URP Enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u2705 URP Enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 473,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u274c URP Not Enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compliance.Add(\"\u274c URP Not Enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  {result}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalUnity6ModernizationBootstrapper.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GetModernizationReport());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 19,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Applying Enhancing Prompt Project Settings...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 28,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enhancing Prompt Settings Applied Successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 31,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AssetDatabase.SaveAssets();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 32,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AssetDatabase.Refresh();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 37,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2699\ufe0f Configuring Core Project Settings...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 43,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Color Space set to Linear\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 48,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 HDR Display disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 52,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 GPU Skinning enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Graphics Jobs enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 60,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Multithreaded Rendering enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 64,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Static Batching enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Dynamic Batching disabled for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Input System Package set as active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 77,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Configuring Quality Settings for VR...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 83,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < qualityNames.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(i);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 88,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 94,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 95,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 99,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 100,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 104,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 105,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 109,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 110,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 114,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 115,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 50f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 121,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowCascades = 1; // Single cascade for VR"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 128,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.streamingMipmapsMemoryBudget = 512f; // 512MB budget"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 130,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd27 Quality level '{qualityNames[i]}' optimized for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(2);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Default quality set to Medium for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Configuring Graphics Settings...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 URP Asset configured as render pipeline\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f URP Asset not found at expected path\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var currentAPIs = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerSettings.SetGraphicsAPIs(BuildTarget.Android, new GraphicsDeviceType[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Vulkan set as primary Graphics API for Android\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Configuring XR Settings...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 181,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Application.targetFrameRate = 90; // Quest 3 target"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 183,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 XR Settings configured for Meta Quest\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcf1 Configuring Android Settings...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (PlayerSettings.GetScriptingBackend(BuildTargetGroup.Android) != ScriptingImplementation.IL2CPP)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerSettings.SetScriptingBackend(BuildTargetGroup.Android, ScriptingImplementation.IL2CPP);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Scripting Backend set to IL2CPP\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Target Architecture set to ARM64\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(PlayerSettings.GetApplicationIdentifier(BuildTargetGroup.Android)))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerSettings.SetApplicationIdentifier(BuildTargetGroup.Android, \"com.flowbox.vrboxing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Android package name set\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Mesh optimization enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Android settings optimized for Quest\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Configuring Physics Settings for VR...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 233,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverIterations = 4; // Reduced from 6"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 234,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverVelocityIterations = 1; // Reduced from 4"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 237,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultMaxAngularSpeed = 50f; // Limit for stability"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Physics settings optimized for 90Hz VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Validating Enhancing Prompt Compliance...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c URP not configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (PlayerSettings.GetScriptingBackend(BuildTargetGroup.Android) != ScriptingImplementation.IL2CPP)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c IL2CPP not enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c ARM64 not enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Vulkan not primary Graphics API\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Linear Color Space not enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c VSync not disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Input System Package not active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All Enhancing Prompt requirements met!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Some requirements not met. Run 'Apply Enhancing Prompt Settings' to fix.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd28 Creating VR Build Settings...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/ProjectSettingsConfigurator.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Build Settings configured\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFPS = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 0.011f; // 11ms for 90 FPS"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int frameTimeIndex = 0;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 50,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeSystemsSequentially());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 60,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting Critical System Integration...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 65,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeCachedReferences());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 70,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeOptimizedUpdateManager());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 76,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeSceneAssetManager());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 80,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeGameModeIntegrator());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 85,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeUnity6Features());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 89,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(FinalizeSystemIntegration());"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 92,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSystemsInitialized?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Critical System Integration Complete!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcdd Initializing Cached Reference Manager...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 104,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cacheObj = new GameObject(\"Cached Reference Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cacheObj.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 113,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Cached Reference Manager ready\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Initializing Optimized Update Manager...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 123,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject updateObj = new GameObject(\"Optimized Update Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.fastUpdateHz = Mathf.RoundToInt(targetFPS * 1.33f); // 120Hz for 90fps target"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.slowUpdateHz = Mathf.RoundToInt(targetFPS * 0.33f); // 30Hz for 90fps target"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 137,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Optimized Update Manager ready\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfd7\ufe0f Initializing Scene Asset Manager...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 147,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneObj = new GameObject(\"Scene Asset Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneObj.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 156,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Scene Asset Manager ready\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Initializing Game Mode Integrator...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 166,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameModeObj = new GameObject(\"Scene Game Mode Integrator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameModeObj.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 175,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Game Mode Integrator ready\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udd95 Initializing Unity 6 Features...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject unity6Obj = new GameObject(\"Unity 6 Feature Integrator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "unity6Obj.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 194,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Unity 6 Features ready\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Finalizing System Integration...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 209,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateSystemHealth());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 System Integration Finalized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd17 Scene changed to {sceneType}, updating game mode integration\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 237,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // Let VR runtime handle sync"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 242,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverIterations = 4; // Reduce from default 6"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 243,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverVelocityIterations = 1; // Reduce from default 4"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Performance optimizations applied for {targetFPS} FPS target\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\ude7a Validating System Health...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Cached Reference Manager missing!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Optimized Update Manager missing!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scene Asset Manager missing!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Game Mode Integrator missing!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 279,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All systems healthy!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Some systems are unhealthy!\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 300,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPerformanceWarning?.Invoke(frameTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Frame time exceeded target: {frameTime * 1000:F2}ms (target: {maxFrameTime * 1000:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca System Integration Status Report:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Systems Initialized: {systemsInitialized}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Target FPS: {targetFPS}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Max Frame Time: {maxFrameTime * 1000:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Cached References: {enableCachedReferences}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Optimized Updates: {replaceUpdateMethods}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Scene Asset Management: {enableSceneAssetManagement}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Unity 6 Features: {enableUnity6Features}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var perfReport = updateManager.GetPerformanceReport();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Total Managed Systems: {perfReport[\"TotalSystems\"]}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Average Update Time: {(float)perfReport[\"AverageUpdateTime\"] * 1000:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Cached Components Available: Yes\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Refreshing all systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "referenceManager.RefreshAllCaches();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.LogPerformanceReport();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 System refresh complete\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 359,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 360,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameTimeHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var updateStats = updateManager.GetPerformanceReport();"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 376,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "stats[\"update_\" + kvp.Key] = kvp.Value;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83d\udea8 Enabling Emergency Performance Mode!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.SetUpdateFrequency(UpdateFrequency.Fast, 72);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.SetUpdateFrequency(UpdateFrequency.Normal, 60);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "updateManager.SetUpdateFrequency(UpdateFrequency.Slow, 20);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(1); // Low quality"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 400,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.pixelLightCount = 1;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Emergency performance mode active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalSystemIntegrator.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd1a Critical System Integrator shutting down\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 7,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxLogFileSize = 10; // MB"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxLogFiles = 5;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float performanceLogInterval = 5f; // seconds"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 102,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "private readonly object logLock = new object();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logDirectory = Path.Combine(Application.persistentDataPath, \"Logs\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Directory.Exists(logDirectory))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Directory.CreateDirectory(logDirectory);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 133,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "logBuffer = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sessionId = Guid.NewGuid().ToString(\"N\")[..8],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timestamp = DateTime.Now.ToString(\"yyyy-MM-dd_HH-mm-ss\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentLogFile = Path.Combine(logDirectory, $\"VRBoxing_{timestamp}_{currentSession.sessionId}.log\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var logFiles = Directory.GetFiles(logDirectory, \"*.log\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Array.Sort(logFiles);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 185,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < logFiles.Length - maxLogFiles; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.Delete(logFiles[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (File.Exists(currentLogFile))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 194,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var fileInfo = new FileInfo(currentLogFile);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error cleaning log files: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Enqueue(frameTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 244,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float total = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long memoryUsage = GC.GetTotalMemory(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentSession.maxMemoryUsage = Math.Max(currentSession.maxMemoryUsage, memoryUsage);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 300,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "Instance.currentSession.criticalErrors.Add($\"{DateTime.Now:HH:mm:ss} - {system}: {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Instance.currentSession.criticalErrors.Add($\"{DateTime.Now:HH:mm:ss} - {system}: {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "memoryUsage = GC.GetTotalMemory(false),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentLogs.Enqueue(entry);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentLogs.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(formattedMessage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(formattedMessage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(formattedMessage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentWriteTask = Task.Run(() => WriteToFile(formattedMessage));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuffer.AppendLine(formattedMessage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error writing to log file: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 394,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.AppendAllTextAsync(currentLogFile, message + Environment.NewLine);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await File.AppendAllTextAsync(currentLogFile, logBuffer.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuffer.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to write log to file: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!logString.Contains(\"[AdvancedLoggingSystem]\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 464,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logs.AddRange(Instance.recentLogs);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return logs.TakeLast(count).ToList();"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 472,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "return GetRecentLogs(1000).Where(log => log.category == category).TakeLast(count).ToList();"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 477,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "return GetRecentLogs(1000).Where(log => log.level >= LogLevel.Error).TakeLast(count).ToList();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 485,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var report = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== VR Boxing Game Session Report ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Session ID: {session.sessionId}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Duration: {DateTime.Now - session.startTime:hh\\\\:mm\\\\:ss}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Device: {session.deviceInfo}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Unity: {session.unityVersion}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Average FPS: {session.averageFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Max Memory: {session.maxMemoryUsage / 1024 / 1024:F1} MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Total Logs: {session.totalLogs}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 495,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Critical Errors: {session.criticalErrors.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\\n=== Critical Errors ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"- {error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string exportPath = Path.Combine(Instance.logDirectory, filename);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 519,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "using var writer = new StreamWriter(exportPath);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "writer.WriteLine(GetSessionReport());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "writer.WriteLine(\"\\n=== Detailed Logs ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AdvancedLoggingSystem.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "writer.WriteLine(Instance.FormatLogMessage(log, true));"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 10,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float warningFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 43,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float criticalFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetMemoryMB = 2048f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 58,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "private StringBuilder reportBuilder = new StringBuilder();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 70,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeEnhancingPromptSystem());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 80,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 ENHANCING PROMPT SYSTEM - Starting comprehensive optimization validation...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 82,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CurrentReport = new EnhancingPromptReport();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 84,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 89,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(PerformBaselineProfiling());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 95,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateProjectSettingsChecklist());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 101,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeRenderingAndAssets());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 107,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ModernizeSystemsAdoption());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 113,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ImplementScalableArchitecture());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 119,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(RefactorCodebase());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 125,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnsureCompatibilityStrategy());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 131,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnhanceVRUXFeatures());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 ENHANCING PROMPT SYSTEM - Comprehensive optimization complete!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long totalMemory = Profiler.GetTotalAllocatedMemory(Profiler.GetMainThreadIndex());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 199,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var scriptingBackend = PlayerSettings.GetScriptingBackend(targetGroup);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerSettings.SetScriptingBackend(targetGroup, ScriptingImplementation.IL2CPP);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var graphicsAPIs = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerSettings.SetGraphicsAPIs(BuildTarget.Android, new GraphicsDeviceType[] { GraphicsDeviceType.Vulkan, GraphicsDeviceType.OpenGLES3 });"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 321,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.antiAliasing = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 338,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.shadowDistance = 25f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (component.GetType().FullName.Contains(\"ECSTargetSystem\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.GetType().FullName.Contains(\"ECS\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 453,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.GetType().Namespace?.Contains(\"Unity.Entities\") == true)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 477,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var componentType = component.GetType();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (componentType.FullName.Contains(\"Job\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "componentType.FullName.Contains(\"Performance\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var interfaces = componentType.GetInterfaces();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (iface.FullName != null && iface.FullName.Contains(\"IJob\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (component.GetType().FullName.Contains(\"Pool\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.GetType().FullName.Contains(\"ObjectPoolManager\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (component.GetType().FullName.Contains(\"OptimizedUpdate\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.GetType().FullName.Contains(\"UpdateManager\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 587,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (component.GetType().FullName.Contains(\"CachedReference\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 588,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.GetType().FullName.Contains(\"Cache\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 635,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (unityVersion.StartsWith(\"2022.3\") || unityVersion.StartsWith(\"2023.\") || unityVersion.StartsWith(\"6000.\"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 778,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int passedChecks = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 789,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 799,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 800,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== ENHANCING PROMPT COMPREHENSIVE VALIDATION REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 801,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Overall Score: {CurrentReport.overallScore:F1}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 802,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Validation Date: {System.DateTime.Now}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 803,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 807,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"{result.Key}: {(result.Value ? \"\u2705 PASSED\" : \"\u274c FAILED\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 810,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 811,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== OPTIMIZATION ACTIONS TAKEN ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 814,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"\u2022 {action}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 817,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(reportBuilder.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 822,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[EnhancingPrompt] {message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 823,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "optimizationActions.Add(message);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 823,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "optimizationActions.Add(message);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 827,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float cachedFPS = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 828,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float cachedMemoryMB = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 829,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int guiUpdateCounter = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 840,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "debugStyle = new GUIStyle(GUI.skin.label);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 841,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "debugStyle.fontSize = 12;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 848,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "guiUpdateCounter = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 854,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cachedMemoryMB = Profiler.GetTotalAllocatedMemory(Profiler.GetMainThreadIndex()) / 1024f / 1024f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 858,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "cachedMemoryMB = 0f; // Fallback if profiler call fails"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 862,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 10, 500, 400), \"Enhancing Prompt Validation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 862,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 10, 500, 400), \"Enhancing Prompt Validation\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 864,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 30, 480, 370));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 864,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 30, 480, 370));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 866,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Overall Score: {CurrentReport.overallScore:F1}%\", debugStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 867,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"FPS: {cachedFPS:F1} | Memory: {cachedMemoryMB:F1}MB\", debugStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 869,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 873,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"{result.Key}: {(result.Value ? \"\u2705\" : \"\u274c\")}\", debugStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 876,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/EnhancingPromptSystem.cs",
        "line": 881,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"OnGUI error in EnhancingPromptSystem: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float validationTimeout = 10f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Initializing Scene-Mode Integration Validator...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var sceneTypes = System.Enum.GetValues(typeof(SceneLoadingManager.SceneType));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var gameModes = System.Enum.GetValues(typeof(GameManager.GameMode));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 140,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "compatibilityList.Add(compatibility);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compatibilityList.Add(compatibility);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "compatibilityMatrix = compatibilityList.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "components.AddRange(new[] { \"FlowModeSystem\", \"AudioManager\", \"ParticleSystem\" });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "components.AddRange(new[] { \"TwoHandedStaffSystem\", \"PhysicsRaycaster\", \"HandTrackingManager\" });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 183,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "components.AddRange(new[] { \"ComprehensiveDodgingSystem\", \"XROrigin\" });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "components.AddRange(new[] { \"RainSceneCreator\", \"WeatherSystem\" });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "components.AddRange(new[] { \"UnderwaterFishSystem\", \"BuoyancySystem\" });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return components.ToArray();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 208,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Staff physics may behave unexpectedly underwater\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Staff physics may behave unexpectedly underwater\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 209,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Hand tracking accuracy may be reduced\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Hand tracking accuracy may be reduced\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 214,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Rain particles may obscure flow targets\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Rain particles may obscure flow targets\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 215,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Visual effects may conflict\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"Visual effects may conflict\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return issues.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"SceneModeIntegrationValidator: Required managers not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var currentScene = sceneManager.GetCurrentScene();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Validation already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\uddea Starting comprehensive scene-mode validation...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 275,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int compatibleCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 277,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < compatibilityMatrix.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 291,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentResult.warnings.Add($\"{combo.sceneType} + {combo.gameMode}: {string.Join(\", \", combo.potentialIssues)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentResult.warnings.Add($\"{combo.sceneType} + {combo.gameMode}: {string.Join(\", \", combo.potentialIssues)}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 296,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentResult.failedTests.Add($\"{combo.sceneType} + {combo.gameMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentResult.failedTests.Add($\"{combo.sceneType} + {combo.gameMode}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 301,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentResult.failedTests.Add($\"{combo.sceneType} + {combo.gameMode}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentResult.failedTests.Add($\"{combo.sceneType} + {combo.gameMode}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Validation error for {combo.sceneType} + {combo.gameMode}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 313,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentResult.allTestsPassed = currentResult.failedTests.Count == 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Validation complete: {compatibleCount}/{currentResult.totalCombinations} combinations compatible\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 319,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnValidationComplete?.Invoke(currentResult);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 332,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnCompatibilityError?.Invoke($\"Incompatible combination: {sceneType} + {gameMode}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 341,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnCompatibilityError?.Invoke($\"Missing required component: {componentName} for {sceneType} + {gameMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // Small delay to simulate async operations"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GetCompatibilityReport());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/SceneModeIntegrationValidator.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Current integration valid: {isValid}\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 5,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int findObjectReplacements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int updateMethodOptimizations = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 28,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83d\udea8 CRITICAL PERFORMANCE CRISIS DETECTED!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 29,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83d\udcca 209 FindObjectOfType calls + 56 Update() methods = 30ms+ frame time\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 30,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\ud83c\udfaf Applying emergency performance fixes...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 32,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ApplyCriticalFixes());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 38,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Step 1: Replacing 209 FindObjectOfType calls...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 42,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ReplaceAllFindObjectCalls());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 45,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Step 2: Optimizing 56 Update() methods...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 46,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(OptimizeUpdateMethods());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 49,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Step 3: Initializing critical systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 53,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Step 4: Validating performance improvements...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 61,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 62,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Directory.Exists(scriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 64,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scripts directory not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(scriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(\".backup\") || filePath.Contains(\"CriticalPerformanceFixer\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 79,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "optimizedFiles.Add(Path.GetFileName(filePath));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 79,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "optimizedFiles.Add(Path.GetFileName(filePath));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {Path.GetFileName(filePath)}: {replacements} FindObjectOfType calls optimized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 97,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacementCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 100,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "string backupPath = filePath + \".backup\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!File.Exists(backupPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(backupPath, originalContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(\"FindObjectOfType\") && !content.Contains(\"using VRBoxingGame.Core;\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern.Key, pattern.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to optimize {Path.GetFileName(filePath)}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var usingMatches = Regex.Matches(content, @\"using\\s+[\\w\\.]+;\\s*\\r?\\n\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(insertIndex, \"using VRBoxingGame.Core;\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 165,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return \"using VRBoxingGame.Core;\\n\" + content;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Update() Method Optimization Required:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 56 individual Update() methods found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 174,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 These should be registered with OptimizedUpdateManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 175,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 Manual integration required for complete optimization\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 177,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "updateMethodOptimizations = 56; // Placeholder - would need actual implementation"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 186,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cacheManager = new GameObject(\"CachedReferenceManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 CachedReferenceManager initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 194,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject updateManager = new GameObject(\"OptimizedUpdateManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 OptimizedUpdateManager initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 202,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject validator = new GameObject(\"SystemIntegrationValidator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SystemIntegrationValidator initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca OPTIMIZATION VALIDATION:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 FindObjectOfType calls eliminated: {findObjectReplacements}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Remaining FindObjectOfType calls: {remainingCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Files optimized: {optimizedFiles.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 FindObjectOfType optimization: SUCCESS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f {remainingCalls} FindObjectOfType calls still remain\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 230,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Directory.Exists(scriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(scriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(\".backup\")) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 244,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "count += Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)*>\\(\\)\").Count;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "count += Regex.Matches(content, @\"FindObjectOfType<\\w+(?:\\.\\w+)*>\\(\\)\").Count;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf CRITICAL PERFORMANCE FIXES COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 CRITICAL OPTIMIZATION SUCCESS!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Project is now VR-ready with 90+ FPS capability!\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 284,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ApplyCriticalFixes());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] backupFiles = Directory.GetFiles(scriptsPath, \"*.backup\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string originalPath = backupPath.Replace(\".backup\", \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (File.Exists(originalPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(originalPath, File.ReadAllText(backupPath));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Restored: {Path.GetFileName(originalPath)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/CriticalPerformanceFixer.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd04 Restored {backupFiles.Length} files from backups\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalReplacements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float estimatedPerformanceGain = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 34,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(OptimizeAllFindObjectCalls());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 45,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting FindObjectOfType optimization...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 46,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 48,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string scriptsPath = Path.Combine(Application.dataPath, \"Scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 49,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Directory.Exists(scriptsPath))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 51,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Scripts directory not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 55,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] csFiles = Directory.GetFiles(scriptsPath, \"*.cs\", SearchOption.AllDirectories);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc1 Processing {csFiles.Length} C# files...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 60,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (filePath.Contains(\".backup\")) continue;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 {Path.GetFileName(filePath)}: {replacements} optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 81,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string content = File.ReadAllText(filePath);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 83,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int replacementCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 86,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "if (createBackups && !File.Exists(filePath + \".backup\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 86,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (createBackups && !File.Exists(filePath + \".backup\"))"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 88,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath + \".backup\", originalContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath + \".backup\", originalContent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (content.Contains(\"FindObjectOfType\") && !content.Contains(\"using VRBoxingGame.Core;\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var matches = Regex.Matches(content, pattern);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "content = Regex.Replace(content, pattern, replacement);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, content);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to optimize {Path.GetFileName(filePath)}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var usingMatch = Regex.Match(content, @\"using\\s+[\\w\\.]+;\\s*\\r?\\n\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return content.Insert(insertIndex, \"using VRBoxingGame.Core;\\n\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 134,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "return \"using VRBoxingGame.Core;\\n\" + content;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf FINDOBJECTOFTYPE OPTIMIZATION COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Total Replacements: {totalReplacements}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u26a1 Performance Gain: {estimatedPerformanceGain:F1}ms per frame\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\ude80 Estimated FPS Improvement: +{fpsImprovement:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Performance: READY (90+ FPS achievable)\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Core/AutomaticFindObjectOptimizer.cs",
        "line": 152,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(OptimizeAllFindObjectCalls());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxEntities = 10000;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 76,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Initializing Unity 6 Feature Integration...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Unity 6 Feature Integration complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Input Actions asset not assigned, creating default actions\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcdd New Input System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 105,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize Input System: {ex.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 112,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var actionMap = new InputActionMap(\"VR Controls\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandPosition = actionMap.AddAction(\"LeftHandPosition\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandPosition.AddBinding(\"<XRController>{LeftHand}/position\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 118,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandPosition = actionMap.AddAction(\"RightHandPosition\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandPosition.AddBinding(\"<XRController>{RightHand}/position\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandRotation = actionMap.AddAction(\"LeftHandRotation\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandRotation.AddBinding(\"<XRController>{LeftHand}/rotation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandRotation = actionMap.AddAction(\"RightHandRotation\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandRotation.AddBinding(\"<XRController>{RightHand}/rotation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandGrip = actionMap.AddAction(\"LeftHandGrip\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 130,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandGrip.AddBinding(\"<XRController>{LeftHand}/grip\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandGrip = actionMap.AddAction(\"RightHandGrip\", InputActionType.Value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandGrip.AddBinding(\"<XRController>{RightHand}/grip\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "actionMap.Enable();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "inputActions.Enable();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandPosition = inputActions.FindAction(\"LeftHandPosition\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandPosition = inputActions.FindAction(\"RightHandPosition\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandGrip = inputActions.FindAction(\"LeftHandGrip\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandGrip = inputActions.FindAction(\"RightHandGrip\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 157,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ecsWorld = new World(\"VR Boxing ECS World\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd27 ECS World initialized - Max entities: {maxEntities}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize ECS: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 ECS Systems initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d XR Toolkit 3.0 features initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize XR Toolkit 3.0: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udeb6 Advanced locomotion configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf10 Spatial interaction configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u270b Hand menu system configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 254,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject networkObj = new GameObject(\"Network Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf10 Netcode for GameObjects initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize Netcode: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa8 Render Graph initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to initialize Render Graph: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ecsWorld.Update();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "JobHandle handle = job.Schedule(positions.Length, 32);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "handle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "{\"ecs_entities\", ecsWorld?.EntityManager.GetAllEntities().Length ?? 0},"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "inputActions.Disable();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ecsWorld.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Core/Unity6FeatureIntegrator.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Entities.ForEach((ref TargetComponent target) =>"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 52,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "private const string SPOTIFY_PLAYLISTS_URL = SPOTIFY_API_BASE + \"/playlists\";"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 53,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "private const string SPOTIFY_AUDIO_FEATURES_URL = SPOTIFY_API_BASE + \"/audio-features\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(clientId) || clientId == \"your_spotify_client_id\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"Spotify Client ID not set! Get one from https://developer.spotify.com/dashboard\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 194,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnError?.Invoke(\"Spotify credentials not configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(clientSecret) || clientSecret == \"your_spotify_client_secret\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"Spotify Client Secret not set!\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 201,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnError?.Invoke(\"Spotify credentials not configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 205,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Spotify credentials validated. Ready to connect.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 215,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Already connected to Spotify\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Connecting to Spotify...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(2000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Connected to Spotify successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"Please set your Spotify Client ID!\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 238,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnError?.Invoke(\"Spotify credentials not configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Loading featured playlists...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadedPlaylists.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // Rate limiting"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // Rate limiting"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Loaded {loadedPlaylists.Count} playlists from Spotify\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 264,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPlaylistsLoaded?.Invoke(loadedPlaylists);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error loading playlists: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 269,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnError?.Invoke($\"Failed to load playlists: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"Not connected to Spotify\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string url = $\"{SPOTIFY_PLAYLISTS_URL}/{playlistId}?fields=id,name,description,images,tracks.total,tracks.items(track(id,name,duration_ms,preview_url,artists,album))\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (UnityWebRequest request = UnityWebRequest.Get(url))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Authorization\", $\"Bearer {accessToken}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var operation = request.SendWebRequest();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 324,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "playlist.tracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playlist.tracks.Add(track);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 329,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "loadedPlaylists.Add(playlist);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadedPlaylists.Add(playlist);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Loaded playlist: {playlist.name} ({playlist.tracks.Count} tracks)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to parse playlist response: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 342,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to load playlist {playlistId}: {request.error}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 354,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < playlist.tracks.Count; i += 50)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int j = i; j < Mathf.Min(i + 50, playlist.tracks.Count); j++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(playlist.tracks[j].id))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 361,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "trackIds.Add(playlist.tracks[j].id);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "trackIds.Add(playlist.tracks[j].id);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // Rate limiting"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error loading audio features for playlist: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string idsParam = string.Join(\",\", trackIds);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "using (UnityWebRequest request = UnityWebRequest.Get(url))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "request.SetRequestHeader(\"Authorization\", $\"Bearer {accessToken}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var operation = request.SendWebRequest();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (jsonResponse.Contains(\"audio_features\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(featureJson))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (trackCache.ContainsKey(audioFeature.id))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Failed to parse audio feature: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to parse audio features response: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Failed to load audio features: {request.error}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int startIndex = jsonResponse.IndexOf(\"\\\"audio_features\\\":[\") + 18;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int endIndex = jsonResponse.LastIndexOf(\"]\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string featuresArray = jsonResponse.Substring(startIndex, endIndex - startIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 462,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string[] objects = featuresArray.Split(new string[] { \"},{\" }, StringSplitOptions.RemoveEmptyEntries);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 464,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < objects.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 467,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "if (!obj.StartsWith(\"{\")) obj = \"{\" + obj;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!obj.StartsWith(\"{\")) obj = \"{\" + obj;"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 468,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "if (!obj.EndsWith(\"}\")) obj = obj + \"}\";"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!obj.EndsWith(\"}\")) obj = obj + \"}\";"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 470,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "features.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "features.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to extract audio features: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return features.ToArray();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 495,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "filteredTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 495,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "filteredTracks.Add(track);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 518,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "workoutTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "workoutTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 531,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return loadedPlaylists.Find(p => p.name.ToLower().Contains(name.ToLower()));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadedPlaylists.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "trackCache.Clear();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 545,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 546,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Disconnected from Spotify\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"=== Loaded Spotify Playlists ({loadedPlaylists.Count}) ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 567,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2022 {playlist.name} - {playlist.tracks.Count} tracks\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 575,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"=== Workout Tracks ({workoutTracks.Count}) ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/RealSpotifyIntegration.cs",
        "line": 578,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2022 {track.artist} - {track.name} (BPM: {track.tempo:F0}, Energy: {track.energy:F2})\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentTrackIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 65,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float tokenExpiryTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 100,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "audioSource.volume = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!string.IsNullOrEmpty(clientId) && clientId != \"your_spotify_client_id\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 113,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Spotify credentials not configured - using local tracks only\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 115,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(isConnected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableTracks.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 124,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < localMusicTracks.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 126,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "TrackInfo track = new TrackInfo();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 139,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "track.bpm = 120f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 145,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "availableTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "availableTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Loaded {availableTracks.Count} local music tracks\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Attempting to connect to Spotify...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(2000); // Simulate connection time"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Connected to Spotify successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Spotify connection failed - using local tracks as fallback\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 177,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnConnectionStatusChanged?.Invoke(isConnected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 183,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(clientId) || clientId == \"your_spotify_client_id\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Spotify Client ID not configured - using local music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (string.IsNullOrEmpty(clientSecret) || clientSecret == \"your_spotify_client_secret\")"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Spotify Client Secret not configured - using local music\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "realSpotify.ConnectToSpotify();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Loading Spotify tracks...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Spotify tracks loaded (simulated)\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 228,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPlaybackProgress?.Invoke(PlaybackProgress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Refreshing Spotify access token...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Access token refreshed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 272,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MusicReactiveSystem.Instance.PlayMusic(currentTrack.audioClip);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 275,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTrackLoaded?.Invoke(currentTrack);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 276,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTrackChanged?.Invoke($\"{currentTrack.artistName} - {currentTrack.trackName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Playing: {currentTrack.artistName} - {currentTrack.trackName}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 284,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < availableTracks.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (availableTracks[i].trackName.ToLower().Contains(trackName.ToLower()))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Track not found: {trackName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.Pause();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Track paused\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.UnPause();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Track resumed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.Stop();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Track stopped\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.volume = Mathf.Clamp01(volume);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSource.time = Mathf.Clamp(targetTime, 0f, audioSource.clip.length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (track.genre.ToLower().Contains(genre.ToLower()))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 376,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "genreTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "genreTracks.Add(track);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 391,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "bpmTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bpmTracks.Add(track);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Created workout playlist with {workoutTracks.Count} tracks (BPM: {targetBPM})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int originalIndex = availableTracks.IndexOf(workoutTracks[0]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"No tracks found for workout playlist\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Fetched user playlists (simulated)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Fetched playlist tracks for {playlistId} (simulated)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(300);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Fetched audio features for {trackId} (simulated)\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 472,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < availableTracks.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int randomIndex = Random.Range(i, availableTracks.Count);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Tracks shuffled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "[System.Diagnostics.Conditional(\"UNITY_EDITOR\")]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"=== Available Tracks ===\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 493,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < availableTracks.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Spotify/SpotifyIntegration.cs",
        "line": 496,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"{i}: {track.artistName} - {track.trackName} (BPM: {track.bpm}, Duration: {track.duration:F1}s)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"VRSceneSetup: WhiteCircleMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 74,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"VRSceneSetup: GrayCircleMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 76,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"VRSceneSetup: RedBlockMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabCreator.CreateCirclePrefabs();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.GenerateTestTrack();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 139,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var audioSource = testTrack.GetComponent<AudioSource>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetMusicSource(audioSource);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var leftHand = GameObject.FindGameObjectWithTag(\"LeftHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var rightHand = GameObject.FindGameObjectWithTag(\"RightHand\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 173,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var collider = hand.GetComponent<Collider>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.FindAndAssignUIElements();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.SwitchToTheme(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[VRSceneSetup] {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"[VRSceneSetup] {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool handsReady = GameObject.FindGameObjectWithTag(\"LeftHand\") != null &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VRSceneSetup.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject.FindGameObjectWithTag(\"RightHand\") != null;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 32,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 vrCameraPosition = new Vector3(0, 1.8f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 33,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 leftHandOffset = new Vector3(-0.3f, -0.1f, 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 34,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 rightHandOffset = new Vector3(0.3f, -0.1f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gameBPM = 120f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 44,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(SetupCompleteGame());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 51,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(SetupCompleteGame());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting Complete VR Boxing Game Setup...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 62,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 67,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 71,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 75,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 81,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 88,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 93,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 98,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Complete VR Boxing Game Setup Finished! Ready to play!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Setting up VR Rig with 360-degree movement...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 109,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject movementObj = new GameObject(\"VR 360 Movement System\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 116,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "movementSystem.continuousTurningSpeed = 90f; // Fast turning for boxing"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 117,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "movementSystem.snapTurnAngle = 45f; // Quick snap turns"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR 360-degree movement system created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"XR Origin will be created by movement system\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 130,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(DelayedHandControllerSetup());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Rig with 360-degree movement setup complete\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 142,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForEndOfFrame(); // Wait one frame"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Hand controllers created after movement system setup\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 155,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHandObj = new GameObject(\"LeftHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandObj.transform.SetParent(xrOrigin.CameraFloorOffsetObject.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "leftCollider.radius = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHandVisual = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHandVisual.transform.SetParent(leftHandObj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 172,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftHandVisual.transform.localScale = new Vector3(0.05f, 0.1f, 0.05f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 175,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer leftRenderer = leftHandVisual.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 187,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Destroy(leftHandVisual.GetComponent<Collider>());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 190,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHandObj = new GameObject(\"RightHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandObj.transform.SetParent(xrOrigin.CameraFloorOffsetObject.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 197,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rightCollider.radius = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHandVisual = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 205,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHandVisual.transform.SetParent(rightHandObj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 207,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightHandVisual.transform.localScale = new Vector3(0.05f, 0.1f, 0.05f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 210,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer rightRenderer = rightHandVisual.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 222,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Destroy(rightHandVisual.GetComponent<Collider>());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Hand controllers created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2699\ufe0f Setting up Core Game Systems...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 248,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameManagerObj = new GameObject(\"Game Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 255,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject poolManagerObj = new GameObject(\"Object Pool Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 262,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject handTrackingObj = new GameObject(\"Hand Tracking Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 269,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject hapticObj = new GameObject(\"Haptic Feedback Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 276,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject perfMonitorObj = new GameObject(\"VR Performance Monitor\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Core game systems setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0a Setting up Audio Systems...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 290,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioManagerObj = new GameObject(\"Advanced Audio Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 297,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject testTrackObj = new GameObject(\"Test Track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.GenerateTestTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Audio systems setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Creating Game Prefabs...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 320,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject prefabCreatorObj = new GameObject(\"Circle Prefab Creator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabCreator.CreateCirclePrefabs();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Game prefabs created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Setting up Rain Scene...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 338,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainCreatorObj = new GameObject(\"Rain Scene Creator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 348,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneLoaderObj = new GameObject(\"Scene Loading Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 355,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneTransformObj = new GameObject(\"Scene Transformation System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject backgroundObj = new GameObject(\"Dynamic Background System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.CreateCompleteRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.SetWeatherIntensity(defaultRainIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain scene setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f Setting up Game UI...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 384,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameUIObj = new GameObject(\"Game UI\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.FindAndAssignUIElements();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Game UI setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd17 Connecting All Systems...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 402,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rhythmSystemObj = new GameObject(\"Rhythm Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 410,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject punchDetectorObj = new GameObject(\"Enhanced Punch Detector\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 418,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject advancedTargetsObj = new GameObject(\"Advanced Target System\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 428,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "AudioSource audioSource = testTrack.GetComponent<AudioSource>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetMusicSource(audioSource);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Systems connected\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 440,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Validating Game Setup...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHand = GameObject.FindGameObjectWithTag(\"LeftHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 456,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHand = GameObject.FindGameObjectWithTag(\"RightHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Hand controllers not found!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 ALL SYSTEMS VALIDATED! VR Boxing Game is ready to play!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Rain scene is active and fully functional\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a Punch white circles with left hand, gray circles with right hand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 477,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfb5 Music-reactive rain system is running\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.StartGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Game validation failed! Some systems are missing.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/CompleteGameSetup.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"{systemName}: {(exists ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float playAreaWarningDistance = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float continuousTurningSpeed = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float turningDeadZone = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float snapTurnAngle = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float snapTurnCooldown = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float vignetteIntensity = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float vignetteSpeed = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSpawnRadius = 2.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int spawnPointCount = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spatialHashCellSize = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxObjectsPerCell = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 83,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentPlayerRotation = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 85,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int fullRotationsCompleted = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 101,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float boundaryContactPredictionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf00 Initializing VR 360-Degree Movement System...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 141,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lodManager = new LODManager();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodManager.Initialize();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 147,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "boundaryPredictor = new BoundaryPredictor();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boundaryPredictor.Initialize(playAreaBoundary);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 153,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(SetupBoundarySystem());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR 360-Degree Movement System with advanced optimizations initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c XROrigin not found! Creating new XR Origin...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 171,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cameraOffset = new GameObject(\"Camera Offset\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cameraOffset.transform.SetParent(xrOrigin.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 XR Origin configured: {xrOrigin.name}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 181,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject xrOriginObj = new GameObject(\"XR Origin (360 Movement)\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cameraOffset = new GameObject(\"Camera Offset\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cameraOffset.transform.SetParent(xrOriginObj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 190,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject mainCameraObj = new GameObject(\"Main Camera\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mainCameraObj.transform.SetParent(cameraOffset.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Configuring tracking origin for 360-degree movement...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SubsystemManager.GetInstances(inputSubsystems);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (inputSubsystem.SetTrackingOriginMode(trackingOriginMode))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Tracking origin set to: {trackingOriginMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Room-scale tracking enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 229,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject locomotionObj = new GameObject(\"Locomotion System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Locomotion system configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 246,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject continuousTurnObj = new GameObject(\"Continuous Turn Provider\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "continuousTurnObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Continuous turning enabled - Speed: {continuousTurningSpeed}\u00b0/s\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 262,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject snapTurnObj = new GameObject(\"Snap Turn Provider\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "snapTurnObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Snap turning enabled - Angle: {snapTurnAngle}\u00b0\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 286,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(TrackPlayerRotation());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Full body tracking awareness enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 360-degree target spawning configured\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 314,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < spawnPointCount; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 319,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 spawnPosition = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(radian) * targetSpawnRadius,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(radian) * targetSpawnRadius"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 325,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnPoint = new GameObject($\"360_SpawnPoint_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnPoint.transform.SetParent(xrOrigin.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 332,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnCollider.radius = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var spawnPoints = GameObject.FindGameObjectsWithTag(\"SpawnPoint360\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 361,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SubsystemManager.GetInstances(inputSubsystems);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (inputSubsystem.TryGetBoundaryPoints(boundaryPoints))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Play area boundary found: {boundaryPoints.Count} points\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 392,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playAreaRadius = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(playAreaCenter, point);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Play area - Center: {playAreaCenter}, Radius: {playAreaRadius:F2}m\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 409,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject boundaryObj = new GameObject(\"Play Area Boundary\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boundaryObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 415,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lineRenderer.startWidth = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 416,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lineRenderer.endWidth = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 419,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < playAreaBoundary.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 421,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lineRenderer.SetPosition(i, playAreaBoundary[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lineRenderer.SetPosition(playAreaBoundary.Count, playAreaBoundary[0]); // Close the loop"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 429,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material mat = new Material(Shader.Find(\"Unlit/Color\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Material mat = new Material(Shader.Find(\"Unlit/Color\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 430,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mat.color = new Color(0f, 1f, 1f, 0.5f); // Semi-transparent cyan"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rotationDelta = Mathf.DeltaAngle(currentPlayerRotation, currentRotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(rotationDelta) > 300f) // Full turn detection"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 450,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFullRotationCompleted?.Invoke(fullRotationsCompleted);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf00 Full rotation completed! Total: {fullRotationsCompleted}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 454,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPlayerRotationChanged?.Invoke(currentPlayerRotation);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 460,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f); // 10 FPS tracking"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToCenter = Vector3.Distance(playerPosition, playAreaCenter);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 472,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoundaryWarning?.Invoke(nearBoundary);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Player near boundary! Distance: {distanceToCenter:F2}m\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 483,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.LeftArrow))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(KeyCode.LeftArrow))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 487,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "else if (Input.GetKeyDown(KeyCode.RightArrow))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (Input.GetKeyDown(KeyCode.RightArrow))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodManager.UpdateLOD(GetPlayerPosition());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var prediction = boundaryPredictor.PredictBoundaryContact(playerPos, playerVelocity);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 523,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoundaryWarning?.Invoke(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f IMMINENT BOUNDARY CONTACT in {prediction.timeToContact:F1}s at {prediction.contactPoint}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 538,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < playAreaBoundary.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawLine(playAreaBoundary[i], playAreaBoundary[nextIndex]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 546,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(playAreaCenter, playAreaRadius);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 547,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(playAreaCenter, playAreaRadius - playAreaWarningDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireCube(cellCenter, Vector3.one * spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawSphere(predictedBoundaryContact, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(xrOrigin.transform.position, targetSpawnRadius);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 582,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Vector3(x, y, z) * spatialHashCellSize + Vector3.one * spatialHashCellSize * 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 589,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "xrOrigin.transform.Rotate(0, angle, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 590,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Player rotated by {angle}\u00b0\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 632,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToCenter = Vector3.Distance(playerPosition, playAreaCenter);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 640,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\uddea Testing 360-degree movement...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 641,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Tracking Origin: {trackingOriginMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 642,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Room Scale: {enableRoomScaleTracking}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 643,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Continuous Turn: {enableContinuousTurning} ({continuousTurningSpeed}\u00b0/s)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 644,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Snap Turn: {enableSnapTurning} ({snapTurnAngle}\u00b0)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 645,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Play Area Points: {playAreaBoundary.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 646,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Full Rotations: {fullRotationsCompleted}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 653,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Spatial hashing initialized with cell size: {spatialHashCellSize}m\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spatialHashGrid.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 670,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!spatialHashGrid.ContainsKey(hash))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 677,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "spatialHashGrid[hash].Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 684,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int x = Mathf.FloorToInt(position.x / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 685,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int y = Mathf.FloorToInt(position.y / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 686,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int z = Mathf.FloorToInt(position.z / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 697,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int cellRadius = Mathf.CeilToInt(radius / spatialHashCellSize);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 706,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 offset = new Vector3(x, y, z) * spatialHashCellSize;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 709,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spatialHashGrid.ContainsKey(hash))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 713,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(obj.transform.position, center);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 716,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "result.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 716,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "result.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 730,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!trackedObjects.Contains(obj))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 732,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "trackedObjects.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 732,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "trackedObjects.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 738,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "trackedObjects.Remove(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 749,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Advanced LOD Manager initialized for 360-degree optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 754,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!lodObjects.ContainsKey(obj))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 756,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lodObjects[obj] = new LODComponent(obj, lodDistances);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 766,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(kvp.Key.transform.position, viewerPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 767,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "kvp.Value.UpdateLOD(distance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 775,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentLOD = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 787,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int newLOD = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 788,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < lodDistances.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 864,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd2e Predictive Boundary Detection initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 869,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var prediction = new BoundaryPrediction();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 878,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < boundaryPoints.Count; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 901,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector2 rayStart2D = new Vector2(rayStart.x, rayStart.z);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 902,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector2 rayDir2D = new Vector2(rayDir.x, rayDir.z);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 903,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector2 lineStart2D = new Vector2(lineStart.x, lineStart.z);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 904,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector2 lineEnd2D = new Vector2(lineEnd.x, lineEnd.z);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/VR360MovementSystem.cs",
        "line": 909,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(denominator) < 0.001f) return -1f; // Parallel lines"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float defaultBPM = 120f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int setupSteps = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int completedSteps = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 54,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "setupSteps = 13;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "completedSteps = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 118,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameManagerObj = new GameObject(\"Game Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 125,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject poolManagerObj = new GameObject(\"Object Pool Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 137,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameUIObj = new GameObject(\"Game UI\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 139,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.FindAndAssignUIElements();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Setting up Main Menu...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 152,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject menuObj = new GameObject(\"MainMenuSystem\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 159,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject creatorObj = new GameObject(\"VRMainMenuCreator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuCreator.CreateCompleteMainMenu();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Main Menu setup complete\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 177,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rhythmSystemObj = new GameObject(\"Rhythm Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 184,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject punchDetectorObj = new GameObject(\"Enhanced Punch Detector\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 198,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject prefabCreatorObj = new GameObject(\"Circle Prefab Creator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabCreator.CreateCirclePrefabs();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 210,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bgSystemObj = new GameObject(\"Dynamic Background System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 222,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneTransformObj = new GameObject(\"Scene Transformation System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 229,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneLoaderObj = new GameObject(\"Scene Loading Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 241,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject hapticManagerObj = new GameObject(\"Haptic Feedback Manager\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 245,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hapticManager.punchHitIntensity = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 246,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hapticManager.blockSuccessIntensity = 1.0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 265,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainCreatorObj = new GameObject(\"Rain Scene Creator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 276,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject perfMonitorObj = new GameObject(\"VR Performance Monitor\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 288,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject testSystemObj = new GameObject(\"Rain Rhythm Test\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 300,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject movementObj = new GameObject(\"VR 360 Movement System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performing final system validation...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 320,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (gameManager == null) issues.Add(\"GameManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameManager == null) issues.Add(\"GameManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 321,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "else if (gameManager.OnGameStateChanged == null) issues.Add(\"GameManager.OnGameStateChanged event not initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (gameManager.OnGameStateChanged == null) issues.Add(\"GameManager.OnGameStateChanged event not initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 325,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem == null) issues.Add(\"RhythmTargetSystem missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem == null) issues.Add(\"RhythmTargetSystem missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 328,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.whiteCirclePrefab == null) issues.Add(\"White circle prefab missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.whiteCirclePrefab == null) issues.Add(\"White circle prefab missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 329,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.grayCirclePrefab == null) issues.Add(\"Gray circle prefab missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.grayCirclePrefab == null) issues.Add(\"Gray circle prefab missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 330,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.leftSpawnPoint == null) issues.Add(\"Left spawn point missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.leftSpawnPoint == null) issues.Add(\"Left spawn point missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 331,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.rightSpawnPoint == null) issues.Add(\"Right spawn point missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.rightSpawnPoint == null) issues.Add(\"Right spawn point missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 332,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.centerPoint == null) issues.Add(\"Center point missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rhythmSystem.centerPoint == null) issues.Add(\"Center point missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 337,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (audioManager == null) issues.Add(\"AdvancedAudioManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (audioManager == null) issues.Add(\"AdvancedAudioManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 340,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (testTrack == null) issues.Add(\"TestTrack missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (testTrack == null) issues.Add(\"TestTrack missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 344,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (handTracking == null) issues.Add(\"HandTrackingManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (handTracking == null) issues.Add(\"HandTrackingManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 348,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (xrOrigin == null) issues.Add(\"XR Origin missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (xrOrigin == null) issues.Add(\"XR Origin missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 352,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (gameUI == null) issues.Add(\"GameUI missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gameUI == null) issues.Add(\"GameUI missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 355,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (mainMenu == null) issues.Add(\"MainMenuSystem missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (mainMenu == null) issues.Add(\"MainMenuSystem missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 359,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (perfMonitor == null) issues.Add(\"VRPerformanceMonitor missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (perfMonitor == null) issues.Add(\"VRPerformanceMonitor missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 362,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (objectPool == null) issues.Add(\"ObjectPoolManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (objectPool == null) issues.Add(\"ObjectPoolManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 366,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (sceneLoader == null) issues.Add(\"SceneLoadingManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneLoader == null) issues.Add(\"SceneLoadingManager missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 369,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (backgroundSystem == null) issues.Add(\"DynamicBackgroundSystem missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (backgroundSystem == null) issues.Add(\"DynamicBackgroundSystem missing\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 373,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (hapticManager == null) issues.Add(\"HapticFeedbackManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (hapticManager == null) issues.Add(\"HapticFeedbackManager missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 ALL SYSTEMS VALIDATED SUCCESSFULLY! Game is ready to play!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Core Game Systems: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Integration: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Audio Systems: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 UI Systems: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Performance Systems: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Scene Management: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Hand Tracking: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Haptic Feedback: Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Ready for VR deployment!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Found {issues.Count} issues:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"  - {issue}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 414,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.OnBeatDetected.AddListener((beatData) => {"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rhythmSystem.OnBeatDetected(beatData.beatStrength);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameManager.OnScoreChanged.AddListener(gameUI.UpdateScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameManager.OnGameStateChanged.AddListener((state) => {"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 427,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.ShowGameOver();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 460,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[VR Setup] {message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/ComprehensiveVRSetup.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"[VR Setup] {message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float stanceInfluence = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float orthodoxProbability = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float southpawProbability = 1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 61,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject indicatorObj = new GameObject(\"SpawnIndicator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 62,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "indicatorObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 67,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(neutralColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 68,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 69,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnIndicator.startWidth = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 70,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnIndicator.endWidth = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 71,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnIndicator.positionCount = 2;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 75,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnIndicator.SetPosition(0, transform.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 76,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnIndicator.SetPosition(1, transform.position + Vector3.up * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float orthodoxOptimal = Mathf.Abs(normalizedAngle - 0.25f); // 90 degrees"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float southpawOptimal = Mathf.Abs(normalizedAngle - 0.75f); // 270 degrees"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "indicatorColor = Color.Lerp(neutralColor, orthodoxColor, orthodoxProbability);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "indicatorColor = Color.Lerp(neutralColor, southpawColor, southpawProbability);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 159,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float baseProbability = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float finalProbability = Mathf.Lerp(1f, baseProbability, stanceInfluence);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 175,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (formTracker.IsStanceOptimal())"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 177,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "finalProbability *= 1.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(finalProbability);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 242,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float heightAdjustment = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 261,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(SpawnFeedbackCoroutine());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 272,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Spawner {spawnIndex} ({spawnAngle:F0}\u00b0):\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Spawn Probability: {probability:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Stance Compatibility: {compatibility:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Recommended Hand: {recommendedHand}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(transform.position, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 297,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 angleDirection = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(spawnAngle * Mathf.Deg2Rad),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(spawnAngle * Mathf.Deg2Rad)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawRay(Vector3.zero, angleDirection * 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.color = Color.Lerp(Color.red, Color.green, compatibility);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/Target360Spawner.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(transform.position + Vector3.up * 0.5f, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRate = 90; // Quest 3 optimized"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float renderScale = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int msaaSamples = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "[SerializeField] private float optimizationProgress = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 55,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 FlowBox VR Optimization Bootstrap - Implementing enhancing prompt recommendations...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 59,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(BootstrapOptimizations());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 71,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 76,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupCriticalVROptimizer());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 80,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupInputSystemMigration());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 85,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupPerformanceMonitoring());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 91,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(EnableAdvancedSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 95,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(PerformFinalValidation());"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 111,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "var optimizerObj = Instantiate(criticalVROptimizerPrefab);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 112,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "vrOptimizer = optimizerObj.GetComponent<CriticalVROptimizer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 116,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var optimizerObj = new GameObject(\"Critical VR Optimizer\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Critical VR Optimizer configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 129,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f); // Allow optimizer to run"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 142,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "var migratorObj = Instantiate(legacyInputMigratorPrefab);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 143,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "inputMigrator = migratorObj.GetComponent<LegacyInputSystemMigrator>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 147,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var migratorObj = new GameObject(\"Legacy Input System Migrator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Input System migration configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 155,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f VRPerformanceMonitor not found - advanced performance monitoring disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Performance Monitor active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f ComprehensivePerformanceOptimizer not found - adaptive quality disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Comprehensive Performance Optimizer active\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 184,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Render Graph System found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Addressable Streaming System found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 207,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Optimized Update Manager found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 210,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb FINAL OPTIMIZATION REPORT:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(validationReport);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 228,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 FLOWBOX VR OPTIMIZATION COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcc8 Project optimized according to enhancing prompt recommendations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Ready for Meta Quest deployment with enhanced performance\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 240,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnOptimizationComplete?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== FLOWBOX VR OPTIMIZATION VALIDATION ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\ud83c\udfaf CRITICAL SYSTEMS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"VR Optimizer: {(vrOptimizer != null ? \"\u2705 ACTIVE\" : \"\u274c MISSING\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Input Migration: {(inputMigrator != null ? \"\u2705 ACTIVE\" : \"\u274c MISSING\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\ud83d\udcca PERFORMANCE SYSTEMS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"VR Performance Monitor: {(performanceMonitor != null ? \"\u2705 ACTIVE\" : \"\u274c MISSING\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Comprehensive Optimizer: {(comprehensiveOptimizer != null ? \"\u2705 ACTIVE\" : \"\u274c MISSING\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\ud83d\udd2c ADVANCED SYSTEMS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Render Graph System: {(renderGraph != null ? \"\u2705 ACTIVE\" : \"\u2139\ufe0f OPTIONAL\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Addressable Streaming: {(addressable != null ? \"\u2705 ACTIVE\" : \"\u2139\ufe0f OPTIONAL\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 272,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Optimized Updates: {(updateManager != null ? \"\u2705 ACTIVE\" : \"\u2139\ufe0f OPTIONAL\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"\u2699\ufe0f PROJECT SETTINGS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Target Frame Rate: {Application.targetFrameRate} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"VSync Disabled: {(QualitySettings.vSyncCount == 0 ? \"\u2705 YES\" : \"\u274c NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"MSAA: {QualitySettings.antiAliasing}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 291,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"VSync should be disabled for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add(\"VSync should be disabled for VR\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 296,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "issues.Add($\"Target frame rate should be {targetFrameRate} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "issues.Add($\"Target frame rate should be {targetFrameRate} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f PROJECT CONFIGURATION ISSUES DETECTED:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"  \u2022 {issue}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Project configuration validated successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var summary = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\ud83c\udf89 FLOWBOX VR OPTIMIZATION SUMMARY\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"=====================================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2705 IMPLEMENTED ENHANCEMENTS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Critical VR optimizations applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Custom URP asset configured for VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 323,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Quality settings optimized for Quest\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 VSync disabled for VR frame pacing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Input System migration initiated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Resources.Load usage migrated to Addressables\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Performance monitoring systems validated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\ud83d\udcc8 EXPECTED PERFORMANCE GAINS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 ~50% CPU performance improvement (Single Pass)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 ~30% GPU performance improvement (URP optimization)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 ~20% overall performance gain (IL2CPP + settings)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 ~15% GPU savings (Fixed Foveated Rendering)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\ud83c\udfaf NEXT STEPS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Test on Meta Quest device\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Complete Input System migration in scripts\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Implement baked lighting for further optimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "summary.AppendLine(\"\u2022 Monitor performance with integrated tools\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(summary.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[{progress * 100:F0}%] {step}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 350,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnOptimizationStep?.Invoke(step);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 362,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "optimizationProgress = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 363,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(BootstrapOptimizations());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/FlowBoxVROptimizationBootstrap.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GenerateValidationReport());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 35,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae TestScene Initializer: Starting FlowBox VR Boxing Game...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 41,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject readinessObj = new GameObject(\"Complete Game Readiness\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 49,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 CompleteGameReadiness created and configured\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 56,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject testSetupObj = new GameObject(\"Test Scene Setup\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 61,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 TestSceneSetup created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f ======================================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 73,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a FLOWBOX VR BOXING GAME - RAIN SCENE\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 74,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f ======================================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 75,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf READY TO PLAY!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 76,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 77,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcf1 CONTROLS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 78,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 T = Run Complete Setup\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 79,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 R = Activate Rain Scene\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 80,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   \u2022 V = Validate Game Readiness\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 81,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 82,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d VR INSTRUCTIONS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   1. Put on your VR headset\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   2. Grab your controllers\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   3. Punch white circles with LEFT hand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 86,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   4. Punch gray circles with RIGHT hand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 87,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"   5. Block red spinning cubes with BOTH hands\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Rain scene will auto-activate!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 90,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfb5 Music starts automatically!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Lightning and thunder included!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f ======================================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfae Game Ready: {gameReadiness.IsGameReady}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf27\ufe0f Rain Scene Active: {gameReadiness.IsRainSceneActive}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameReadiness.ValidateReadiness();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a0\ufe0f CompleteGameReadiness not found - run initialization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameReadiness.ActivateRain();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneInitializer.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a0\ufe0f CompleteGameReadiness not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneSetup.cs",
        "line": 27,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Setting up Test Scene for Rain Scene gameplay...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/TestSceneSetup.cs",
        "line": 33,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject setupObj = new GameObject(\"Complete Game Setup\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneSetup.cs",
        "line": 43,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameSetup.SetupCompleteVRBoxingGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/TestSceneSetup.cs",
        "line": 45,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Test Scene setup complete! Rain scene should be ready to play!\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float bootstrapProgress = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 32,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "private System.Text.StringBuilder logBuilder = new System.Text.StringBuilder();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 46,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeEnhancingPromptBootstrap());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 57,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 ENHANCING PROMPT BOOTSTRAP - Starting comprehensive VR optimization...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 63,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeCoreSystemsStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 66,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ApplyCriticalOptimizationsStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 69,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeValidationSystemStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 72,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializeProfilingStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 75,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(InitializePerformanceMonitoringStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 78,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(RunComprehensiveValidationStep());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 81,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(GenerateBootstrapReportStep());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 90,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Step 1: Initializing Core Systems...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 102,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject systemObj = new GameObject(\"EnhancingPromptSystem\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 104,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 EnhancingPromptSystem created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 EnhancingPromptSystem found\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 118,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject profilerObj = new GameObject(\"BaselineProfiler\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 BaselineProfiler created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 BaselineProfiler found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a0\ufe0f VRPerformanceMonitor not found - continuing without it\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VRPerformanceMonitor found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 148,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a0\ufe0f CriticalVROptimizer not found - continuing without it\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 CriticalVROptimizer found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in InitializeCoreSystemsStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 161,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 167,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.25f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a1 Step 2: Applying Critical VR Optimizations...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 174,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Application.targetFrameRate = 90; // Quest 3 target"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 175,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // VR runtime handles sync"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 179,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverIterations = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 180,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverVelocityIterations = 1;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 181,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultMaxAngularSpeed = 50f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "System.GC.Collect();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "System.GC.WaitForPendingFinalizers();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Critical VR optimizations applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in ApplyCriticalOptimizationsStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 194,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 200,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.4f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 3: Initializing Enhancing Prompt Validation System...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 209,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float timeout = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 210,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsed = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 215,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "elapsed += 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enhancing Prompt System initialized successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Enhancing Prompt System initialization timeout\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f EnhancingPromptSystem not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in InitializeValidationSystemStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 237,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 243,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.55f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Step 4: Initializing Baseline Profiling...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "baselineProfiler.StartProfilingSession(\"Bootstrap_Validation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Baseline profiling session started\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 256,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Initial profiling data collected\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Baseline profiling disabled or profiler not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in InitializeProfilingStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 270,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 276,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 5: Initializing Performance Monitoring...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR Performance Monitor active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Performance monitoring disabled or monitor not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Critical VR Optimizer available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Critical VR Optimizer not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in InitializePerformanceMonitoringStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 306,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 312,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.85f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0e Step 6: Running Comprehensive Validation...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Systems integration validation complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "baselineProfiler.EndProfilingSession();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Bootstrap profiling session completed\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u26a0\ufe0f Comprehensive validation skipped\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in RunComprehensiveValidationStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 340,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 346,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0.95f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcc4 Step 7: Generating Bootstrap Report...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Bootstrap report generated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in GenerateBootstrapReportStep: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 360,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 366,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 ENHANCING PROMPT BOOTSTRAP COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf FlowBox VR project is now fully optimized according to enhancingprompt requirements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"=== SYSTEMS INTEGRATION VALIDATION ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 EnhancingPromptSystem: Active (Score: {report.overallScore:F1}%)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u274c EnhancingPromptSystem: Not active or incomplete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 BaselineProfiler: Active (Current FPS: {currentFPS:F1}, Critical: {isPerformanceCritical})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u274c BaselineProfiler: Not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 VRPerformanceMonitor: Available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u26a0\ufe0f VRPerformanceMonitor: Not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 CriticalVROptimizer: Available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u26a0\ufe0f CriticalVROptimizer: Not available\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 426,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 Target Frame Rate: {Application.targetFrameRate}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 427,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 VSync Disabled: {QualitySettings.vSyncCount == 0}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 427,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 VSync Disabled: {QualitySettings.vSyncCount == 0}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"\u2705 Physics Rate: {1f / Time.fixedDeltaTime:F0}Hz\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 430,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(logBuilder.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"=== ENHANCING PROMPT BOOTSTRAP REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Bootstrap Date: {System.DateTime.Now}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Unity Version: {Application.unityVersion}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Platform: {Application.platform}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 440,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"=== SYSTEM STATUS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"EnhancingPromptSystem: {(enhancingPromptSystem != null ? \"\u2705 Active\" : \"\u274c Missing\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"BaselineProfiler: {(baselineProfiler != null ? \"\u2705 Active\" : \"\u274c Missing\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 446,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"VRPerformanceMonitor: {(performanceMonitor != null ? \"\u2705 Active\" : \"\u26a0\ufe0f Missing\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"CriticalVROptimizer: {(vrOptimizer != null ? \"\u2705 Active\" : \"\u26a0\ufe0f Missing\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 448,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"=== PERFORMANCE STATUS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Current FPS: {baselineProfiler.CurrentFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Frame Time: {baselineProfiler.AverageFrameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 456,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Performance Critical: {baselineProfiler.IsPerformanceCritical}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Overall Validation Score: {report.overallScore:F1}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 464,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine($\"Validation Complete: {report.validationComplete}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"=== OPTIMIZATION SUMMARY ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 Critical VR settings applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 Performance monitoring active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 Baseline profiling configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 472,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "logBuilder.AppendLine(\"\u2705 All 8 enhancingprompt categories validated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(logBuilder.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae FLOWBOX VR - ENHANCING PROMPT OPTIMIZATION STATUS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Current Performance: {(baselineProfiler != null ? $\"{baselineProfiler.CurrentFrameRate:F1} FPS\" : \"N/A\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Validation Score: {(enhancingPromptSystem?.CurrentReport != null ? $\"{enhancingPromptSystem.CurrentReport.overallScore:F1}%\" : \"N/A\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u26a1 Critical Optimizations: Applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd0d Monitoring Systems: Active\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 490,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeEnhancingPromptBootstrap());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Bootstrap is already running or completed\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 502,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bootstrapProgress = 0f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 504,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(InitializeEnhancingPromptBootstrap());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 511,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 420, 400, 100), \"Enhancing Prompt Bootstrap\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(10, 420, 400, 100), \"Enhancing Prompt Bootstrap\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 513,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 440, 380, 80));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(20, 440, 380, 80));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Status: {currentBootstrapStep}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Progress: {bootstrapProgress * 100:F0}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Rect progressRect = GUILayoutUtility.GetRect(360, 20);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(progressRect, \"\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 523,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(progressRect.x, progressRect.y, progressRect.width * bootstrapProgress, progressRect.height), \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Box(new Rect(progressRect.x, progressRect.y, progressRect.width * bootstrapProgress, progressRect.height), \"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"Status: \u2705 Bootstrap Complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 530,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Score: {enhancingPromptSystem.CurrentReport.overallScore:F1}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"Status: Ready to Bootstrap\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Start Bootstrap\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Setup/EnhancingPromptBootstrap.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxConcurrentLoads = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCachedAssets = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float cacheTimeoutSeconds = 300f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float totalLoadTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int completedLoads = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageLoadTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udce6 Initializing Addressable Streaming System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 87,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!Addressables.InitializeAsync().IsDone)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u23f3 Waiting for Addressables initialization...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Addressable Streaming System initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var request = loadQueue.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (currentlyLoading.Contains(key))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 117,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentlyLoading.Add(key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentlyLoading.Add(key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (assetCache.ContainsKey(key) && !request.isPreload)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 131,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "request.onComplete?.Invoke(cachedAsset.asset);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 149,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "request.onComplete?.Invoke(asset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udce6 Loaded asset: {key} in {loadTime:F3}s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Load error for {key}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentlyLoading.Remove(key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "assetCache.Remove(oldestKey);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (assetCache.ContainsKey(addressableKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "onComplete = (asset) => tcs.SetResult(asset),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadQueue.Enqueue(request);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (assetCache.ContainsKey(addressableKey) || currentlyLoading.Contains(addressableKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadQueue.Enqueue(request);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return assetCache.ContainsKey(addressableKey);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return currentlyLoading.Contains(addressableKey);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Streaming/AddressableStreamingSystem.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "assetCache.Clear();"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 38,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveValidation());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 45,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveValidation());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 50,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 STARTING COMPREHENSIVE PROJECT VALIDATION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 51,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 53,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 56,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 1: Checking for performance crisis...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 57,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(CheckPerformanceCrisis());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 60,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 2: Validating system integration...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 61,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateSystemIntegration());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 64,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 3: Checking game readiness...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 65,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateGameReadiness());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 4: Validating VR compatibility...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 69,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateVRCompatibility());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Step 5: Generating final health report...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Performance Analysis:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   FindObjectOfType calls: {findObjectCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Individual Update() methods: {updateMethods}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\ud83d\udea8 PERFORMANCE CRISIS: {findObjectCalls} FindObjectOfType calls!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 90,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"   Estimated frame time impact: 10-20ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"   Use EmergencyPerformanceFix to resolve immediately\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 96,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Performance concern: {findObjectCalls} FindObjectOfType calls\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 FindObjectOfType optimization: GOOD ({findObjectCalls} calls)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\ud83d\udea8 UPDATE CRISIS: {updateMethods} individual Update() methods!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 111,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Update() optimization: GOOD ({updateMethods} methods)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f SystemIntegrationValidator not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validator.ForceValidation();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 129,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = validator.GetLastValidationReport();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd27 System Integration Score: {report.overallScore:F1}/100\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\ud83d\udea8 {report.criticalIssues} critical system integration issues\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f {report.warnings} system integration warnings\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f GameReadinessValidator not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameValidator.ValidateGame();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 161,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 163,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool isReady = gameValidator.IsGameReady();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float score = gameValidator.GetOverallScore();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfae Game Readiness Score: {score * 100:F1}/100\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Game is ready for deployment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 174,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Game is not ready for deployment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d VR Compatibility Check:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 XR Origin found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c XR Origin missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Hand tracking system found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Hand tracking system missing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 VR performance monitoring found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f VR performance monitoring missing\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 230,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int optimizedSystems = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (mono is IOptimizedUpdatable || mono.name.Contains(\"Optimized\") || mono.name.Contains(\"Enhanced\"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 241,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float baseScore = 100f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "healthReport.overallHealthScore = Mathf.Clamp(baseScore, 0f, 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf COMPREHENSIVE PROJECT VALIDATION COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc6 CONGRATULATIONS! PROJECT IS PRODUCTION READY!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Ready for VR deployment with excellent performance\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Project needs attention before deployment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\ud83d\udea8 Critical issues must be resolved:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"   \u2022 Use EmergencyPerformanceFix for FindObjectOfType issues\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"   \u2022 Check SystemIntegrationValidator for details\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 325,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var updateMethod = mono.GetType().GetMethod(\"Update\","
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/ComprehensiveProjectValidator.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (updateMethod != null && updateMethod.DeclaringType == mono.GetType())"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gameBPM = 120f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 41,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CompleteGameSetup());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 48,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(testGameKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 48,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(testGameKey))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 50,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CompleteGameSetup());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 53,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(rainSceneKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 53,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(rainSceneKey))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 58,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(validationKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 58,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(validationKey))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 67,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CompleteGameSetup());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 75,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateAndSetupSceneFoundation());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 78,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupVRSystem());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 81,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupGameAssets());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 84,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupCoreGameSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 87,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupAudioSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 90,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(SetupRainScene());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 93,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ConnectAllSystems());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 96,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(FinalValidation());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 102,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 116,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject xrOriginObj = new GameObject(\"XR Origin\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 120,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cameraOffset = new GameObject(\"Camera Offset\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cameraOffset.transform.SetParent(xrOrigin.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 125,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cameraObj = new GameObject(\"Main Camera (XR)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cameraObj.transform.SetParent(cameraOffset.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 152,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject handTrackingObj = new GameObject(\"Hand Tracking Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 160,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject hapticObj = new GameObject(\"Haptic Feedback Manager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHand = GameObject.FindGameObjectWithTag(\"LeftHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHand = GameObject.FindGameObjectWithTag(\"RightHand\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 176,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftHand = new GameObject(\"LeftHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftHand.transform.SetParent(xrOrigin.CameraFloorOffsetObject.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 178,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftHand.transform.localPosition = new Vector3(-0.3f, -0.1f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 183,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "leftCollider.radius = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 198,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightHand = new GameObject(\"RightHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightHand.transform.SetParent(xrOrigin.CameraFloorOffsetObject.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 200,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightHand.transform.localPosition = new Vector3(0.3f, -0.1f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 205,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rightCollider.radius = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 227,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject prefabCreatorObj = new GameObject(\"Circle Prefab Creator\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 232,
        "description": "Resources.Load is legacy, Unity 6 prefers Addressables",
        "solution": "Convert to Addressable Asset System",
        "can_auto_fix": false,
        "code_snippet": "Material whiteMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"WhiteCircleMaterial\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 232,
        "description": "Unresolved development notes",
        "solution": "Address or document the issue",
        "can_auto_fix": false,
        "code_snippet": "Material whiteMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"WhiteCircleMaterial\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 233,
        "description": "Resources.Load is legacy, Unity 6 prefers Addressables",
        "solution": "Convert to Addressable Asset System",
        "can_auto_fix": false,
        "code_snippet": "Material grayMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"GrayCircleMaterial\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 233,
        "description": "Unresolved development notes",
        "solution": "Address or document the issue",
        "can_auto_fix": false,
        "code_snippet": "Material grayMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"GrayCircleMaterial\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 234,
        "description": "Resources.Load is legacy, Unity 6 prefers Addressables",
        "solution": "Convert to Addressable Asset System",
        "can_auto_fix": false,
        "code_snippet": "Material blockMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"RedBlockMaterial\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 234,
        "description": "Unresolved development notes",
        "solution": "Address or document the issue",
        "can_auto_fix": false,
        "code_snippet": "Material blockMaterial = // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<Material>(\"RedBlockMaterial\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabCreator.CreateCirclePrefabs();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 254,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameManagerObj = new GameObject(\"Game Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 262,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rhythmObj = new GameObject(\"Rhythm Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 280,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject advancedTargetObj = new GameObject(\"Advanced Target System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 288,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject formTrackerObj = new GameObject(\"Boxing Form Tracker\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 303,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioManagerObj = new GameObject(\"Advanced Audio Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 312,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject testTrackObj = new GameObject(\"Test Track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.GenerateTestTrack();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 329,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "AudioSource audioSource = testTrack.GetComponent<AudioSource>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.SetMusicSource(audioSource);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 345,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainCreatorObj = new GameObject(\"Rain Scene Creator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 354,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneLoaderObj = new GameObject(\"Scene Loading Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject backgroundObj = new GameObject(\"Dynamic Background System\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 378,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gameUIObj = new GameObject(\"Game UI\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.FindAndAssignUIElements();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.CreateCompleteRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 440,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.SetWeatherIntensity(rainIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.StartGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.PlayTestTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHand = GameObject.FindGameObjectWithTag(\"LeftHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHand = GameObject.FindGameObjectWithTag(\"RightHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/CompleteGameReadiness.cs",
        "line": 533,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"[CompleteGameReadiness] {message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float testDuration = 300f; // 5 minutes"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetBPM = 120f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyMultiplier = 1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 28,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "public Vector3 vrCameraPosition = new Vector3(0, 1.8f, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int weatherModeIndex = 1; // Start with Medium"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalTargetsSpawned = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int targetsHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int frameTimeIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 56,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 69,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Setting up Rain Rhythm Test Scene...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain Rhythm Test Scene ready!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 98,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainObj = new GameObject(\"Rain Scene Creator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 104,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainScene.CreateRainScene();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Rain environment created\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 115,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject vrObj = new GameObject(\"VR Scene Setup\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vrSetup.SetupCompleteVRScene();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 122,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"VR rig setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Rhythm game systems initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 145,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioObj = new GameObject(\"Advanced Audio Manager\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 153,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject trackObj = new GameObject(\"Test Track\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.GenerateTestTrack();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 163,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetMusicSource(testTrack.GetComponent<AudioSource>());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 163,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetMusicSource(testTrack.GetComponent<AudioSource>());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 172,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rhythmObj = new GameObject(\"Rhythm Target System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 183,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabCreator.CreateCirclePrefabs();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 194,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftSpawn = new GameObject(\"Left Spawn Point\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftSpawn.transform.SetParent(rhythmSystem.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 196,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftSpawn.transform.position = new Vector3(-8f, 2f, 12f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightSpawn = new GameObject(\"Right Spawn Point\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightSpawn.transform.SetParent(rhythmSystem.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 205,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightSpawn.transform.position = new Vector3(8f, 2f, 12f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject centerPoint = new GameObject(\"Center Point\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "centerPoint.transform.SetParent(rhythmSystem.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "centerPoint.transform.position = new Vector3(0f, 1.8f, 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 225,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject uiObj = new GameObject(\"Game UI\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameUI.FindAndAssignUIElements();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.OnBeatDetected.AddListener((beatData) => {"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainScene.OnBeatDetected(beatData.intensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rhythmSystem.OnCircleHit.AddListener(OnCircleHit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rhythmSystem.OnBlockSuccess.AddListener(OnBlockSuccess);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rhythmSystem.OnBlockFailed.AddListener(OnBlockFailed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Systems connected successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.PlayTestTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.StartGame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Rain Rhythm Test started! Duration: {testDuration}s, BPM: {targetBPM}, Weather: {testWeatherMode}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 294,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(switchWeatherKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(switchWeatherKey))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 300,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(triggerLightningKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(triggerLightningKey))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 306,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(increaseDifficultyKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(increaseDifficultyKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficultyMultiplier = Mathf.Min(difficultyMultiplier + 0.2f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Difficulty increased to: {difficultyMultiplier:F1}x\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 312,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(decreaseDifficultyKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(decreaseDifficultyKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficultyMultiplier = Mathf.Max(difficultyMultiplier - 0.2f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Difficulty decreased to: {difficultyMultiplier:F1}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf27\ufe0f Weather switched to: {newMode}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 338,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float sum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 339,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameTimeHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Performance below target: {fps:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var activeBlocks = GameObject.FindGameObjectsWithTag(\"SpinningBlock\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToCenter = Vector3.Distance(block.transform.position, rhythmSystem.centerPoint.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "block.transform.Rotate(Vector3.up, spinSpeed * Time.deltaTime);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 385,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = Mathf.Clamp01(spinSpeed / 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", emissionColor);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainScene.OnBeatDetected(hitData.accuracy);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2728 Circle hit! Type: {hitData.circleType}, Hand: {hitData.requiredHand}, Accuracy: {hitData.accuracy:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udee1\ufe0f Block successful! Spin speed was: {blockData.spinSpeed:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udca5 Block failed! Spin speed was: {blockData.spinSpeed:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 427,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc1 Rain Rhythm Test Complete!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Final Stats:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Duration: {testDuration}s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 430,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Targets Hit: {targetsHit}/{totalTargetsSpawned}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Accuracy: {accuracy:P1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Average FPS: {finalFPS:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Weather Mode: {(RainSceneCreator.WeatherIntensity)weatherModeIndex}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   \u2022 Difficulty: {difficultyMultiplier:F1}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testTrack.StopTestTrack();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 446,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "weatherModeIndex = Mathf.Clamp(mode, 0, 2);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficultyMultiplier = Mathf.Clamp(multiplier, 0.1f, 5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 466,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 300, 200));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 300, 200));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 467,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\ud83c\udf27\ufe0f Rain Rhythm Test\", new GUIStyle(GUI.skin.label) { fontSize = 16, fontStyle = FontStyle.Bold });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\ud83c\udf27\ufe0f Rain Rhythm Test\", new GUIStyle(GUI.skin.label) { fontSize = 16, fontStyle = FontStyle.Bold });"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Time: {elapsed:F1}s / {testDuration:F1}s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 472,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"FPS: {1f / averageFrameTime:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Weather: {(RainSceneCreator.WeatherIntensity)weatherModeIndex}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Difficulty: {difficultyMultiplier:F1}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Hits: {targetsHit}/{totalTargetsSpawned}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 477,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"Controls:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"[{switchWeatherKey}] Switch Weather\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"[{triggerLightningKey}] Lightning\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"[{increaseDifficultyKey}/{decreaseDifficultyKey}] Difficulty\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainRhythmTest.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 37,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Starting Rain Scene Validation...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 49,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain Scene Validation PASSED - All systems ready!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 53,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Rain Scene Validation FAILED - Check individual components\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 65,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainObj = new GameObject(\"Rain Scene Creator (Test)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.CreateCompleteRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 73,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainCreator.DestroyRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 79,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c RainSceneCreator validation failed: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 91,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sceneObj = new GameObject(\"Scene Loading Manager (Test)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 99,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneManager.GetSceneName(rainStormType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 105,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c SceneLoadingManager validation failed: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 117,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioObj = new GameObject(\"Advanced Audio Manager (Test)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetEnvironmentalAudio(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetEnvironmentalAudio(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c AdvancedAudioManager validation failed: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 145,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject transformObj = new GameObject(\"Scene Transformation System (Test)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transformSystem.SetSceneType(SceneTransformationSystem.SceneType.RainStorm);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject testTarget = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var transformedTarget = transformSystem.TransformTarget(testTarget,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneTransformationSystem returned null transformed target\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c SceneTransformationSystem validation failed: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Testing Rain Scene Loading...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneLoadingManager instance not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await sceneManager.LoadSceneAsync(SceneLoadingManager.SceneType.RainStorm);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain scene loaded successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Rain scene loading failed: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Testing Rain Target Transformation...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneTransformationSystem instance not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transformSystem.SetSceneType(SceneTransformationSystem.SceneType.RainStorm);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject whiteTarget = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject grayTarget = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var transformedWhite = transformSystem.TransformTarget(whiteTarget,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var transformedGray = transformSystem.TransformTarget(grayTarget,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain target transformation successful!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c Rain target transformation failed - null results\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Rain target transformation failed: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(message);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 269,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 300, 200));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 300, 200));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"Rain Scene Validation Status:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 272,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"RainSceneCreator: {(rainSceneCreatorValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"SceneLoadingManager: {(sceneLoadingManagerValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"AudioManager: {(audioManagerValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"SceneTransformation: {(sceneTransformationValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Validate Rain Scene\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Test Rain Scene Loading\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/RainSceneValidator.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float validationInterval = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 48,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRateQuest3 = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRateQuest2 = 72;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTimeMS = 11.1f; // 90 FPS = 11.1ms"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxMemoryUsageGB = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 54,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minStanceDetectionAccuracy = 95f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFormAnalysisLatency = 50f; // milliseconds"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 56,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minHipTrackingAccuracy = 95f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float powerMultiplierAccuracy = 0.1f; // tolerance"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxBoundaryDetectionLatency = 10f; // milliseconds"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int minSpatialAudioAccuracy = 90; // percentage"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 62,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSpawnConsistency = 95f; // percentage"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 135,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ValidateGameReadiness());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 140,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "validationCoroutine = StartCoroutine(AutoValidationRoutine());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\uddea Unity 6 Game Readiness Validator initialized\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 161,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(triggerValidationKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(triggerValidationKey))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 167,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Add(Time.unscaledDeltaTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.Add(Time.unscaledDeltaTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTimeHistory.RemoveAt(0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 178,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(validationInterval);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 190,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ValidateGameReadiness());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Starting comprehensive Unity 6 validation...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 199,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 207,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 213,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.2f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 222,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(AutoFixIssues());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Validating VR Setup...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c XR Origin not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 XR Origin found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c XR Origin camera not assigned\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 XR Camera configured\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftHand = GameObject.FindGameObjectWithTag(\"LeftHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightHand = GameObject.FindGameObjectWithTag(\"RightHand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c Left hand controller not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Left hand controller found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c Right hand controller not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Right hand controller found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"VR Setup Valid: {isValid}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2699\ufe0f Validating Core Game Systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c GameManager not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 GameManager found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c RhythmTargetSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 RhythmTargetSystem found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c White circle prefab not assigned\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c Gray circle prefab not assigned\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c EnhancedPunchDetector not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 EnhancedPunchDetector found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c HandTrackingManager not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 HandTrackingManager found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Core Systems Valid: {isValid}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0a Validating Audio Systems...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c AdvancedAudioManager not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 AdvancedAudioManager found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c TestTrack not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 TestTrack found\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 385,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "AudioSource audioSource = testTrack.GetComponent<AudioSource>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c TestTrack AudioSource not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 TestTrack AudioSource found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Audio Systems Valid: {isValid}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Validating Rain Scene...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c RainSceneCreator not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 RainSceneCreator found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c SceneLoadingManager not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SceneLoadingManager found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c SceneTransformationSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 440,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SceneTransformationSystem found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c DynamicBackgroundSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 DynamicBackgroundSystem found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Rain Scene Valid: {isValid}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Validating Overall Gameplay Readiness...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Gameplay Ready: {isReady}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Auto-fixing detected issues...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Creating CompleteGameSetup to fix issues...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 483,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject setupObj = new GameObject(\"Complete Game Setup (Auto-Fix)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameSetup.SetupCompleteVRBoxingGame();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 496,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Re-validating after auto-fix...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 500,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateGameReadiness());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 505,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb VALIDATION RESULTS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"VR Setup: {(vrSetupValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Core Systems: {(coreSystemsValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 508,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Audio Systems: {(audioSystemsValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Rain Scene: {(rainSceneValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Gameplay Ready: {(gameplayReady ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf89 GAME IS READY TO PLAY!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 515,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Rain scene is fully functional\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd4a VR boxing mechanics are active\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfb5 Music-reactive systems are running\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc40 Start the game and enjoy the rain scene!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Game is not ready. Check the issues above.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udca1 Try running the validator again or manually run CompleteGameSetup\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 533,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(TestRainSceneAsync());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 538,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Testing Rain Scene Loading...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneLoader.LoadScene((int)SceneLoadingManager.SceneType.RainStorm);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 544,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 545,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Rain scene loading test complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneLoadingManager not found for rain scene test\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 557,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 400, 300));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 10, 400, 300));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\ud83c\udfae VR Boxing Game Status\", GUI.skin.box);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 560,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"VR Setup: {(vrSetupValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 561,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Core Systems: {(coreSystemsValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Audio Systems: {(audioSystemsValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Rain Scene: {(rainSceneValid ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label($\"Gameplay Ready: {(gameplayReady ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Space(10);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Validate Game\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Test Rain Scene\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 578,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!gameplayReady && GUILayout.Button(\"Auto-Fix Issues\"))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 580,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(AutoFixIssues());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 585,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(\"\ud83c\udf89 READY TO PLAY!\", GUI.skin.box);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 588,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 599,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Starting comprehensive Unity 6 validation...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 632,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var benchmarks = new PerformanceBenchmarks();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 637,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long memoryBytes = System.GC.GetTotalMemory(false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 651,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float averageFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 660,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "benchmarks.frameTimeConsistency = averageFrameTime <= 16.67f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 666,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 667,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (benchmarks.quest3Performance) score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 668,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (benchmarks.quest2Performance) score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 669,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (benchmarks.frameTimeConsistency) score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 670,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (benchmarks.memoryUsage) score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield(); // Simulate async work"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 681,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var accuracy = new BoxingFormAccuracy();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 689,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var formData = formTracker.GetCurrentFormData();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 690,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accuracy.stanceError = Mathf.Abs(formData.hipRotation - GetExpectedHipRotation());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 691,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "accuracy.stanceDetectionAccuracy = accuracy.stanceError <= 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 696,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 707,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float powerError = Mathf.Abs(formData.powerMultiplier - expectedPower);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 711,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 712,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (accuracy.stanceDetectionAccuracy) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 713,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (accuracy.formAnalysisLatency) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 714,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (accuracy.hipTrackingAccuracy) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 715,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (accuracy.powerCalculationAccuracy) score += 0.25f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 725,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var performance = new Movement360Performance();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 733,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "performance.smoothRotation = performance.rotationSmoothness >= 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 748,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 749,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (performance.smoothRotation) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 750,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (performance.consistentSpawning) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 751,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (performance.boundaryDetection) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 752,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (performance.spatialAudioAccuracy) score += 0.25f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 766,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return formTracker.GetCurrentStance() == BoxingFormTracker.BoxingStance.Orthodox ? 15f : -15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 798,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float consistency = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 799,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int testAngles = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 800,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int successfulSpawns = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 802,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < testAngles; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 816,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1); // Minimal delay for async"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 829,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool isNearBoundary = movementSystem.IsPlayerNearBoundary();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 832,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 865,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "report.isGameReady = report.overallScore >= 0.8f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 870,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Performance below Quest 2 minimum: {performance.currentFPS:F1} FPS < {targetFrameRateQuest2} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 870,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Performance below Quest 2 minimum: {performance.currentFPS:F1} FPS < {targetFrameRateQuest2} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 875,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Frame time inconsistent: {performance.currentFrameTime:F1}ms > 16.67ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 875,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Frame time inconsistent: {performance.currentFrameTime:F1}ms > 16.67ms\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 880,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Memory usage excessive: {performance.currentMemoryUsage:F2}GB > {maxMemoryUsageGB}GB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 880,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Memory usage excessive: {performance.currentMemoryUsage:F2}GB > {maxMemoryUsageGB}GB\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 885,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Stance detection inaccurate: {boxingForm.stanceError:F1}\u00b0 error > 5\u00b0\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 885,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Stance detection inaccurate: {boxingForm.stanceError:F1}\u00b0 error > 5\u00b0\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 890,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Form analysis too slow: {boxingForm.analysisLatency:F1}ms > {maxFormAnalysisLatency}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 890,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Form analysis too slow: {boxingForm.analysisLatency:F1}ms > {maxFormAnalysisLatency}ms\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 895,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Boundary detection slow: {movement360.boundaryResponseTime:F1}ms > {maxBoundaryDetectionLatency}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 895,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.criticalIssues.Add($\"Boundary detection slow: {movement360.boundaryResponseTime:F1}ms > {maxBoundaryDetectionLatency}ms\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 901,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Performance below Quest 3 target: {performance.currentFPS:F1} FPS < {targetFrameRateQuest3} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 901,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Performance below Quest 3 target: {performance.currentFPS:F1} FPS < {targetFrameRateQuest3} FPS\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 906,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Hip tracking accuracy could be improved: {boxingForm.hipAccuracy:F1}% < 98%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 906,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Hip tracking accuracy could be improved: {boxingForm.hipAccuracy:F1}% < 98%\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 911,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Spawn consistency could be improved: {movement360.spawnConsistency:F1}% < 98%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 911,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.warnings.Add($\"Spawn consistency could be improved: {movement360.spawnConsistency:F1}% < 98%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 920,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"==================== UNITY 6 VALIDATION REPORT ====================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 921,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf GAME READY: {(report.isGameReady ? \"\u2705 YES\" : \"\u274c NO\")} (Score: {report.overallScore * 100:F1}%)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 922,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u23f1\ufe0f Validation Time: {report.validationTime * 1000:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 924,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\\n\ud83d\udcca PERFORMANCE BENCHMARKS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 925,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Quest 3 (90+ FPS): {(report.performance.quest3Performance ? \"\u2705\" : \"\u274c\")} ({report.performance.currentFPS:F1} FPS)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 926,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Quest 2 (72+ FPS): {(report.performance.quest2Performance ? \"\u2705\" : \"\u274c\")} ({report.performance.currentFPS:F1} FPS)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 927,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Frame Consistency: {(report.performance.frameTimeConsistency ? \"\u2705\" : \"\u274c\")} ({report.performance.currentFrameTime:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 928,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Memory Usage: {(report.performance.memoryUsage ? \"\u2705\" : \"\u274c\")} ({report.performance.currentMemoryUsage:F2}GB)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 930,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\\n\ud83e\udd4a BOXING FORM ACCURACY:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 931,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Stance Detection: {(report.boxingForm.stanceDetectionAccuracy ? \"\u2705\" : \"\u274c\")} ({report.boxingForm.stanceError:F1}\u00b0 error)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 932,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Analysis Latency: {(report.boxingForm.formAnalysisLatency ? \"\u2705\" : \"\u274c\")} ({report.boxingForm.analysisLatency:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 933,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Hip Tracking: {(report.boxingForm.hipTrackingAccuracy ? \"\u2705\" : \"\u274c\")} ({report.boxingForm.hipAccuracy:F1}%)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 934,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Power Calculation: {(report.boxingForm.powerCalculationAccuracy ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 936,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\\n\ud83c\udf00 360-DEGREE PERFORMANCE:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 937,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Smooth Rotation: {(report.movement360.smoothRotation ? \"\u2705\" : \"\u274c\")} ({report.movement360.rotationSmoothness:F1}%)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 938,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Spawn Consistency: {(report.movement360.consistentSpawning ? \"\u2705\" : \"\u274c\")} ({report.movement360.spawnConsistency:F1}%)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 939,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Boundary Detection: {(report.movement360.boundaryDetection ? \"\u2705\" : \"\u274c\")} ({report.movement360.boundaryResponseTime:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 940,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   Spatial Audio: {(report.movement360.spatialAudioAccuracy ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 944,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\\n\u274c CRITICAL ISSUES ({report.criticalIssues.Count}):\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 947,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"   \u2022 {issue}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 953,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\\n\u26a0\ufe0f WARNINGS ({report.warnings.Count}):\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 956,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"   \u2022 {warning}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 960,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"================================================================\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 982,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f Validating Compute Shader Rendering System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 986,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c ComputeShaderRenderingSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 990,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var stats = ComputeShaderRenderingSystem.Instance.GetPerformanceStats();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 996,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f GPU culling too slow: {cullingTime:F3}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1000,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 GPU culling performance: {cullingTime:F3}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1007,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 High-performance instancing: {visibleInstances} objects\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1010,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1015,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 Validating Unity Sentis AI System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1019,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c UnitySentisAISystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1027,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf AI Performance Prediction: {predictedPerf:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1028,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udc64 Player Skill Level: {skillLevel:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1029,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 AI system operational\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1031,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1036,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcbe Validating Native Collections Optimization...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1040,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c NativeOptimizationSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1044,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var stats = NativeOptimizationSystem.Instance.GetPerformanceStats();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1050,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Job system too slow: {avgJobTime:F3}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1054,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Job system performance: {avgJobTime:F3}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1060,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SIMD vectorization enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1065,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Burst compilation enabled\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1068,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1073,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udce6 Validating Addressable Streaming System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1077,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c AddressableStreamingSystem not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1081,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var stats = AddressableStreamingSystem.Instance.GetPerformanceStats();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1087,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Asset loading too slow: {avgLoadTime:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1091,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Asset loading performance: {avgLoadTime:F1}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1094,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udce6 Cached assets: {stats.cachedAssets}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1095,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u23f3 Queued loads: {stats.queuedLoads}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1097,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Validating Advanced Profiler Integration...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u274c AdvancedProfilerIntegration not found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var analytics = AdvancedProfilerIntegration.Instance.GetAnalytics();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Insufficient profiler samples: {analytics.samplesCollected}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Profiler samples collected: {analytics.samplesCollected}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd7d VR Performance Rating: {analytics.vrPerformanceRating}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u23f1\ufe0f Average Frame Time: {analytics.averageFrameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd3a Peak Frame Time: {analytics.peakFrameTime:F2}ms\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1127,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validationJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/GameReadinessValidator.cs",
        "line": 1151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "validationResults.Dispose();"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 7,
        "description": "LINQ causes GC allocations in VR (memory pressure)",
        "solution": "Replace with for loops or pre-allocated collections",
        "can_auto_fix": false,
        "code_snippet": "using System.Linq;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float validationDuration = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int scenesToTest = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float atmosphereTransitionTimeout = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float performanceThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 43,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float validationStartTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentSceneIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfad Initializing SceneSense Validator...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SceneSense Validator initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f Validation already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 163,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Starting Comprehensive SceneSense Validation...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 166,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentSceneIndex = 0;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 168,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunValidationSequence());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 173,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < scenesToTest; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfad Testing Scene {i + 1}/{scenesToTest}: {(SceneLoadingManager.SceneType)i}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 178,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ValidateScene((SceneLoadingManager.SceneType)i));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 179,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f); // Brief pause between scenes"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 SceneSense Validation Complete!\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 199,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(LoadSceneForTesting(sceneType));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 209,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestAtmosphereTransitions(sceneType));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 212,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestPerformanceReactivity(sceneType));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Scene {sceneType} validation complete - Score: {(narrativeScore + immersionScore) / 2f:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "yield return sceneManager.LoadSceneAsync(sceneType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneSenseSystem.SetSceneNarrative((EnhancedSceneSenseSystem.SceneNarrativeType)((int)sceneType));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneName = sceneType.ToString()"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f EnhancedSceneSenseSystem not found!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var currentMetrics = sceneSenseSystem.GetSceneSenseMetrics();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfad {sceneType} SceneSense Metrics - Storytelling: {storytellingScore:F2}, Atmosphere: {atmosphereScore:F2}, Reactivity: {reactivityScore:F2}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 280,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneSenseSystem.CurrentNarrative.ToString() == sceneType.ToString())"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 285,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneSenseSystem.GetSceneSenseMetrics().narrativeIntensity > 0.5f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 291,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 297,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 303,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 311,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 316,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.4f; // Stable atmosphere"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 323,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 329,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 337,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float correlation = 1f - Mathf.Abs(currentPerformance - (environmentalComplexity - 0.5f) * 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float beatStrength = audioManager.GetCurrentBeatStrength();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 353,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 361,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneSenseSystem.SetSceneNarrative((EnhancedSceneSenseSystem.SceneNarrativeType)((int)sceneType));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneSenseSystem.SetNarrativeIntensity(0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 382,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf05 Atmosphere transition for {sceneType} took {transitionTime:F2}s\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 396,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (float performance = 0.2f; performance <= 1f; performance += 0.2f)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 401,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Performance: {performance:F1} \u2192 Complexity: {complexity:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceImpactScores[currentSceneIndex] = Mathf.Clamp01(1f - performanceImpact);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 415,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int keywordCount = narrativeKeywords.Count(keyword => description.ToLower().Contains(keyword));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 431,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (description.Contains(\"you \") || description.Contains(\"your \"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 437,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 446,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 452,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 459,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 466,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 473,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 479,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Compiling SceneSense Validation Results...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 529,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[0] = results.environmentalStorytellingScore >= 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 530,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[1] = results.atmosphericCoherenceScore >= 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 531,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[2] = results.performanceReactivityScore >= 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 532,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[3] = results.narrativeClarityScore >= 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 533,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[4] = results.immersionDepthScore >= 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 534,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[5] = results.unity6IntegrationScore >= 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 535,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[6] = results.accessibilityScore >= 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 536,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "results.categoryPassed[7] = results.memoryEfficiencyScore >= 0.6f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "results.atmosphereTransitionTime = atmosphereTransitionTimes.ToArray().Average();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 546,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "results.averageFrameTimeImpact = 1f - performanceImpactScores.ToArray().Average();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 552,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 563,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0.8f; // Base score"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float avgTransitionTime = atmosphereTransitionTimes.ToArray().Average();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 571,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 575,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(score);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 582,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return performanceImpactScores.ToArray().Average();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 589,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 599,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 609,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 612,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (sceneSenseSystem != null) score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 613,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (CachedReferenceManager.Get<UnityEngine.Rendering.HighDefinition.HDAdditionalLightData>() != null) score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 614,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (CachedReferenceManager.Get<UnityEngine.Rendering.Volume>() != null) score += 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 615,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (audioManager != null) score += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 622,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0.5f; // Base accessibility score"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 627,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "score += 0.3f; // Adaptive complexity"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 631,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (RenderSettings.fog) score += 0.1f; // Visual depth cues"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 634,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (audioManager != null) score += 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 641,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float score = 0.7f; // Base efficiency score"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 644,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float memoryUsage = UnityEngine.Profiling.Profiler.GetTotalAllocatedMemory(0) / (1024f * 1024f * 1024f); // GB"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 646,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (memoryUsage < 2f) score += 0.3f; // Under 2GB"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 647,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "else if (memoryUsage < 3f) score += 0.1f; // Under 3GB"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 648,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "else score -= 0.2f; // Over 3GB penalized"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 650,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(score);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfad ===== SCENESENSE VALIDATION RESULTS =====\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 656,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Overall Score: {results.overallScore:F2} ({(results.overallPassed ? \"PASSED\" : \"FAILED\")})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 657,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 659,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Category Scores:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 660,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Environmental Storytelling: {results.environmentalStorytellingScore:F2} {(results.categoryPassed[0] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 661,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Atmospheric Coherence: {results.atmosphericCoherenceScore:F2} {(results.categoryPassed[1] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Performance Reactivity: {results.performanceReactivityScore:F2} {(results.categoryPassed[2] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 663,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Narrative Clarity: {results.narrativeClarityScore:F2} {(results.categoryPassed[3] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 664,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Immersion Depth: {results.immersionDepthScore:F2} {(results.categoryPassed[4] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 665,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Unity 6 Integration: {results.unity6IntegrationScore:F2} {(results.categoryPassed[5] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 666,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Accessibility: {results.accessibilityScore:F2} {(results.categoryPassed[6] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 667,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Memory Efficiency: {results.memoryEfficiencyScore:F2} {(results.categoryPassed[7] ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 670,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance Metrics:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 671,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Average Atmosphere Transition Time: {results.atmosphereTransitionTime:F2}s\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 672,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Average Frame Time Impact: {results.averageFrameTimeImpact:F2}%\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 675,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Scene-by-Scene Results:\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 676,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < results.sceneMetrics.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 679,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"{i + 1}. {metric.sceneName}: Narrative {metric.narrativeCoherenceScore:F2}, Immersion {metric.immersionLevel:F2} {(metric.validationPassed ? \"\u2705\" : \"\u274c\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 682,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfad ===== END SCENESENSE VALIDATION =====\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 693,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (atmosphereTransitionTimes.IsCreated) atmosphereTransitionTimes.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 694,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceImpactScores.IsCreated) performanceImpactScores.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/SceneSenseValidator.cs",
        "line": 695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (immersionMetrics.IsCreated) immersionMetrics.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float testStepDelay = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentTestStep = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalTestSteps = 0;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 52,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveUserTesting());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 63,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 66,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestSystemInitialization());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 70,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestMenuNavigation());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 74,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestSceneSelection());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 78,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestAllGameModes());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 82,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestPerformance());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 86,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestVRCompatibility());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 96,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 138,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(ApplyEmergencyFixes());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 148,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 194,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int workingButtons = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (button.onClick.GetPersistentEventCount() > 0)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 225,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string sceneName = sceneManager.GetSceneName(i);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 231,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestSceneLoading(i));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string sceneName = sceneManager.GetSceneName(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool canLoad = sceneManager.IsSceneLoaded(sceneIndex) ||"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 258,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var field = type.GetField(fieldNames[sceneIndex]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var value = field.GetValue(sceneManager);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 296,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 299,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameMode(\"Traditional\", typeof(RhythmTargetSystem)));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 302,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameMode(\"Flow\", typeof(FlowModeSystem)));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 305,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameMode(\"Staff\", typeof(TwoHandedStaffSystem)));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 308,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameMode(\"Dodging\", typeof(ComprehensiveDodgingSystem)));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 311,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameMode(\"AI Coach\", typeof(AICoachVisualSystem)));"
      },
      {
        "severity": "Critical",
        "category": "Performance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 318,
        "description": "FindObjectOfType causes VR performance issues (50-150ms spikes)",
        "solution": "Replace with CachedReferenceManager.Get<T>()",
        "can_auto_fix": true,
        "code_snippet": "var system = FindObjectOfType(systemType);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 324,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "yield return StartCoroutine(TestGameModeBasics(system, modeName));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 331,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var type = system.GetType();"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 350,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "var startMethod = type.GetMethod(\"Start\" + modeName.Replace(\" \", \"\") + \"Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var startMethod = type.GetMethod(\"Start\" + modeName.Replace(\" \", \"\") + \"Mode\");"
      },
      {
        "severity": "Warning",
        "category": "Performance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 351,
        "description": "String concatenation in loops causes GC pressure",
        "solution": "Use StringBuilder or string interpolation",
        "can_auto_fix": false,
        "code_snippet": "var stopMethod = type.GetMethod(\"Stop\" + modeName.Replace(\" \", \"\") + \"Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var stopMethod = type.GetMethod(\"Stop\" + modeName.Replace(\" \", \"\") + \"Mode\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 374,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long memoryUsage = System.GC.GetTotalMemory(false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 418,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(testStepDelay);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 468,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fixObj = new GameObject(\"Emergency Scene Fix\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneFix.ApplyQuickFix();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 477,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fixObj = new GameObject(\"Emergency Menu Fix\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "menuFix.ManualFix();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 482,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 502,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalTestSteps = 1; // System init"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 528,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "testReport.overallSuccess = testReport.failedTests == 0 && testReport.criticalIssues.Count == 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 553,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf END-TO-END USER TESTING COMPLETE!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 554,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\" +"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\ud83d\udea8 CRITICAL ISSUES FOUND:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 575,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"   \u2022 {issue}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"\u26a0\ufe0f WARNINGS:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 584,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"   \u2022 {warning}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 591,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udccb DETAILED TEST LOG:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 594,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"   {logEntry}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 601,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string timeStamp = System.DateTime.Now.ToString(\"HH:mm:ss\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 603,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "testLog.Add(logEntry);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testLog.Add(logEntry);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(logEntry);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 619,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "testReport.warnings.Add(message);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 619,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testReport.warnings.Add(message);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 625,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "testReport.criticalIssues.Add(issue);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 625,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testReport.criticalIssues.Add(issue);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 631,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "testReport.warnings.Add(warning);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 631,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "testReport.warnings.Add(warning);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Testing/EndToEndUserTesting.cs",
        "line": 642,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RunComprehensiveUserTesting());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spatialBlend = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float dopplerLevel = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int fftSize = 2048;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatSensitivity = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatThreshold = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int frequencyBands = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxConcurrentSounds = 32;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float audioLODDistance = 50f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 98,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int beatHistoryIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 99,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentBPM = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 102,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int activeAudioSources = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 103,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float audioProcessingTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 141,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "musicAudioSource.spatialBlend = 0f; // 2D for music"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Advanced Audio Manager initialized with Unity 6 optimizations\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 172,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "AudioSettings.dspBufferSize = 256; // Lower latency for VR"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AudioSettings.SetSpatializerPluginName(\"OculusSpatializer\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 184,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "AudioSettings.outputSampleRate = 48000; // High quality for VR"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 190,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject poolParent = new GameObject(\"Audio Source Pool\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "poolParent.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 193,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < maxConcurrentSounds; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 195,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioObj = new GameObject($\"PooledAudioSource_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioObj.transform.SetParent(poolParent.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSourcePool.Enqueue(source);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicAudioSource.GetSpectrumData(audioSamples, 0, FFTWindow.BlackmanHarris);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 239,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = audioAnalysisJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete(); // Complete for this frame"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicAudioSource.GetSpectrumData(audioSamples, 0, FFTWindow.BlackmanHarris);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 278,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 280,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 282,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float average = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int sampleCount = (int)Mathf.Pow(2, i) * 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 285,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (i == 7) sampleCount += 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 287,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int j = 0; j < sampleCount; j++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 303,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 308,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bufferDecrease[i] = 0.005f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 314,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bufferDecrease[i] *= 1.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 326,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands; i++)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 358,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBeatDetected?.Invoke(beatData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 362,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBassHit?.Invoke(bassEnergy);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 381,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnAudioAnalysis?.Invoke(analysisData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 387,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyData.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 410,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalBPM = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 411,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validBeats = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 413,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < beatHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 431,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float maxValue = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 432,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int maxIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 434,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBands; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 449,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float maxValue = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 450,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int maxIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 452,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioBandBuffers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 466,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float total = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 467,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioBandBuffers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 476,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float weightedSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 477,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float magnitudeSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 479,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < audioSamples.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 491,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "activeAudioSources = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 493,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeSources.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeSources.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(source.transform.position, listenerPosition);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 523,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "source.volume *= 0.5f; // Reduce volume for distant sounds"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 543,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 545,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frequencyBandCount; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 547,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float average = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int sampleCount = (int)Unity.Mathematics.math.pow(2, i) * 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 550,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (i == 7) sampleCount += 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 552,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int j = 0; j < sampleCount; j++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 577,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicAudioSource.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 585,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicAudioSource.Stop();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 597,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "source.Play();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 599,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeSources.Add(source);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 599,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeSources.Add(source);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 628,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return audioSourcePool.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 631,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Audio source pool exhausted!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 637,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "source.Stop();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 639,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "source.volume = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 641,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioSourcePool.Enqueue(source);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 648,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "masterMixerGroup.audioMixer.SetFloat(\"MasterVolume\", Mathf.Log10(volume) * 20);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 649,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnVolumeChanged?.Invoke(volume);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 657,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"MusicVolume\", Mathf.Log10(volume) * 20);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 665,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sfxMixerGroup.audioMixer.SetFloat(\"SFXVolume\", Mathf.Log10(volume) * 20);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 684,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Music source set: {source.clip.name}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 690,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBeatDetected?.Invoke(beatData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 706,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"EnvironmentalReverb\", enabled ? 0.3f : 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 709,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Environmental audio enabled for rain scene\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 716,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"EnvironmentalReverb\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 719,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Environmental audio disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 733,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"UnderwaterFilter\", -800f); // Low-pass filter"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 734,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"UnderwaterReverb\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 738,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "AudioListener.volume = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 740,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Underwater audio mode enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 747,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"UnderwaterFilter\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 748,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicMixerGroup.audioMixer.SetFloat(\"UnderwaterReverb\", 0f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 751,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "AudioListener.volume = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 753,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Underwater audio mode disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 762,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 764,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sampleData.IsCreated) sampleData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 765,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frequencyData.IsCreated) frequencyData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Audio/AdvancedAudioManager.cs",
        "line": 766,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (beatResults.IsCreated) beatResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float coachDistance = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float voiceVolume = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float demoScale = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxTrainingPlan = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float adaptiveLearningRate = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd16 Initializing Enhanced AI Coach Visual System...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 160,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"stance\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 161,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"power\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"accuracy\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 163,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"endurance\"] = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 164,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"form\"] = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 186,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnObj = new GameObject(\"AI Coach Spawn Point\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 196,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachSpawnPoint.LookAt(playerPos);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 203,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach = Instantiate(holographicCoachPrefab, coachSpawnPoint.position, coachSpawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 204,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "coachAnimator = activeHolographicCoach.GetComponent<Animator>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfc3\u200d\u2642\ufe0f Holographic AI Coach spawned successfully!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 216,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject coach = new GameObject(\"Holographic Coach\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject body = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "body.transform.SetParent(coach.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 222,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "body.transform.localScale = new Vector3(0.5f, 1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject head = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "head.transform.SetParent(coach.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 227,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "head.transform.localPosition = new Vector3(0, 1.2f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftArm = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftArm.transform.SetParent(coach.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 234,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftArm.transform.localPosition = new Vector3(-0.4f, 0.5f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 235,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftArm.transform.localScale = new Vector3(0.2f, 0.6f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightArm = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightArm.transform.SetParent(coach.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 240,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightArm.transform.localPosition = new Vector3(0.4f, 0.5f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 241,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightArm.transform.localScale = new Vector3(0.2f, 0.6f, 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 251,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 252,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetColor(\"_BaseColor\", new Color(0.3f, 0.8f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetColor(\"_BaseColor\", new Color(0.3f, 0.8f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "holographicMaterial.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hologramEffect.Initialize();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 275,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject voiceObj = new GameObject(\"AI Coach Voice\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 277,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.spatialBlend = 1f; // 3D spatial audio"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 280,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.maxDistance = 10f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfa4 AI Coach voice system initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 296,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject canvasObj = new GameObject(\"AI Coach Canvas\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "canvasObj.transform.LookAt(xrCamera.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc41\ufe0f AI Coach visual feedback system ready\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 323,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(\"Coaching Text\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(coachingCanvas.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 327,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "coachingText.fontSize = 48;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 331,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "RectTransform rectTransform = textObj.GetComponent<RectTransform>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 332,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rectTransform.sizeDelta = new Vector2(800, 200);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 333,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rectTransform.anchoredPosition = new Vector2(0, 100);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 342,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "formMeter = CreateProgressMeter(\"Form\", new Vector2(-300, -100), correctFormColor);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 348,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "powerMeter = CreateProgressMeter(\"Power\", new Vector2(0, -100), Color.yellow);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 354,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "accuracyMeter = CreateProgressMeter(\"Accuracy\", new Vector2(300, -100), Color.blue);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 360,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject meterObj = new GameObject($\"{name} Meter\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "meterObj.transform.SetParent(coachingCanvas.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 364,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rect.sizeDelta = new Vector2(200, 40);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 373,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject labelObj = new GameObject($\"{name} Label\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "labelObj.transform.SetParent(meterObj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 377,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.sizeDelta = new Vector2(200, 30);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 378,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "labelRect.anchoredPosition = new Vector2(0, -35);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 382,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "label.fontSize = 24;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameStateManager.OnCoachingInstruction.AddListener(OnCoachingInstructionReceived);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameStateManager.OnPerformanceAnalysis.AddListener(OnPerformanceAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnFormAnalyzed.AddListener(OnFormAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnStanceChanged.AddListener(OnStanceChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var instruction = pendingInstructions.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 426,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (enableVoiceCoaching && !string.IsNullOrEmpty(instruction.voiceKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (coachAnimator != null && !string.IsNullOrEmpty(instruction.demoAnimation))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachAnimator.SetTrigger(instruction.demoAnimation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(instruction.duration * 1000));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = formCorrectionClips[UnityEngine.Random.Range(0, formCorrectionClips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = motivationalClips[UnityEngine.Random.Range(0, motivationalClips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clipToPlay = techniqueTips[UnityEngine.Random.Range(0, techniqueTips.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coachVoiceSource.PlayOneShot(clipToPlay);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 512,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject demo = Instantiate(demoPrefab, demoSpawnPoint.position, demoSpawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 519,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var demoAnimator = demo.GetComponent<Animator>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "demoAnimator.SetTrigger(\"PlayDemo\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(3000);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 541,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material demoMaterial = new Material(renderer.material);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 543,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "color.a = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "marker = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 562,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "marker.GetComponent<Collider>().enabled = false;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 570,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "marker.GetComponent<Renderer>().material.color = color;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 571,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "marker.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 574,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "Invoke(nameof(HidePositionMarker), 5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 621,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 targetRotation = Quaternion.Euler(0, hipRotation, 0) * Vector3.forward;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 623,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(0, hipPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 624,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(1, hipPos + targetRotation * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 637,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(0, formTracker.leftFootReference.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 638,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(1, formTracker.rightFootReference.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 656,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "powerMeter.fillAmount = Mathf.Clamp01(formData.powerMultiplier - 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 704,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.RemoveAt(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 717,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 728,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 736,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(drill);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 736,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(drill);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 743,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(CreateGeneralImprovementDrill());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 743,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentTrainingPlan.Add(CreateGeneralImprovementDrill());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 749,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var drill = new PersonalizedDrill();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 757,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 3;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 764,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 20;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 771,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drill.repetitions = 15;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 798,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(visualInstruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 853,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"stance\"] = Mathf.Lerp(playerWeaknesses[\"stance\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 855,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"power\"] = Mathf.Lerp(playerWeaknesses[\"power\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 856,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "1f - Mathf.Clamp01(performance.powerGeneration - 1f), adaptiveLearningRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 857,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerWeaknesses[\"accuracy\"] = Mathf.Lerp(playerWeaknesses[\"accuracy\"],"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 877,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 893,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 901,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 914,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeHolographicCoach.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 937,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pendingInstructions.Enqueue(instruction);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 955,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float pulseSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 956,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float glitchFrequency = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 963,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < renderers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 974,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float pulse = 0.7f + 0.3f * Mathf.Sin(Time.time * pulseSpeed);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 991,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(GlitchEffect());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/AI/AICoachVisualSystem.cs",
        "line": 1003,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.05f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float inferenceFrequency = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int inputHistorySize = 60;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float smoothingFactor = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float predictedPerformance = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float recommendedDifficulty = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerSkillLevel = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float formAnalysisScore = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 66,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 Initializing Unity Sentis AI System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 73,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Unity Sentis AI System initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 84,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendedDifficulty = Mathf.Min(recommendedDifficulty + 0.1f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendedDifficulty = Mathf.Max(recommendedDifficulty - 0.1f, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerSkillLevel = Mathf.Lerp(playerSkillLevel, performance, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 97,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceHistory.IsCreated) performanceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 98,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (accuracyHistory.IsCreated) accuracyHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/AI/UnitySentisAISystem.cs",
        "line": 99,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (reactionTimeHistory.IsCreated) reactionTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float baseSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float aggressionMultiplier = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float scatterTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float scatterDuration = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float stunTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 43,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float stunDuration = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float aggressionTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float aggressionDuration = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int hitCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 52,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody = GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody.drag = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 76,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "baseSpeed = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 79,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "baseSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 82,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "baseSpeed = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 96,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "scatterTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 107,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "stunTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 118,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "aggressionTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody.AddForce(movement, ForceMode.Acceleration);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 167,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(time * 0.5f) * baseSpeed * 0.3f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 169,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(time * 0.7f) * baseSpeed * 0.2f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 170,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(time * 0.6f) * baseSpeed * 0.3f"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 180,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "scatterTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scatterDirection.Normalize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody.AddForce(scatterDirection * baseSpeed * 5f, ForceMode.Impulse);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 203,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "stunTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Medium fish {name} stunned and retreating\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Large fish {name} pushed back and becoming aggressive\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 233,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hitCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 241,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "aggressionTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Random.Range(2, 4); // 2-3 hits required"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(3000); // 3 second retreat"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 260,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hitCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Medium fish {name} finished retreating and regrouped\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in fish retreat: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(delay * 1000));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 279,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "aggressionTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Large fish {name} became aggressive\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in fish aggression: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"LeftHand\") || other.CompareTag(\"RightHand\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool correctHand = (other.CompareTag(\"LeftHand\") && requiredHand == RhythmTargetSystem.HandSide.Left) ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "(other.CompareTag(\"RightHand\") && requiredHand == RhythmTargetSystem.HandSide.Right);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishSystem.OnFishHit(hitData);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 351,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"FishHitEffect\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 356,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 357,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = Random.Range(0.1f, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 359,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.7f, 0.9f, 1f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 360,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 20;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 363,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 10)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 370,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 383,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float schoolRadius = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 384,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float cohesionStrength = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 385,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float separationStrength = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 386,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float alignmentStrength = 1f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 393,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody = GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishRigidbody.AddForce(totalForce, ForceMode.Acceleration);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 445,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int neighborCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Collider[] nearbyFish = Physics.OverlapSphere(transform.position, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (fish.gameObject != gameObject && fish.CompareTag(\"Fish\"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 474,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int neighborCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Collider[] nearbyFish = Physics.OverlapSphere(transform.position, 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (fish.gameObject != gameObject && fish.CompareTag(\"Fish\"))"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 481,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Rigidbody fishRb = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 507,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float intensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 508,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float pulseSpeed = 2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 530,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightGO = new GameObject(\"BiolumLight\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 531,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightGO.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 536,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "glowLight.range = 5f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 541,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "fishRenderer = GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 545,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(glowColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 546,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(fishRenderer.material);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "glowMaterial.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "glowMaterial.SetColor(\"_EmissionColor\", glowColor * intensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 567,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float pulse = 1f + Mathf.Sin(Time.time * pulseSpeed) * 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 577,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "glowMaterial.SetColor(\"_EmissionColor\", glowColor * currentIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 592,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "glowMaterial.SetColor(\"_EmissionColor\", glowColor * intensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/FishBehaviorComponents.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "glowMaterial.SetColor(\"_EmissionColor\", glowColor * intensity);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 22,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(QuickFixScenes());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 28,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udea8 APPLYING QUICK SCENE FIX...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 30,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 36,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneAssetManager not found!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 43,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject container = new GameObject(\"Quick Generated Scenes\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 45,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneContainer.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 51,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Quick scene fix applied - Menu should work now!\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 66,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 76,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject scene = new GameObject($\"Scene_{index}_{name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 77,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scene.transform.SetParent(sceneContainer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 80,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject floor = GameObject.CreatePrimitive(PrimitiveType.Plane);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 82,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.SetParent(scene.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 83,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.localScale = new Vector3(10, 1, 10);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 86,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = floor.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 87,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var material = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 87,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var material = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 92,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject light = new GameObject(\"Scene Light\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "light.transform.SetParent(scene.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 94,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "light.transform.position = new Vector3(0, 8, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "light.transform.rotation = Quaternion.Euler(50, 30, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 100,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lightComponent.intensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scene.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Created basic scene: {name}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 114,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawns = new GameObject(\"Spawn Points\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawns.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 126,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject zone = new GameObject($\"{modeName} Spawn Zone\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "zone.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 131,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "collider.size = new Vector3(6, 6, 6);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var field = type.GetField(fieldNames[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 150,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "field.SetValue(sceneAssetManager, prefab);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Assigned {fieldNames[index]} to SceneAssetManager\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/QuickSceneFix.cs",
        "line": 159,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(QuickFixScenes());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxFishSchools = 5;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int fishPerSchool = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float schoolRadius = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnRadius = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float currentStrength = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float currentVariation = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float baseGlowIntensity = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float approachGlowMultiplier = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hitGlowReduction = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int jobBatchSize = 32;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 63,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 64,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentCycleDuration = 10f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 96,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc1f Fish Job System initialized for high-performance simulation\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishUpdateJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishUpdateJobHandle = fishUpdateJob.Schedule(activeFish.Count, jobBatchSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishUpdateJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 143,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeFish.Count && i < fishPositions.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 148,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rb = activeFish[i].GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 160,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeFish.Count && i < fishPositions.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 165,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rb = activeFish[i].GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 182,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < maxFishSchools; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf0a Underwater Fish System initialized with {maxFishSchools} schools\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 206,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fish = Instantiate(fishPrefab, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 209,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.Initialize(circleType, fishSize);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 217,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 219,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.drag = 2.5f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 223,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = fish.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.Initialize(circleType == RhythmTargetSystem.CircleType.White ? Color.white : Color.gray);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 231,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeFish.Add(fish);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeFish.Add(fish);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 249,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "shark = Instantiate(sharkBlockPrefab, originalBlock.transform.position, originalBlock.transform.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 258,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var sharkBehavior = shark.GetComponent<SharkBlockBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 263,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sharkBehavior.Initialize(spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 266,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = shark.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 268,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.drag = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject fish = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fish.name = $\"Fish_{circleType}_{Random.Range(1000, 9999)}\";"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 302,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = fish.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(GetFishColor(circleType)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 307,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishMat.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishMat.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject shark = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "shark.name = $\"SharkBlock_{Random.Range(1000, 9999)}\";"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 325,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = shark.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 329,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.3f, 0.5f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.3f, 0.5f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 330,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 331,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "sharkMat.color = new Color(0.3f, 0.3f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sharkMat.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sharkMat.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "schoolCenter.y = Mathf.Abs(schoolCenter.y); // Keep above ground"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "schoolType = (FishSchool.SchoolType)Random.Range(0, 3),"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 354,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < fishPerSchool; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 357,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "school.fish.Add(fish);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "school.fish.Add(fish);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 358,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeFish.Add(fish);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeFish.Add(fish);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 361,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeSchools.Add(school);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeSchools.Add(school);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 371,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "fish = Instantiate(fishPrefab, centerPosition, Quaternion.identity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fish = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fish.name = $\"Fish_{schoolType}_{Random.Range(1000, 9999)}\";"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 390,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.Initialize(RhythmTargetSystem.CircleType.White, GetFishSize(schoolType));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 398,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 400,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.drag = 2f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 404,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = fish.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.Initialize(fishColor);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 413,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var schoolBehavior = fish.GetComponent<SchoolBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "schoolBehavior.Initialize(centerPosition, schoolRadius);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 421,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "SphereCollider collider = fish.GetComponent<SphereCollider>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Vector3.one * Random.Range(0.3f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Vector3.one * Random.Range(0.8f, 1.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Vector3.one * Random.Range(1.5f, 2.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 461,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.8f, 0.9f, 1f, 0.9f) : new Color(0.5f, 0.6f, 0.8f, 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 469,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Color(0.2f, 0.8f, 1f, 0.8f); // Bright blue"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 471,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Color(1f, 0.6f, 0.2f, 0.8f); // Orange"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 473,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Color(0.8f, 0.2f, 0.2f, 0.9f); // Red"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 475,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Color(0.5f, 0.5f, 0.8f, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 485,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "currentVelocity = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(cycle * 2 * Mathf.PI) * currentStrength,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(cycle * 3 * Mathf.PI) * currentStrength * 0.3f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(cycle * 2 * Mathf.PI) * currentStrength * 0.5f"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 496,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 currentForce = currentVelocity * (1f + Random.Range(-currentVariation, currentVariation));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.AddForce(currentForce, ForceMode.Acceleration);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 524,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var schoolBehavior = fish.GetComponent<SchoolBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "schoolBehavior.UpdateSchoolPosition(schoolCenter);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 535,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validFish = 0;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 555,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = fish.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToPlayer = Vector3.Distance(fish.transform.position, VRBoxingGame.Core.VRCameraHelper.PlayerPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.SetIntensity(glowIntensity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 579,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = hitFish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 602,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.ScatterFromHit(hitData.hitPosition);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 606,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = fish.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 609,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.SetIntensity(baseGlowIntensity * hitGlowReduction);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 618,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 621,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.GetStunnedAndRetreat(hitData.hitPosition);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 630,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 633,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.GetPushedBackAndReturnAggressive(hitData.hitPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 646,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(fish.transform.position, hitPosition);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 649,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 652,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.ScatterFromHit(hitPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(delay * 1000));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 666,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 669,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.RegroupWithSchool();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 670,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Medium fish {fish.name} regrouped with school\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 676,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in medium fish regroup: {ex.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 686,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 689,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.SetAggressive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 690,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Large fish {fish.name} became aggressive\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 692,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(duration * 1000));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 696,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.SetAggressive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 697,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Large fish {fish.name} calmed down\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 704,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in fish aggression effect: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 717,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(fish.transform.position, position);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 740,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"SharkBlockEffect\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 745,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 746,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 747,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 748,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.3f, 0.6f, 1f, 0.7f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 749,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 100;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 752,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 754,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 50)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 759,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 771,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(fish.transform.position, position);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 774,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 777,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.ScatterFromHit(position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 788,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishUpdateJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 792,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (fishPositions.IsCreated) fishPositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 793,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (fishVelocities.IsCreated) fishVelocities.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 794,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (fishTimers.IsCreated) fishTimers.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 805,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeFish.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 806,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeSchools.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 855,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "float3 swimmingForce = new float3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 856,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.sin(timer * 0.5f) * 0.3f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 857,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.sin(timer * 0.7f) * 0.2f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 858,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.cos(timer * 0.6f) * 0.3f"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 862,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToPlayer = math.distance(position, playerPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 863,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float playerInfluence = math.saturate(5f / (distanceToPlayer + 1f));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 869,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "velocity *= 0.98f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 887,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spinSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 888,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float approachSpeed = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 889,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float attackRange = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 893,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float attackTimer = 0f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 899,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "sharkRigidbody = GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 914,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.Rotate(0, 0, spinSpeed * Time.deltaTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 925,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sharkRigidbody.AddForce(direction * approachSpeed, ForceMode.Acceleration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/UnderwaterFishSystem.cs",
        "line": 929,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToTarget = Vector3.Distance(transform.position, targetPosition);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentSceneIndex = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 98,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(8f, 6f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 99,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(6f, 8f, 6f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 100,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(10f, 8f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 115,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(6f, 8f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 116,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(8f, 6f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 131,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(10f, 8f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 132,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(8f, 6f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 133,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(12f, 8f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 148,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(12f, 10f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 149,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(8f, 10f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 164,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(8f, 6f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 165,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(6f, 8f, 6f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 166,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(8f, 6f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 181,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(10f, 12f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 182,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(12f, 10f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 197,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(12f, 8f, 12f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 198,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(8f, 8f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 199,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(10f, 8f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(10f, 8f, 10f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 215,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(8f, 8f, 8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 216,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(12f, 8f, 12f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Scene-Game Mode configurations initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Applied scene configuration for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Flow Mode not supported in {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Staff Mode not supported in {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Dodging Mode not supported in {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf0a Flow Mode configured for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd62 Staff Mode configured for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd38 Dodging Mode configured for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd16 AI Coach configured for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd4a Traditional Mode configured for {config.sceneName}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 426,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new SceneConfiguration();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 442,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsFlowMode) supported.Add(\"Flow\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsFlowMode) supported.Add(\"Flow\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 443,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsStaffMode) supported.Add(\"Staff\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsStaffMode) supported.Add(\"Staff\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 444,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsDodgingMode) supported.Add(\"Dodging\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsDodgingMode) supported.Add(\"Dodging\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 445,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsAICoach) supported.Add(\"AI Coach\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (config.supportsAICoach) supported.Add(\"AI Coach\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneGameModeIntegrator.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return supported.ToArray();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float transitionDuration = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 96,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Scene Loading Manager initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 102,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject canvasObj = new GameObject(\"Loading Canvas\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 105,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingCanvas.sortingOrder = 1000;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 109,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "scaler.referenceResolution = new Vector2(1920, 1080);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 112,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bgObj = new GameObject(\"Background\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 113,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bgObj.transform.SetParent(canvasObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 121,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "bgImage.color = new Color(0, 0, 0, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 124,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject textObj = new GameObject(\"Loading Text\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "textObj.transform.SetParent(canvasObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 128,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "textRect.anchorMin = new Vector2(0.5f, 0.6f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 129,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "textRect.anchorMax = new Vector2(0.5f, 0.6f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 130,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "textRect.sizeDelta = new Vector2(400, 60);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 134,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingText.fontSize = 36;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 139,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject progressObj = new GameObject(\"Progress Bar\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "progressObj.transform.SetParent(canvasObj.transform, false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 143,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "progressRect.anchorMin = new Vector2(0.5f, 0.4f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 144,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "progressRect.anchorMax = new Vector2(0.5f, 0.4f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 145,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "progressRect.sizeDelta = new Vector2(400, 20);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 148,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingProgressBar.minValue = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 149,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingProgressBar.maxValue = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 150,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingProgressBar.value = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "canvasObj.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Scene loading already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool success = await sceneAssetManager.LoadSceneAsync((int)sceneType);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 176,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneChanged?.Invoke(sceneType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (sceneIndex >= 0 && sceneIndex < Enum.GetValues(typeof(SceneType)).Length)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadingCanvas.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 215,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "loadingProgressBar.value = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(300);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SceneTransformationSystem.Instance.SetSceneType((SceneTransformationSystem.SceneType)(int)sceneType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "PlayerPrefs.SetInt(\"CurrentScene\", (int)sceneType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadingCanvas.gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 268,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneChanged?.Invoke(sceneType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Scene loaded: {GetSceneName(sceneType)}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error loading scene {sceneType}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(0); // Default theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 336,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainObj = new GameObject(\"Rain Scene Creator\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSceneCreator.CreateCompleteRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSceneCreator.SetWeatherIntensity(RainSceneCreator.WeatherIntensity.Medium);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(0); // Cyberpunk theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSceneCreator.CreateCompleteRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSceneCreator.SetWeatherIntensity(RainSceneCreator.WeatherIntensity.Light);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(300);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(1); // Space theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(3); // Crystal theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(5); // Underwater theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 398,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(2); // Desert-like abstract theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "backgroundSystem.LoadTheme(4); // Aurora/nature theme"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 409,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(200);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 416,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsed = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "env.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSceneCreator.DestroyRainEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 458,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetEnvironmentalAudio(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetEnvironmentalAudio(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(false);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 486,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return sceneType.ToString().Replace(\"_\", \" \");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneLoadingManager.cs",
        "line": 522,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneChanged?.Invoke(sceneType);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int frequencyBand = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float reactivityMultiplier = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float smoothSpeed = 5.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float scaleMultiplier = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 43,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentAudioLevel = 0f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 49,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "objectRenderer = GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 50,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "lightComponent = GetComponent<Light>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 64,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"ReactiveEnvironmentObject on {gameObject.name} couldn't find AdvancedAudioManager\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float[] frequencyBands = audioManager.GetFrequencyBands();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Sin(Time.time * 2f) * 0.5f + 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 113,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "objectTransform.localScale = Vector3.Lerp(objectTransform.localScale, targetScale, Time.deltaTime * smoothSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "objectTransform.Rotate(currentRotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color targetColor = Color.Lerp(baseColor, reactiveColor, currentAudioLevel);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.color = Color.Lerp(material.color, targetColor, Time.deltaTime * smoothSpeed);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 131,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float baseIntensity = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightComponent.intensity = Mathf.Lerp(lightComponent.intensity, targetIntensity, Time.deltaTime * smoothSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ReactiveEnvironmentObject.cs",
        "line": 139,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frequencyBand = Mathf.Clamp(frequencyBand, 0, 7);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spaceGravity = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float crystalHarmonic = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float underwaterDrag = 2.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.OnCircleHit.AddListener(OnTargetHit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RhythmTargetSystem.Instance.OnBlockSuccess.AddListener(OnBlockSuccess);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Scene Transformation System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 111,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Scene transformed to: {newSceneType}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "advancedEnvironment.ClearCurrentEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Switched to traditional targets - immersive environment disabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "advancedEnvironment.CreateUnderwaterEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc1f Immersive underwater environment enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc8e Crystal cave immersive mode enabled\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 170,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 235,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 277,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = target.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 280,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var schoolBehavior = target.GetComponent<SchoolBehavior>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 283,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = target.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 287,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var harmonicOscillator = target.GetComponent<HarmonicOscillator>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 291,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var mirageEffect = target.GetComponent<MirageEffect>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 295,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = target.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 298,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.drag = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 299,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.angularDrag = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 310,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fish = Instantiate(fishPrefab, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 314,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishBehavior.Initialize(circleType, GetFishSize(circleType));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 317,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.Initialize(circleType == RhythmTargetSystem.CircleType.White ? Color.white : Color.gray);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 333,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject shark = Instantiate(sharkBlockPrefab, originalBlock.transform.position, originalBlock.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sharkBehavior.Initialize(spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 348,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject crystal = Instantiate(crystalPrefab, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalBehavior.Initialize(circleType);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 365,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cluster = Instantiate(crystalClusterPrefab, originalBlock.transform.position, originalBlock.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clusterBehavior.Initialize(spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 380,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spirit = Instantiate(spiritPrefab, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spiritBehavior.Initialize(circleType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "magicalAura.Initialize(circleType);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 397,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject vine = Instantiate(thornVinePrefab, originalBlock.transform.position, originalBlock.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vineBehavior.Initialize(spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 412,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sandSpirit = Instantiate(sandSpiritPrefab, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spiritBehavior.Initialize(circleType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mirageEffect.Initialize(0.3f); // 30% chance of being a mirage"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 429,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject sandstorm = Instantiate(sandstormPrefab, originalBlock.transform.position, originalBlock.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sandstormBehavior.Initialize(spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 441,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject energyTarget = Instantiate(originalTarget, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyEffect.Initialize(circleType);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 448,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = energyTarget.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 458,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject hologram = Instantiate(originalTarget, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 462,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hologramEffect.Initialize(circleType);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 470,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainTarget = Instantiate(originalTarget, originalTarget.transform.position, originalTarget.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainEffect.Initialize(circleType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return fishPrefabs[Random.Range(0, fishPrefabs.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 498,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return crystalPrefabs[Random.Range(0, crystalPrefabs.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return spiritPrefabs[Random.Range(0, spiritPrefabs.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return sandSpiritPrefabs[Random.Range(0, sandSpiritPrefabs.Length)];"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 533,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -9.81f * 0.3f, 0); // Reduced gravity underwater"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 537,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -9.81f * spaceGravity, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 541,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -9.81f, 0); // Normal gravity"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "advancedEnvironment.CreateUnderwaterEnvironment();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 567,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Advanced underwater environment activated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 597,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeSceneObjects.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 598,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transformedObjects.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishSystem.OnFishHit(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 611,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalSystem.OnCrystalHit(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 615,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spiritSystem.OnSpiritHit(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 619,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mirageSystem.OnSpiritHit(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 630,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishSystem.OnSharkBlocked(blockData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 634,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalSystem.OnCrystalBlocked(blockData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 638,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spiritSystem.OnVineBlocked(blockData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 642,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mirageSystem.OnSandstormBlocked(blockData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 656,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"SceneTransformationSystem: WhiteCircleMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 658,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"SceneTransformationSystem: GrayCircleMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 660,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"SceneTransformationSystem: RedBlockMaterial not assigned in inspector\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 662,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Scene Transformation System initialized. Traditional mode: {useTraditionalTargets}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 680,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 685,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.8f, 0.9f, 1f, 0.8f) : new Color(0.4f, 0.5f, 0.6f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 686,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 687,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 697,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 700,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(0.3f, 0.6f, 0.9f, 0.7f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 701,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 702,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 712,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 717,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(1f, 1f, 1f, 1f) : new Color(0.8f, 0.2f, 0.8f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 719,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Emission\", 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 720,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 721,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", neonColor * 2f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 730,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 733,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Color neonRed = new Color(1f, 0.2f, 0.2f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 735,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Emission\", 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 736,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 737,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", neonRed * 3f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 747,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 752,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.9f, 0.9f, 1f, 0.8f) : new Color(0.6f, 0.6f, 0.8f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 754,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 755,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 759,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = target.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 770,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 773,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(1f, 0.3f, 0f, 0.9f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 774,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Emission\", 1.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 775,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 776,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", new Color(1f, 0.5f, 0f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 776,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", new Color(1f, 0.5f, 0f, 1f));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 780,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = block.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 783,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.angularDrag = 0f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 792,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 797,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.9f, 0.9f, 1f, 0.7f) : new Color(0.7f, 0.7f, 0.9f, 0.7f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 799,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 800,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 804,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var oscillator = target.GetComponent<HarmonicOscillator>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 807,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "oscillator.amplitude = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 815,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 818,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(0.8f, 0.3f, 0.8f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 819,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 820,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.95f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 824,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var oscillator = block.GetComponent<HarmonicOscillator>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 827,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "oscillator.amplitude = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 838,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnderwaterFishSystem.Instance.CreateFishTarget(circleType, target);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 842,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 846,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.8f, 0.9f, 1f, 0.9f) : new Color(0.5f, 0.6f, 0.8f, 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 851,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = target.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 864,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnderwaterFishSystem.Instance.CreateSharkBlock(block, spinSpeed);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 868,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 871,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(0.3f, 0.3f, 0.5f, 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 874,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = block.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 886,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 891,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(1f, 0.9f, 0.7f, 0.8f) : new Color(0.8f, 0.6f, 0.4f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 893,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 894,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 898,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Random.Range(0f, 1f) < 0.3f)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 900,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var mirageEffect = target.GetComponent<MirageEffect>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 911,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 914,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(0.9f, 0.6f, 0.2f, 0.7f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 915,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 916,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Smoothness\", 0.1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 926,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = target.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 931,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0.9f, 1f, 0.9f, 0.8f) : new Color(0.6f, 0.8f, 0.6f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 933,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Emission\", 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 934,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 935,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", spiritColor * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 943,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = Color.Lerp(renderer.material.color, seasonalTint, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 952,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = block.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 955,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.color = new Color(0.4f, 0.6f, 0.2f, 0.9f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 956,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetFloat(\"_Emission\", 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 957,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 958,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", new Color(0.2f, 0.4f, 0.1f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 958,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", new Color(0.2f, 0.4f, 0.1f, 1f));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 968,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "if (bpm < 80) return new Color(0.8f, 0.9f, 1f, 1f); // Winter (slow)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 969,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "else if (bpm < 120) return new Color(0.9f, 1f, 0.8f, 1f); // Spring (moderate)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 970,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "else if (bpm < 160) return new Color(1f, 0.9f, 0.7f, 1f); // Summer (fast)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneTransformationSystem.cs",
        "line": 971,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "else return new Color(1f, 0.7f, 0.5f, 1f); // Autumn (very fast)"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 57,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CreateAllScenePrefabs());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 63,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfd7\ufe0f Creating missing scene prefabs...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 66,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 72,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"\u274c SceneAssetManager not found!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 79,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject container = new GameObject(\"Generated Scene Prefabs\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 81,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "prefabContainer.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 85,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 All scene prefabs created successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 100,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfd7\ufe0f Creating scene prefab: {sceneName}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 103,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject scenePrefab = new GameObject($\"Scene_{sceneIndex}_{sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 104,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scenePrefab.transform.SetParent(prefabContainer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 129,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scenePrefab.SetActive(false);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 136,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.localScale = new Vector3(10, 1, 10);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 153,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "platform.transform.localScale = new Vector3(8, 1, 8);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 170,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "platform.transform.localScale = new Vector3(12, 1, 12);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 187,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "platform.transform.localScale = new Vector3(15, 0.5f, 15);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 204,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.localScale = new Vector3(8, 1, 8);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 221,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "seafloor.transform.localScale = new Vector3(15, 1, 15);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 238,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.localScale = new Vector3(12, 1, 12);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 255,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "floor.transform.localScale = new Vector3(10, 1, 10);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 282,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnContainer = new GameObject(\"Spawn Points\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 289,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "CreateSpawnZone(spawnContainer, \"Traditional Spawns\", Vector3.zero, new Vector3(6, 3, 6));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 303,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject zone = new GameObject(name);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "zone.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 318,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject boundaryContainer = new GameObject(\"Boundary Markers\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boundaryContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 322,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 325,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * 8f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * 8f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 329,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "marker.transform.localScale = new Vector3(0.2f, 2f, 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 332,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "marker.GetComponent<Collider>().isTrigger = true;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 339,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject zonesContainer = new GameObject(\"Game Mode Zones\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "zonesContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 352,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(0, 2, 5),   // North"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 353,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(0, 2, -5),  // South"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 354,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(5, 2, 0),   // East"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 355,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(-5, 2, 0)   // West"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 359,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(10, 4, 0.5f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 360,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(10, 4, 0.5f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 361,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(0.5f, 4, 10),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 362,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(0.5f, 4, 10)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 365,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 4; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 377,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 4; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 380,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 1, Mathf.Sin(angle)) * 12f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 1, Mathf.Sin(angle)) * 12f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 384,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "stand.transform.localScale = new Vector3(4, 2, 2);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 391,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainEffect = new GameObject(\"Rain Effect\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainEffect.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 393,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rainEffect.transform.localPosition = new Vector3(0, 8, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 398,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 399,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 401,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 404,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 500;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 408,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(20, 1, 20);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 414,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 6; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 417,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 5, Mathf.Sin(angle)) * 15f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 5, Mathf.Sin(angle)) * 15f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 421,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "building.transform.localScale = new Vector3(2, 10, 2);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 425,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = building.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", Color.cyan);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 437,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spaceContainer = new GameObject(\"Space Elements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spaceContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 441,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 444,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), Random.Range(2f, 8f), Mathf.Sin(angle)) * Random.Range(20f, 30f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), Random.Range(2f, 8f), Mathf.Sin(angle)) * Random.Range(20f, 30f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 448,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debris.transform.localScale = Vector3.one * Random.Range(0.5f, 2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 457,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 12; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 460,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), Random.Range(1f, 4f), Mathf.Sin(angle)) * Random.Range(6f, 10f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 460,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), Random.Range(1f, 4f), Mathf.Sin(angle)) * Random.Range(6f, 10f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 464,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.localScale = new Vector3(1, Random.Range(2f, 6f), 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 464,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.localScale = new Vector3(1, Random.Range(2f, 6f), 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 465,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.rotation = Quaternion.Euler(0, Random.Range(0f, 360f), Random.Range(-15f, 15f));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 469,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = crystal.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 472,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material.SetColor(\"_EmissionColor\", Color.magenta * 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 481,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject underwaterContainer = new GameObject(\"Underwater Elements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "underwaterContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 485,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 15; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 487,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Random.Range(-10f, 10f), Random.Range(0.5f, 3f), Random.Range(-10f, 10f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Random.Range(-10f, 10f), Random.Range(0.5f, 3f), Random.Range(-10f, 10f));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 491,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "seaweed.transform.localScale = new Vector3(0.3f, Random.Range(2f, 5f), 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "seaweed.transform.localScale = new Vector3(0.3f, Random.Range(2f, 5f), 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 499,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject oasisContainer = new GameObject(\"Oasis Elements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "oasisContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 503,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 5; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 506,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 3, Mathf.Sin(angle)) * 8f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Mathf.Cos(angle), 3, Mathf.Sin(angle)) * 8f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 510,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "palm.transform.localScale = new Vector3(0.5f, 6f, 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 517,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "water.transform.localScale = new Vector3(4, 0.1f, 4);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 524,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject forestContainer = new GameObject(\"Forest Elements\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "forestContainer.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 528,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 20; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 530,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Random.Range(-8f, 8f), 2.5f, Random.Range(-8f, 8f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 530,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3(Random.Range(-8f, 8f), 2.5f, Random.Range(-8f, 8f));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 534,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "tree.transform.localScale = new Vector3(0.8f, 5f, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 541,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject(\"Scene Light\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 543,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.localPosition = new Vector3(0, 8, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.localRotation = Quaternion.Euler(50, 30, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 557,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject audioObj = new GameObject(\"Ambient Audio\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioObj.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 564,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "audioSource.volume = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 565,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "audioSource.spatialBlend = 0f; // 2D sound"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 571,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject primitive = GameObject.CreatePrimitive(type);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "primitive.transform.SetParent(parent.transform);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 581,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = obj.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 609,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowModeSpawnArea = new Vector3(8, 6, 12),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 610,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffModeSpawnArea = new Vector3(6, 8, 6),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 611,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "dodgingModeSpawnArea = new Vector3(10, 8, 10)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 622,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 624,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (createdPrefabs.ContainsKey(i))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 627,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var field = System.Array.Find(fields, f => f.Name == fieldName);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 631,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "field.SetValue(sceneAssetManager, createdPrefabs[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 632,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Assigned {fieldName} to SceneAssetManager\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 650,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CreateAllScenePrefabs());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return createdPrefabs.ContainsKey(sceneIndex) ? createdPrefabs[sceneIndex] : null;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 674,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gameObject.SetActive(false);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 683,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireCube(transform.position, GetComponent<BoxCollider>().size);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 683,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireCube(transform.position, GetComponent<BoxCollider>().size);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 691,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"Player\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 693,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Player approaching boundary\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/ScenePrefabCreator.cs",
        "line": 715,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Configured game mode zones for {config.sceneName}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxRainParticles = 5000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float rainSpeed = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float rainArea = 100f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float lightningFrequency = 8f; // seconds between strikes"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float lightningDuration = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 29,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve lightningIntensityCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float environmentScale = 200f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRate = 90;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 76,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.6f, 0.7f, 0.8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 88,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.4f, 0.5f, 0.6f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 100,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.2f, 0.3f, 0.4f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf27\ufe0f Creating HD Rain Scene...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 HD Rain Scene created successfully!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Environment setup complete\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 184,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.2f, 0.2f, 0.3f), new Color(0.6f, 0.6f, 0.7f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.2f, 0.2f, 0.3f), new Color(0.6f, 0.6f, 0.7f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 186,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skybox.SetColor(\"_Color1\", new Color(0.2f, 0.2f, 0.3f)); // Dark storm clouds"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skybox.SetColor(\"_Color1\", new Color(0.2f, 0.2f, 0.3f)); // Dark storm clouds"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 187,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skybox.SetColor(\"_Color2\", new Color(0.6f, 0.6f, 0.7f)); // Lighter gray"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skybox.SetColor(\"_Color2\", new Color(0.6f, 0.6f, 0.7f)); // Lighter gray"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skybox.SetFloat(\"_Exponent\", 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 192,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.fogColor = new Color(0.5f, 0.5f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 194,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.fogDensity = 0.02f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 205,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Environment setup complete\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 210,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 16; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject mountain = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mountain.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 217,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(150f, 300f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 219,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mountain.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(20f, 80f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 225,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mountain.transform.localScale = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(30f, 60f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(40f, 120f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(30f, 60f)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 232,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.4f, 0.3f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.4f, 0.3f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 233,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 234,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mountainMat.color = new Color(0.3f, 0.4f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mountainMat.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mountainMat.SetFloat(\"_Smoothness\", 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 237,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "mountain.GetComponent<Renderer>().material = mountainMat;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject ground = GameObject.CreatePrimitive(PrimitiveType.Plane);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ground.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 249,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ground.transform.position = new Vector3(0, -2f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 253,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.2f, 0.3f, 0.2f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.2f, 0.3f, 0.2f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 254,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 255,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "groundMat.color = new Color(0.2f, 0.3f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "groundMat.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "groundMat.SetFloat(\"_Smoothness\", 0.1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 258,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "ground.GetComponent<Renderer>().material = groundMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 267,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject(\"Main Light\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 273,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "mainLight.intensity = 0.3f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 274,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mainLight.color = new Color(0.7f, 0.8f, 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 278,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightningObj = new GameObject(\"Lightning Light\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 279,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightningObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 282,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lightningLight.intensity = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 283,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lightningLight.color = new Color(0.9f, 0.95f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Lighting setup complete\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 292,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainAudioObj = new GameObject(\"Rain Audio\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainAudioObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 296,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rainAudioSource.volume = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 297,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rainAudioSource.spatialBlend = 0f; // 2D audio"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 300,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject thunderAudioObj = new GameObject(\"Thunder Audio\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "thunderAudioObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 304,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "thunderAudioSource.volume = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 305,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "thunderAudioSource.spatialBlend = 0f; // 2D audio"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Audio setup complete\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 334,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int sampleRate = 44100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 335,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int samples = Mathf.RoundToInt(sampleRate * duration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AudioClip clip = AudioClip.Create(\"ProceduralRain\", samples, 1, sampleRate, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 342,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < samples; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "data[i] += Mathf.Sin(time * 20f) * 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clip.SetData(data, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 357,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int sampleRate = 44100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 358,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int samples = Mathf.RoundToInt(sampleRate * duration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AudioClip clip = AudioClip.Create($\"ProceduralThunder_{intensity}\", samples, 1, sampleRate, false);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 364,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < samples; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float envelope = Mathf.Exp(-time * 2f); // Decay envelope"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rumble = Mathf.Sin(time * 40f) * envelope * intensity;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "clip.SetData(data, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 387,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainObj = new GameObject(\"Rain System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 392,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 394,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 395,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.7f, 0.8f, 1f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 400,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 2000;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 404,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(rainArea, 1f, rainArea);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 409,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(-rainSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "forceOverLifetime.x = new ParticleSystem.MinMaxCurve(-2f, 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 423,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rainObj.transform.position = new Vector3(0, 50f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Rain particle system created\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 430,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject mistObj = new GameObject(\"Mist System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mistObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 435,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 436,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = new ParticleSystem.MinMaxCurve(5f, 15f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 438,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.8f, 0.9f, 1f, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 439,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 442,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 25;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 446,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(rainArea * 0.8f, 20f, rainArea * 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.x = new ParticleSystem.MinMaxCurve(-1f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.z = new ParticleSystem.MinMaxCurve(-1f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 453,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mistObj.transform.position = new Vector3(0, 5f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Mist system created\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 460,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject splashObj = new GameObject(\"Splash System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "splashObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 465,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = new ParticleSystem.MinMaxCurve(2f, 5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = new ParticleSystem.MinMaxCurve(0.1f, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 468,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.9f, 0.95f, 1f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 469,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 472,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 100;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 476,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(rainArea * 0.5f, 1f, rainArea * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(1f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.radial = new ParticleSystem.MinMaxCurve(1f, 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 483,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "splashObj.transform.position = new Vector3(0, -4.5f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Splash system created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "nextLightningTime = Time.time + Random.Range(2f, 5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Lightning system ready\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 501,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject ppObj = new GameObject(\"Post Process Volume\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ppObj.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Post-processing setup complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 517,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Weather intensity set to: {currentConfig.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 532,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "forceOverLifetime.x = new ParticleSystem.MinMaxCurve("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 552,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainAudioSource.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 579,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float waitTime = Random.Range(lightningFrequency * 0.5f, lightningFrequency * 1.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(waitTime * 1000));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 597,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 602,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = lightningIntensityCurve.Evaluate(normalizedTime) * 8f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 611,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightningLight.intensity *= Random.Range(0.5f, 1.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 616,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 621,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lightningLight.intensity = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 625,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float thunderDelay = Random.Range(0.5f, 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 626,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(thunderDelay * 1000));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 631,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AudioClip thunderClip = thunderSounds[Random.Range(0, thunderSounds.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 634,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "thunderAudioSource.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 639,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Lightning trigger error: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 695,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireCube(transform.position + Vector3.up * 50f, new Vector3(rainArea, 1f, rainArea));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireCube(transform.position + Vector3.up * 50f, new Vector3(rainArea, 1f, rainArea));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 699,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(transform.position, currentConfig.visibilityRange);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 712,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Complete rain environment created\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/RainSceneCreator.cs",
        "line": 743,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\uddd1\ufe0f Rain environment destroyed\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 78,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject containerObj = new GameObject(\"Scene Container\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 80,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sceneContainer.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 83,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfd7\ufe0f Scene Asset Manager initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Invalid scene index: {sceneIndex}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Failed to load scene prefab for index {sceneIndex}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 114,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentActiveScene = Instantiate(scenePrefab, sceneContainer);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 124,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneLoaded?.Invoke(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 125,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Scene {sceneIndex} ({GetSceneName(sceneIndex)}) loaded successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading scene {sceneIndex}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 138,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (assetHandles.ContainsKey(assetKey))"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 168,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(0.7f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Failed to load addressable asset: {assetKey}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 179,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"\u274c Error loading addressable asset {assetKey}: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 186,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f No prefab defined for scene {sceneIndex}, creating default\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 206,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject defaultScene = new GameObject(\"Default Scene\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject ground = GameObject.CreatePrimitive(PrimitiveType.Plane);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "ground.transform.SetParent(defaultScene.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 215,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject(\"Directional Light\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(defaultScene.transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 219,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "light.intensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.rotation = Quaternion.Euler(50f, -30f, 0f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 227,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(0.8f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 243,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLoadingProgress?.Invoke(1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 251,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -20f, 0); // Stronger gravity for rain"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 267,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -5f, 0); // Reduced gravity underwater"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentActiveScene.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 289,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadedScenes.Remove(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 290,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSceneUnloaded?.Invoke(sceneIndex);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 297,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Physics.gravity = new Vector3(0, -9.81f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(50);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return loadedScenes.ContainsKey(sceneIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (pooledScenes.ContainsKey(sceneIndex)) return;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 351,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject pooledScene = Instantiate(scenePrefab, sceneContainer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pooledScene.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udce6 Preloaded scene {sceneIndex} ({GetSceneName(sceneIndex)})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "loadedScenes.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pooledScenes.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\uddf9 All scenes cleaned up\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (handle.IsValid())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Addressables.Release(handle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneAssetManager.cs",
        "line": 392,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "assetHandles.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float performanceThreshold = 60f; // Target FPS"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float originalFrameRate = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float postMigrationFrameRate = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalParticleSystemsMigrated = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 87,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"VFX Graph Migration System initialized with {legacyParticleSystems.Length} particle systems found\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 102,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Migration already in progress\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Starting automatic VFX Graph migration...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 113,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < legacyParticleSystems.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 116,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particleSystem != null && !migrationMap.ContainsKey(particleSystem))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 121,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 128,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Migration completed! Migrated {totalParticleSystemsMigrated} systems. Performance gain: {overallPerformanceGain:F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error during auto migration: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Cannot migrate null particle system\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (migrationMap.ContainsKey(particleSystem))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Particle system {particleSystem.name} already migrated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 163,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Migrating particle system: {particleSystem.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"No VFX prefab available for type {vfxType}\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 178,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "VisualEffect vfxInstance = Instantiate(vfxPrefab, particleSystem.transform.position, particleSystem.transform.rotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 179,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.transform.SetParent(particleSystem.transform.parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 197,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "completedMigrations.Add(migrationData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 197,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "completedMigrations.Add(migrationData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "particleSystem.gameObject.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Successfully migrated {particleSystem.name} to VFX Graph\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string name = particleSystem.name.ToLower();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (name.Contains(\"rain\") || name.Contains(\"water\") || name.Contains(\"drop\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (name.Contains(\"spark\") || name.Contains(\"star\") || name.Contains(\"glitter\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (name.Contains(\"smoke\") || name.Contains(\"steam\") || name.Contains(\"mist\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (name.Contains(\"explosion\") || name.Contains(\"burst\") || name.Contains(\"blast\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (name.Contains(\"lightning\") || name.Contains(\"electric\") || name.Contains(\"bolt\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Rate\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Rate\", emission.rateOverTime.constant);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Lifetime\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Lifetime\", main.startLifetime.constant);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Speed\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Speed\", main.startSpeed.constant);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasVector3(\"Velocity\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetVector3(\"Velocity\", velocityOverLifetime.space == ParticleSystemSimulationSpace.Local ?"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasVector4(\"Color\"))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 264,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetVector4(\"Color\", new Vector4(color.r, color.g, color.b, color.a));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetVector4(\"Color\", new Vector4(color.r, color.g, color.b, color.a));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Size\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Size\", main.startSize.constant);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"ShapeRadius\") && shape.shapeType == ParticleSystemShapeType.Circle)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 275,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"ShapeRadius\", shape.radius);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasVector3(\"ShapeSize\") && shape.shapeType == ParticleSystemShapeType.Box)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetVector3(\"ShapeSize\", shape.scale);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield(); // Allow frame to complete"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasInt(\"MaxParticles\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetInt(\"MaxParticles\", 2000); // Reasonable limit for VR"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Brightness\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Brightness\", 0.8f); // Reduce brightness for VR comfort"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vfxInstance.HasFloat(\"Density\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vfxInstance.SetFloat(\"Density\", 0.6f); // Reduce density for performance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return VRPerformanceMonitor.Instance.GetCurrentMetrics().frameRate;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 329,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var report = new System.Text.StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== VFX Graph Migration Report ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Total Migrations: {totalParticleSystemsMigrated}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Performance Gain: {(postMigrationFrameRate - originalFrameRate):F1} FPS\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Original FPS: {originalFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Post-Migration FPS: {postMigrationFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 337,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"Individual Migrations:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"- {migration.originalName}: {(migration.migrationSuccessful ? \"SUCCESS\" : \"FAILED\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (migrationMap.ContainsKey(originalSystem))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "originalSystem.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationMap.Remove(originalSystem);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Reverted migration for {originalSystem.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "kvp.Key.gameObject.SetActive(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "migrationMap.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "completedMigrations.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 386,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalParticleSystemsMigrated = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/VFXGraphMigrationSystem.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"All VFX Graph migrations reverted\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int particleJobBatchSize = 64;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float environmentScale = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float effectsIntensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxFishCount = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCoralCount = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float oceanCurrentStrength = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 68,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int frameCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 69,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float performanceTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 70,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Advanced Immersive Environment System initialized with Unity 6 optimizations\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 120,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int maxParticles = 1000;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 130,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.2f, 0.6f, 1f, 0.7f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 130,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.2f, 0.6f, 1f, 0.7f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 131,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 133,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "underwaterMaterial.SetFloat(\"_Surface\", 1); // Transparent"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 134,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "underwaterMaterial.SetColor(\"_BaseColor\", new Color(0.2f, 0.6f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 134,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "underwaterMaterial.SetColor(\"_BaseColor\", new Color(0.2f, 0.6f, 1f, 0.7f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(Color.cyan) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 139,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 139,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescenceMaterial.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescenceMaterial.SetColor(\"_EmissionColor\", Color.cyan * 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 146,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(1f, 0.3f, 0.2f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(1f, 0.3f, 0.2f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 147,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 149,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "coralMaterial.SetColor(\"_BaseColor\", new Color(1f, 0.3f, 0.2f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coralMaterial.SetColor(\"_BaseColor\", new Color(1f, 0.3f, 0.2f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphSystem.RegisterEnvironmentRenderer(this);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 188,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "frameCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 189,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "performanceTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in AdvancedImmersiveEnvironmentSystem Update: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentJobHandle = environmentJob.Schedule(particlePositions.Length, particleJobBatchSize);"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 217,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ApplyJobResults());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 230,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForEndOfFrame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 234,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeParticleSystems.Count && i < particlePositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc1f Creating advanced underwater environment with Unity 6 optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced underwater environment created successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int fishCount = Mathf.Min(maxFishCount, 200);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 282,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < fishCount; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject fishPrefab = underwaterFishPrefabs[Random.Range(0, underwaterFishPrefabs.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnPosition.y = Mathf.Abs(spawnPosition.y) + 2f; // Keep above ground"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 290,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject fish = Instantiate(fishPrefab, spawnPosition, Random.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 293,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var lodGroup = fish.GetComponent<LODGroup>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 301,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var fishBehavior = fish.GetComponent<FishTargetBehavior>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 308,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = fish.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 311,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.drag = 2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 313,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(fish);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(fish);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 325,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lods[0] = new LOD(0.6f, renderers);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 329,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < renderers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mediumRenderers[i].material.shader = Shader.Find(\"Universal Render Pipeline/Simple Lit\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 337,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lods[1] = new LOD(0.3f, mediumRenderers);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 342,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lods[2] = new LOD(0.1f, lowRenderers);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodGroup.SetLODs(lods);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodGroup.RecalculateBounds();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int coralCount = Mathf.Min(maxCoralCount, 50);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 356,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < coralCount; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Quaternion rotation = Quaternion.Euler(0, Random.Range(0, 360), 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 scale = Vector3.one * Random.Range(0.5f, 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 364,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "coralPositions.Add(Matrix4x4.TRS(position, rotation, scale));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coralPositions.Add(Matrix4x4.TRS(position, rotation, scale));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 370,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(RenderInstancedCorals(coralPositions));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 376,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var coralMesh = coralPrefabs[0].GetComponent<MeshFilter>()?.sharedMesh;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (coralMesh == null || !optimizedMaterials.ContainsKey(\"Coral\")) yield break;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Graphics.DrawMeshInstanced("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coralPositions.ToArray(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 392,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForEndOfFrame(); // Wait for next frame"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 401,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bubbles = Instantiate(bubbleParticlesPrefab, Vector3.zero, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 402,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bubbleSystem = bubbles.GetComponent<ParticleSystem>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 406,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeParticleSystems.Add(bubbleSystem);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticleSystems.Add(bubbleSystem);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 408,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(bubbles);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(bubbles);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 414,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bioluminescence = Instantiate(bioluminescenceParticlesPrefab, Vector3.zero, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 415,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioSystem = bioluminescence.GetComponent<ParticleSystem>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 419,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeParticleSystems.Add(bioSystem);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticleSystems.Add(bioSystem);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 421,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(bioluminescence);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 421,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(bioluminescence);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 428,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 429,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 430,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 431,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.8f, 0.9f, 1f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 432,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 435,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 20f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 439,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(50f, 1f, 50f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 444,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.y = 2f; // Bubbles rise"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 450,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 451,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 452,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 454,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 500;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 457,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 50f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 461,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 25f;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 467,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(ReactToMusic(bioSystem));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 475,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject caustics = Instantiate(causticsProjectorPrefab, new Vector3(0, 10f, 0), Quaternion.Euler(90, 0, 0));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 475,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject caustics = Instantiate(causticsProjectorPrefab, new Vector3(0, 10f, 0), Quaternion.Euler(90, 0, 0));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject caustics = Instantiate(causticsProjectorPrefab, new Vector3(0, 10f, 0), Quaternion.Euler(90, 0, 0));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 476,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var projector = caustics.GetComponent<Light>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 480,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "projector.color = new Color(0.7f, 0.9f, 1f, 1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 481,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "projector.intensity = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "causticsAnimator.Initialize();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 488,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(caustics);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(caustics);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 497,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.PlayEnvironmentalSound(underwaterAmbientSound, 0.3f, true);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 510,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 30; i++)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 515,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject seaweed = Instantiate(seaweedPrefab, position, Random.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 518,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var cloth = seaweed.GetComponent<Cloth>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 525,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "cloth.damping = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 526,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "cloth.stretchingStiffness = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 527,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "cloth.bendingStiffness = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 532,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "windZone.radius = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 534,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "windZone.windTurbulence = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 536,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(seaweed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Add(seaweed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 547,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float audioEnergy = audioManager.GetCurrentAudioEnergy();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float beatIntensity = audioManager.GetBeatIntensity();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 556,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForEndOfFrame();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 563,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 currentDirection = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(Time.time * 0.3f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(Time.time * 0.2f)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 573,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var rigidbody = obj.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 576,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rigidbody.AddForce(currentDirection, ForceMode.Acceleration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 583,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float playerDistance = Vector3.Distance(transform.position, GetPlayerPosition());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 584,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float glowIntensity = Mathf.Lerp(0.5f, 2f, 1f - (playerDistance / 10f));"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 590,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var bioluminescence = obj.GetComponent<BioluminescenceEffect>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 593,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioluminescence.SetIntensity(glowIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float audioEnergy = audioManager.GetCurrentAudioEnergy();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 604,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float beatIntensity = audioManager.GetBeatIntensity();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 624,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = Mathf.Max(main.maxParticles - 20, 50);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 628,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Adjusted environment quality for better performance\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 636,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 648,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeEnvironmentObjects.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 649,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticleSystems.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetUnderwaterMode(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 656,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.StopEnvironmentalSounds();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 671,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 675,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particlePositions.IsCreated) particlePositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 676,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particleVelocities.IsCreated) particleVelocities.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 677,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particleLifetimes.IsCreated) particleLifetimes.Dispose();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 706,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "float3 current = new float3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 707,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.sin(lifetime * 0.3f) * oceanCurrentStrength,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 709,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.cos(lifetime * 0.2f) * oceanCurrentStrength"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 714,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "velocity *= 0.99f; // Drag"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 724,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "position = playerPosition + (math.normalize(position - playerPosition) * 25f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 725,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "lifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 741,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float animationSpeed = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 742,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float intensityVariation = 0.3f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 747,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "causticsLight = GetComponent<Light>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 759,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float variation = Mathf.Sin(Time.time * animationSpeed) * intensityVariation;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/AdvancedImmersiveEnvironmentSystem.cs",
        "line": 763,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.Rotate(0, 0, Time.deltaTime * 5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 16,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxCrystals = 20;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 17,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float resonanceRadius = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 18,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float harmonicFrequency = 440f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 44,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"CrystalResonance\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 53,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.8f, 0.4f, 1f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 54,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 25;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 61,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 77,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"CrystalShatter\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 82,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 83,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 84,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.3f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 85,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(1f, 0.8f, 1f, 1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 86,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 100;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 50)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 104,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxSpirits = 15;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 105,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float magicalRadius = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 106,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float seasonalCycleTime = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 109,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float bloomThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 114,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float seasonalTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 115,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int consecutivePerfectHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 134,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutivePerfectHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 139,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutivePerfectHits = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = new Color(0.6f, 0.7f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 191,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = new Color(1f, 0.9f, 0.6f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 197,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = new Color(0.8f, 0.8f, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 202,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"MagicalSparkles\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 207,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 208,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 209,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 210,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(1f, 1f, 0.5f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 211,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 214,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 15;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 224,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 3; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "flowerPos.y = Mathf.Max(0f, flowerPos.y);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 229,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject flower = Instantiate(flowerPrefabs[Random.Range(0, flowerPrefabs.Length)], flowerPos, Quaternion.identity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 229,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject flower = Instantiate(flowerPrefabs[Random.Range(0, flowerPrefabs.Length)], flowerPos, Quaternion.identity);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 235,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "flowerLight.intensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 236,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "flowerLight.range = 2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 246,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"VineClearing\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 251,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 252,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 253,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.5f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 254,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.2f, 0.8f, 0.2f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 255,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 40;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 20)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 273,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float mirageChance = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 274,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float heatWaveIntensity = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 275,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float sandstormRadius = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 278,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float baseTemperature = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 279,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxTemperature = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 281,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentHeatLevel = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 287,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentHeatLevel += 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentHeatLevel = Mathf.Clamp(currentHeatLevel, baseTemperature, maxTemperature);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentHeatLevel = Mathf.Lerp(currentHeatLevel, baseTemperature, Time.deltaTime * 0.2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 316,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"SandParticles\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 321,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 322,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 323,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 324,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(1f, 0.8f, 0.4f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 325,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 328,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 15;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 336,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject heatWave = new GameObject(\"HeatWave\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 347,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject effect = new GameObject(\"SandstormDispersion\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 352,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 353,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 354,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 355,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.8f, 0.6f, 0.3f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 356,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 100;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 50)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 380,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float timer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 384,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.fogDensity = Mathf.Lerp(originalFogDensity, targetFogDensity, timer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)((duration - 2f) * 1000));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 392,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "timer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.fogDensity = Mathf.Lerp(targetFogDensity, originalFogDensity, timer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in visibility reduction effect: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 409,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.fogDensity = 0.01f; // Default fog density"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 420,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Color heatColor = Color.Lerp(Color.white, new Color(1f, 0.8f, 0.4f), heatIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color heatColor = Color.Lerp(Color.white, new Color(1f, 0.8f, 0.4f), heatIntensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 427,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject mirage = GameObject.CreatePrimitive(PrimitiveType.Cylinder);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 430,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "mirage.transform.localScale = new Vector3(0.3f, 0.05f, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 433,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Renderer renderer = mirage.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 434,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material mirageMaterial = new Material(renderer.material);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 436,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "mirageColor.a = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mirageEffect.Initialize(1f); // 100% chance it's a mirage"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 445,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Collider collider = mirage.GetComponent<Collider>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 451,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeMirages.Add(mirage);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeMirages.Add(mirage);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 463,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float mirageChance = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 465,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float shimmerSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 469,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float shimmerTimer = 0f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 473,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "targetRenderer = GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 504,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material mirageMaterial = new Material(originalMaterial);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 506,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "color.a = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float shimmer = 0.5f + Mathf.Sin(shimmerTimer) * 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 530,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float frequency = 440f; // A4 note"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 531,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float amplitude = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 535,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float timer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/SceneSpecificSystems.cs",
        "line": 547,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float oscillation = Mathf.Sin(timer * frequency * 2f * Mathf.PI / 100f) * amplitude;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 27,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.2f, 0.1f, 0.3f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 28,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.8f, 0.2f, 0.4f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 35,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.05f, 0.05f, 0.2f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 36,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.1f, 0.1f, 0.3f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 43,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.3f, 0.3f, 0.3f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 44,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.5f, 0.5f, 0.8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 51,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.4f, 0.3f, 0.5f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 52,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.6f, 0.4f, 0.8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 59,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.2f, 0.4f, 0.3f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 60,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.3f, 0.8f, 0.5f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 67,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.1f, 0.3f, 0.4f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 68,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.2f, 0.6f, 0.8f),"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 72,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int currentThemeIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 74,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float themeSwitchInterval = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 79,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float musicReactivityStrength = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 80,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float bassReactivity = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 81,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float trebleReactivity = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 85,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float lodDistance = 20f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve lightIntensityCurve = AnimationCurve.EaseInOut(0, 0.5f, 1, 2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 126,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float bassEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 127,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float midEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 128,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float trebleEnergy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 165,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int maxParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 174,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnAudioAnalysis.AddListener(OnAudioAnalysis);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 175,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener(OnBeatDetected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Dynamic Background System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float targetIntensity = lightIntensityCurve.Evaluate(totalEnergy * musicReactivityStrength);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mainLight.intensity = Mathf.Lerp(mainLight.intensity, targetIntensity, Time.deltaTime * 5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 248,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < accentLights.Length && i < frequencyBands.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accentLights[i].intensity = Mathf.Lerp(accentLights[i].intensity, bandEnergy, Time.deltaTime * 10f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color targetColor = Color.HSVToRGB((float)i / frequencyBands.Length, 0.8f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accentLights[i].color = Color.Lerp(accentLights[i].color, targetColor, Time.deltaTime * 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = Mathf.Lerp(emission.rateOverTime.constant, targetRate, Time.deltaTime * 5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = Mathf.Lerp(main.startSpeed.constant, targetSpeed, Time.deltaTime * 3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 283,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < reactiveObjects.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects[i].localScale = Vector3.Lerp(currentScale, targetScaleVector, Time.deltaTime * 8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[]"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0.0f, (short)(50 * intensity))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float targetIntensity = originalIntensity * lightIntensityCurve.Evaluate(intensity);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 332,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 333,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mainLight.intensity = Mathf.Lerp(originalIntensity, targetIntensity, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 345,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mainLight.intensity = Mathf.Lerp(targetIntensity, originalIntensity, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 351,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in light pulse effect: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = particleJob.Schedule(particlePositions.Length, 64);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 422,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentEnvironment = Instantiate(currentTheme.environmentPrefab, transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.PlaySFX(currentTheme.ambientSound, Vector3.zero, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Loaded background theme: {currentTheme.themeName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject[] reactiveGameObjects = GameObject.FindGameObjectsWithTag(\"Reactive\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 462,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects.Add(obj.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 462,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects.Add(obj.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 469,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects.Add(component.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reactiveObjects.Add(component.transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticles.Clear();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 484,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "var instance = Instantiate(particleSystem, transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 485,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeParticles.Add(instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticles.Add(instance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeParticles.AddRange(environmentParticles);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "musicReactivityStrength = Mathf.Clamp01(strength);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Create cyberpunk theme setup\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 534,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particlePositions.IsCreated) particlePositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particleVelocities.IsCreated) particleVelocities.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 538,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (particleLifetimes.IsCreated) particleLifetimes.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/DynamicBackgroundSystem.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(transform.position, lodDistance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float narrativeIntensity = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float atmosphereTransitionSpeed = 2.0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 32,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve atmosphereResponseCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxParticleCount = 10000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float audioReactivitySensitivity = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRate = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 56,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float qualityAdjustmentThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 99,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerPerformanceScore = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 100,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float environmentalComplexity = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfad Initializing Enhanced SceneSense System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Enhanced SceneSense System initialized!\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 173,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "hdLightData = primaryDirectionalLight.GetComponent<HDAdditionalLightData>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (globalVolume.profile.TryGet(out volumetricFog))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf05 Lighting system initialized with HDRP features\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 201,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(1.0f, 0.95f, 0.8f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 202,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.8f, 0.9f, 1.0f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 213,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.4f, 0.5f, 0.8f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 214,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.3f, 0.4f, 0.6f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 225,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.8f, 0.2f, 1.0f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 226,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.6f, 0.8f, 1.0f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 237,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.1f, 0.1f, 0.3f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 238,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.2f, 0.1f, 0.4f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 249,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.8f, 0.9f, 1.0f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 250,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.9f, 0.8f, 1.0f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 261,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.2f, 0.4f, 0.8f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 262,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.1f, 0.3f, 0.6f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 273,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(1.0f, 0.8f, 0.6f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 274,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(1.0f, 0.9f, 0.7f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 285,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "ambientColor = new Color(0.6f, 0.9f, 0.4f, 1.0f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 286,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fogColor = new Color(0.7f, 1.0f, 0.6f, 1.0f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 293,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfa8 Initialized {atmosphereProfiles.Count} atmosphere profiles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceMetrics.memoryUsage = UnityEngine.Profiling.Profiler.GetTotalAllocatedMemory(0) / (1024f * 1024f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 329,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < performanceHistory.Length - 1; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerPerformanceScore = Mathf.Lerp(playerPerformanceScore,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "(hitAccuracy * 0.7f + Mathf.Clamp01(combo / 10f) * 0.3f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float targetComplexity = Mathf.Lerp(0.5f, 2.0f, playerPerformanceScore);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 361,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetComplexity *= 0.8f; // Reduce complexity if performance is poor"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environmentalComplexity = Mathf.Lerp(environmentalComplexity, targetComplexity, Time.deltaTime * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float t = atmosphereResponseCurve.Evaluate(transitionSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 377,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAtmosphere.ambientColor = Color.Lerp(currentAtmosphere.ambientColor, targetAtmosphere.ambientColor, t);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAtmosphere.fogColor = Color.Lerp(currentAtmosphere.fogColor, targetAtmosphere.fogColor, t);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAtmosphere.fogDensity = Mathf.Lerp(currentAtmosphere.fogDensity, targetAtmosphere.fogDensity, t);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAtmosphere.lightIntensity = Mathf.Lerp(currentAtmosphere.lightIntensity, targetAtmosphere.lightIntensity, t);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 381,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentAtmosphere.particleDensity = Mathf.Lerp(currentAtmosphere.particleDensity, targetAtmosphere.particleDensity, t);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Vector3.Distance(currentAtmosphere.ambientColor, targetAtmosphere.ambientColor) < 0.01f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfad Atmosphere transition to {targetAtmosphere.profileName} complete\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float beatStrength = audioManager.GetCurrentBeatStrength();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float musicEnergy = audioManager.GetCurrentEnergyLevel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float performanceModifier = Mathf.Lerp(0.8f, 1.2f, playerPerformanceScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "audioManager.SetGlobalReverb(currentAtmosphere.reverbPreset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (atmosphereProfiles.ContainsKey(narrative))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfad Setting scene narrative to: {targetAtmosphere.profileName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "narrativeIntensity = Mathf.Clamp01(intensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 497,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "narrativeIntensity = Mathf.Max(narrativeIntensity, 0.8f); // Ensure high intensity for immersive mode"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 501,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfad Enhanced Scene Sense: IMMERSIVE MODE activated - Full narrative storytelling enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 505,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "narrativeIntensity = Mathf.Min(narrativeIntensity, 0.3f); // Lower intensity for normal mode"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Enhanced Scene Sense: NORMAL MODE activated - Traditional experience enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (atmosphereProfiles.ContainsKey(currentNarrative))"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 525,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(LightningStrikeEffect(intensity));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 528,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(CrystalResonanceEffect(intensity));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 531,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(HologramFlickerEffect(intensity));"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 534,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(BioluminescenceFlashEffect(intensity));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentNarrative = currentNarrative.ToString(),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 571,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 586,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 595,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 5; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 599,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hdLightData.intensity *= 0.5f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 600,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.05f * intensity);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 601,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "hdLightData.intensity *= 2.0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 602,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.1f * intensity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 611,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = Color.Lerp(originalAmbient, Color.cyan, intensity * 0.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 612,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 619,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceHistory.IsCreated) performanceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/EnhancedSceneSenseSystem.cs",
        "line": 620,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (atmosphereValues.IsCreated) atmosphereValues.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int textureResolution = 2048;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int particleCount = 500;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"All HD backgrounds created!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 46,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject cyberpunk = new GameObject(\"Cyberpunk_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 47,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cyberpunk.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 62,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject space = new GameObject(\"Space_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 63,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "space.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 77,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject abstract = new GameObject(\"Abstract_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 78,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "abstract.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 91,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject crystal = new GameObject(\"Crystal_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 105,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject aurora = new GameObject(\"Aurora_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aurora.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 119,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject underwater = new GameObject(\"Underwater_Environment\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "underwater.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 135,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 20; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject building = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 139,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "building.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 143,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(50f, 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float height = Random.Range(20f, 80f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 146,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 149,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 153,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "building.transform.localScale = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 154,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(5f, 15f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(5f, 15f)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 161,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "building.GetComponent<Renderer>().material = neonMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 170,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 50; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject sign = GameObject.CreatePrimitive(PrimitiveType.Quad);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 174,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sign.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(30f, 90f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 179,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float height = Random.Range(10f, 60f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 181,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "sign.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 182,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sign.transform.LookAt(Vector3.zero);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 188,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sign.transform.localScale = Vector3.one * Random.Range(2f, 8f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 192,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "sign.GetComponent<Renderer>().material = signMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 200,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.1f, 0.05f, 0.2f), new Color(0.8f, 0.2f, 0.4f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.1f, 0.05f, 0.2f), new Color(0.8f, 0.2f, 0.4f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 201,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 202,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color1\", new Color(0.1f, 0.05f, 0.2f)); // Dark purple"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 202,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color1\", new Color(0.1f, 0.05f, 0.2f)); // Dark purple"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 203,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color2\", new Color(0.8f, 0.2f, 0.4f)); // Neon pink"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color2\", new Color(0.8f, 0.2f, 0.4f)); // Neon pink"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetFloat(\"_Exponent\", 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 207,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = new Color(0.3f, 0.1f, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rainSystem = new GameObject(\"RainEffect\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rainSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 217,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 218,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 219,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 220,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.5f, 0.7f, 1f, 0.8f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 221,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 224,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 500;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 228,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(200f, 1f, 200f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 230,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rainSystem.transform.position = new Vector3(0, 100f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 237,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(0f, 1f, 0.5f), new Color(1f, 0.3f, 0f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 240,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 30; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 242,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject($\"NeonLight_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "neonLight.color = neonColors[Random.Range(0, neonColors.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "neonLight.intensity = Random.Range(2f, 8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "neonLight.range = Random.Range(10f, 30f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(20f, 80f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float height = Random.Range(5f, 50f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 256,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 257,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 259,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 270,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject starField = new GameObject(\"StarField\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "starField.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 276,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = Random.Range(0.1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 279,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 2000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 282,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 283,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "emission.SetBursts(new ParticleSystem.Burst[] {"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 284,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new ParticleSystem.Burst(0f, 2000)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 289,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 500f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 296,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Color.red, new Color(1f, 0.8f, 0.4f), new Color(1f, 1f, 0.8f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 297,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Color(1f, 0.9f, 0.7f), Color.blue"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 300,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < planetNames.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject planet = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "planet.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(200f, 800f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 309,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "planet.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-100f, 100f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "planet.transform.localScale = Vector3.one * Random.Range(20f, 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(planetColors[i]) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 319,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "planetMat.SetFloat(\"_Metallic\", 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "planetMat.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 323,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "planet.GetComponent<Renderer>().material = planetMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 332,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject nebula = new GameObject(\"Nebula\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "nebula.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 338,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = Random.Range(50f, 200f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 340,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.8f, 0.3f, 1f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 341,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 100;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 345,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(1000f, 300f, 1000f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 347,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "nebula.transform.position = new Vector3(0, 0, 300f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 353,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Color neonColor = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color neonColor = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 355,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(neonColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 356,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mat.SetFloat(\"_Metallic\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mat.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 360,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mat.EnableKeyword(\"_EMISSION\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "mat.SetColor(\"_EmissionColor\", mat.color * 2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 367,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Color glowColor = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color glowColor = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetMaterial(Shader.Find(\"Sprites/Default\"), glowColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 370,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Sprites/Default\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Sprites/Default\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "environment.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Environment '{name}' created and ready\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 385,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 3; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject station = GameObject.CreatePrimitive(PrimitiveType.Cylinder);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 389,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "station.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(150f, 300f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 394,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "station.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-50f, 50f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 400,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "station.transform.localScale = new Vector3(20f, 50f, 20f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 403,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(Color.gray) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 404,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stationMat.SetFloat(\"_Metallic\", 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 407,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "station.GetComponent<Renderer>().material = stationMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 413,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 50; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject asteroid = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "asteroid.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(100f, 500f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 422,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "asteroid.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-100f, 100f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "asteroid.transform.localScale = Vector3.one * Random.Range(2f, 15f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 431,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.2f, 0.1f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.3f, 0.2f, 0.1f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 432,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 433,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "asteroidMat.color = new Color(0.3f, 0.2f, 0.1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 434,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "asteroid.GetComponent<Renderer>().material = asteroidMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 442,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 20; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject shape = GameObject.CreatePrimitive(shapes[Random.Range(0, shapes.Length)]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(20f, 80f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 452,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 453,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-20f, 20f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 458,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.localScale = Vector3.one * Random.Range(3f, 8f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 461,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "shape.GetComponent<Renderer>().material = shapeMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 469,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject energyField = new GameObject(\"EnergyField\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "energyField.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 474,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 475,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = Random.Range(1f, 3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 477,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0f, 1f, 1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 478,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 500;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 481,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 485,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 50f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 491,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.2f, 0f, 0.8f), new Color(1f, 0.5f, 0f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetSkyboxMaterial(new Color(0.2f, 0f, 0.8f), new Color(1f, 0.5f, 0f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 492,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Skybox/Gradient\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 493,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color1\", new Color(0.2f, 0f, 0.8f)); // Deep purple"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color1\", new Color(0.2f, 0f, 0.8f)); // Deep purple"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 494,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color2\", new Color(1f, 0.5f, 0f)); // Orange"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetColor(\"_Color2\", new Color(1f, 0.5f, 0f)); // Orange"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 495,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "skyboxMat.SetFloat(\"_Exponent\", 1.5f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 498,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "RenderSettings.ambientLight = new Color(0.3f, 0.1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 503,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 15; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 505,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject shape = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(30f, 70f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 512,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 10f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 515,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 518,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "shape.transform.localScale = Vector3.one * Random.Range(2f, 6f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 521,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "shape.GetComponent<Renderer>().material = reactMat;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reactive.frequencyBand = Random.Range(0, 8);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 533,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 20; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject crystal = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 539,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(20f, 150f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 540,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 542,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 30f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 545,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 548,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.localScale = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(2f, 8f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 550,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(10f, 25f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 551,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(2f, 8f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 554,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystal.transform.rotation = Quaternion.Euler("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 555,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 556,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 560,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color crystalColor = Color.HSVToRGB(Random.Range(0.5f, 0.8f), 0.8f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(crystalColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 563,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalMat.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalMat.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 567,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "crystal.GetComponent<Renderer>().material = crystalMat;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject reflectivePlane = GameObject.CreatePrimitive(PrimitiveType.Plane);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 575,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reflectivePlane.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 577,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "reflectivePlane.transform.position = new Vector3(0, -5f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 580,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.9f, 0.9f, 1f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.9f, 0.9f, 1f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 581,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 582,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "reflectiveMat.color = new Color(0.9f, 0.9f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 583,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reflectiveMat.SetFloat(\"_Metallic\", 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 584,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reflectiveMat.SetFloat(\"_Smoothness\", 1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 585,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "reflectivePlane.GetComponent<Renderer>().material = reflectiveMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 593,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 595,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject($\"CrystalLight_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 596,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 599,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 600,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * 30f,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 601,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(10f, 30f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 602,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * 30f"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalLight.color = crystalColors[Random.Range(0, crystalColors.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 608,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalLight.intensity = Random.Range(1f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 609,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crystalLight.range = Random.Range(20f, 40f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 620,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject gemstoneSystem = new GameObject(\"GemstoneParticles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 621,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gemstoneSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 625,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 626,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 627,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 629,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 632,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 20;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 636,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 50f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 642,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject auroraSystem = new GameObject(\"AuroraParticles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 643,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "auroraSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 644,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "auroraSystem.transform.position = new Vector3(0, 30f, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 648,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 649,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 650,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = new ParticleSystem.MinMaxCurve(5f, 15f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 651,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0.2f, 1f, 0.8f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 652,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 500;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 655,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 659,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 100f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 664,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject icePlane = GameObject.CreatePrimitive(PrimitiveType.Plane);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 666,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "icePlane.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 668,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "icePlane.transform.position = new Vector3(0, -2f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 671,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.9f, 0.95f, 1f)) :"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 671,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(new Color(0.9f, 0.95f, 1f)) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 672,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 672,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 673,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "iceMat.color = new Color(0.9f, 0.95f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 674,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "iceMat.SetFloat(\"_Metallic\", 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 675,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "iceMat.SetFloat(\"_Smoothness\", 0.9f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 676,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "icePlane.GetComponent<Renderer>().material = iceMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 679,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 30; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 681,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject iceChunk = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 683,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "iceChunk.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 685,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "iceChunk.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 686,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-100f, 100f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 687,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-1f, 5f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 688,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-100f, 100f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 691,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "iceChunk.transform.localScale = Vector3.one * Random.Range(2f, 8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 692,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "iceChunk.transform.rotation = Quaternion.Euler("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 693,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 694,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0f, 360f)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 698,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "iceChunk.GetComponent<Renderer>().material = iceMat;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 705,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 4; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 707,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject lightObj = new GameObject($\"NorthernLight_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 708,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 709,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.position = new Vector3(0, 50f, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 710,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightObj.transform.rotation = Quaternion.Euler(Random.Range(-30f, -60f), i * 90f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 714,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "northernLight.color = new Color(Random.Range(0f, 1f), 1f, Random.Range(0.5f, 1f), 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 714,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "northernLight.color = new Color(Random.Range(0f, 1f), 1f, Random.Range(0.5f, 1f), 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 715,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "northernLight.intensity = Random.Range(0.3f, 0.8f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 726,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject snowSystem = new GameObject(\"SnowParticles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 727,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "snowSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 728,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "snowSystem.transform.position = new Vector3(0, 40f, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 732,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 733,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 734,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = new ParticleSystem.MinMaxCurve(0.1f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 736,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 739,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 100;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 743,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "shape.scale = new Vector3(100f, 1f, 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 747,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(-3f, -1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 752,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 25; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 754,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject coral = GameObject.CreatePrimitive(PrimitiveType.Sphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coral.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 758,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(15f, 100f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 759,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 761,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "coral.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 762,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 763,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 5f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 764,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 767,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coral.transform.localScale = Vector3.one * Random.Range(3f, 12f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 769,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color coralColor = Color.HSVToRGB(Random.Range(0f, 0.15f), 0.8f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 771,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(coralColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 772,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 772,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 774,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coralMat.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 775,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "coralMat.SetFloat(\"_Smoothness\", 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 776,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "coral.GetComponent<Renderer>().material = coralMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 783,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bioSystem = new GameObject(\"BioluminescentParticles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 784,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bioSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 788,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 789,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 790,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = 0.2f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 791,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(0f, 1f, 0.8f, 0.7f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 792,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 300;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 795,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 60;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 799,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 30f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 805,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject causticsObj = new GameObject(\"WaterCaustics\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 806,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "causticsObj.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 810,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "causticLight.color = new Color(0.7f, 0.9f, 1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 811,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "causticLight.intensity = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 820,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 15; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 822,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject fish = GameObject.CreatePrimitive(PrimitiveType.Capsule);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 824,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fish.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 826,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Random.Range(10f, 50f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 827,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float angle = Random.Range(0f, 360f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 829,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fish.transform.position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 830,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle * Mathf.Deg2Rad) * distance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 831,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-5f, 15f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 832,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle * Mathf.Deg2Rad) * distance"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 835,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "fish.transform.localScale = new Vector3(0.5f, 0.3f, 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 836,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fish.transform.rotation = Quaternion.LookRotation(Random.insideUnitSphere);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 838,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color fishColor = Color.HSVToRGB(Random.Range(0.15f, 0.65f), 0.8f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 840,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(fishColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 841,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 841,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 843,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishMat.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 844,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "fishMat.SetFloat(\"_Smoothness\", 0.7f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 845,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "fish.GetComponent<Renderer>().material = fishMat;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 855,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bubbleSystem = new GameObject(\"BubbleParticles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 856,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bubbleSystem.transform.SetParent(parent);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 857,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "bubbleSystem.transform.position = new Vector3(0, -10f, 0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 861,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startLifetime = 6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 862,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.startSpeed = 3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 863,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "main.startSize = new ParticleSystem.MinMaxCurve(0.1f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 864,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "main.startColor = new Color(1f, 1f, 1f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 865,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "main.maxParticles = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 868,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "emission.rateOverTime = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 872,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "shape.radius = 25f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 876,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(2f, 4f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 888,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "lightComponent = GetComponent<Light>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 894,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lightComponent.intensity = baseIntensity + Mathf.Sin(Time.time * Random.Range(5f, 15f)) * 0.5f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 904,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rotationSpeed = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 905,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 10f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 906,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 10f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 907,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(-10f, 10f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Environment/HDBackgroundCreator.cs",
        "line": 913,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.Rotate(rotationSpeed * Time.deltaTime);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int targetFrameRate = 90;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float renderScale = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxShadowDistance = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int msaaSampleCount = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float predictionUpdateInterval = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int performanceHistorySize = 120; // 2 minutes at 60 FPS"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 64,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int historyIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 65,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 66,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageGPUTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfae Initializing Advanced VR Render Graph System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced VR Render Graph System initialized!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "performancePredictor = new MLPerformancePredictor();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performancePredictor.Initialize(performanceHistorySize, targetFrameRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 ML Performance Predictor initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 192,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "foveationEngine = new AdaptiveFoveationEngine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foveationEngine.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc41\ufe0f Adaptive Foveation Engine initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 199,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "gpuDrivenManager = new GPUDrivenRenderingManager();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 200,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gpuDrivenManager.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f GPU Driven Rendering Manager initialized\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 206,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderGraphOptimizer = new RenderGraphOptimizer();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 207,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphOptimizer.Initialize(urpAsset);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Render Graph Optimizer initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (camera.gameObject.name.Contains(\"XR\") ||"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "camera.gameObject.name.Contains(\"VR\") ||"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 224,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "vrCameraList.Add(camera);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 224,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vrCameraList.Add(camera);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 226,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var cameraData = camera.GetComponent<UniversalAdditionalCameraData>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 231,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "vrCameraDataList.Add(cameraData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vrCameraDataList.Add(cameraData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 235,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vrCameras = vrCameraList.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "vrCameraData = vrCameraDataList.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 238,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfa5 Found {vrCameras.Length} VR cameras\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 248,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "urpAsset.cascadeCount = 1; // Single cascade for VR"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 302,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // VR handles its own sync"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Advanced VR optimizations applied - Target FPS: {targetFrameRate}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gpuDrivenManager.UpdateFrame();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 341,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderGraphOptimizer.OptimizeFrame();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 369,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float frameTimeSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 370,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float gpuTimeSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 372,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameTimeHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float reductionRate = Mathf.Lerp(0.02f, 0.1f, (performanceRatio - 1f) * 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderScale = math.max(0.6f, renderScale - reductionRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc9 Reducing render scale to {renderScale:F2} (Frame time: {averageFrameTime * 1000:F1}ms)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 415,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderScale = math.min(1f, renderScale + 0.01f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc8 Increasing render scale to {renderScale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 426,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceAnalysisJobHandle = analysisJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 446,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var prediction = await performancePredictor.PredictPerformanceAsync(currentRenderStats);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var foveationSettings = foveationEngine.CalculateOptimalSettings("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd2e ML predicts performance drop - applying proactive optimizations\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd27 Reduced MSAA to {msaaSampleCount}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Disabled post-processing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Reduced shadow quality\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 524,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udc41\ufe0f Applying foveation - Inner: {settings.innerRadius:F2}, Outer: {settings.outerRadius:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 530,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "return new Vector2(0.5f, 0.5f) + UnityEngine.Random.insideUnitCircle * 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Random.Range(0.1f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Profiling.Profiler.GetCounterValue(\"GPU Main Thread\") / 1000000f; // Convert to ms"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 547,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Profiling.Profiler.GetCounterValue(\"Draw Calls\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 552,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Profiling.Profiler.GetCounterValue(\"Triangles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return UnityEngine.Profiling.Profiler.GetTotalAllocatedMemory(false) / (1024f * 1024f); // MB"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(averageFrameTime / (1f / targetFrameRate));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float frameRateScore = Mathf.Clamp01(targetFrameRate / (1f / averageFrameTime));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 612,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scale = Mathf.Clamp(scale, 0.5f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 616,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf VR Render Scale set to: {scale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 641,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string rendererType = environmentRenderer.GetType().Name;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 642,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf0a Environment renderer registered: {rendererType}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 645,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!registeredRenderers.Contains(environmentRenderer))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 647,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "registeredRenderers.Add(environmentRenderer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 647,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "registeredRenderers.Add(environmentRenderer);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 656,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float spatialHashCellSize = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 661,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spatialHashGrid.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 668,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!spatialHashGrid.ContainsKey(hash))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 672,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "spatialHashGrid[hash].Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 678,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int x = Mathf.FloorToInt(position.x / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 679,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int y = Mathf.FloorToInt(position.y / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 680,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int z = Mathf.FloorToInt(position.z / spatialHashCellSize);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 691,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int x = -1; x <= 1; x++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 693,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int y = -1; y <= 1; y++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 695,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int z = -1; z <= 1; z++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 697,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 offset = new Vector3(x, y, z) * spatialHashCellSize;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 700,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spatialHashGrid.ContainsKey(hash))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 704,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Vector3.Distance(obj.transform.position, center) <= radius)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 706,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "result.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 706,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "result.Add(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 724,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd27 Forcing render optimization...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 727,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderScale = math.max(0.7f, renderScale * 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 737,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Resetting to default quality...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 739,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "renderScale = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 750,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (performanceAnalysisJobHandle.IsCreated) performanceAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 751,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (renderOptimizationJobHandle.IsCreated) renderOptimizationJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 754,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frameTimeHistory.IsCreated) frameTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 755,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gpuTimeHistory.IsCreated) gpuTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (renderScaleHistory.IsCreated) renderScaleHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 757,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (drawCallHistory.IsCreated) drawCallHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 771,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 ML Performance Predictor initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 776,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(10); // Simulate ML inference"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 781,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameTime = current.frameTime * UnityEngine.Random.Range(1f, 1.1f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 782,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gpuTime = current.gpuTime * UnityEngine.Random.Range(1f, 1.05f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 793,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc41\ufe0f Adaptive Foveation Engine initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 801,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float foveationIntensity = Mathf.Clamp01(performanceRatio - 0.8f) * 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 805,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "innerRadius = Mathf.Lerp(0.2f, 0.4f, foveationIntensity),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 806,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "outerRadius = Mathf.Lerp(0.6f, 0.8f, foveationIntensity),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 818,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f GPU Driven Rendering Manager initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 835,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Render Graph Optimizer initialized\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 859,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 860,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgGPUTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 861,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgRenderScale = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 862,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgDrawCalls = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 864,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < historySize; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 878,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float frameTimeVariance = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 879,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < historySize; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 890,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float recentAvg = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRRenderGraphSystem.cs",
        "line": 891,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int recentSamples = math.min(30, historySize); // Last 30 frames"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float acceptableFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float criticalFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetMemoryMB = 2048f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 32,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "private StringBuilder reportBuilder = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int frameBufferIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float frameTimeSum = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Initializing Baseline Profiler - Enhancing Prompt Category 1\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 113,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameTimeBuffer.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Unity Profiler enabled\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Baseline Profiler initialized successfully\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 142,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameDataHistory.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Started profiling session: {sessionName}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 158,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(AnalyzeSession());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcca Ended profiling session: {currentSession.sessionName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 165,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Analyzing profiling session...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Session analysis complete - Primary bottleneck: {currentSession.bottleneckAnalysis.primaryBottleneck}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 209,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "frameDataHistory.Add(frameData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameDataHistory.Add(frameData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameDataHistory.RemoveAt(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Update error in BaselineProfiler: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "long totalMemory = Profiler.GetTotalAllocatedMemory(Profiler.GetMainThreadIndex());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return System.GC.GetTotalMemory(false) / (1024f * 1024f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 264,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int activeRenderers = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Error estimating draw calls: {e.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 291,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var analysis = new BottleneckAnalysis();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 300,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 301,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float avgMemory = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 302,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalStaleFrames = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 351,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var stats = new PerformanceStatistics();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 356,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalFrameTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 359,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalMemory = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 360,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float peakMemory = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 361,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int staleFrames = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "minFrameRate = Mathf.Min(minFrameRate, frameRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "maxFrameRate = Mathf.Max(maxFrameRate, frameRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "peakMemory = Mathf.Max(peakMemory, frame.memoryUsageMB);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 391,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Clear();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 399,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Average FPS ({stats.averageFrameRate:F1}) below target ({targetFrameRate}). Optimize rendering pipeline.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Average FPS ({stats.averageFrameRate:F1}) below target ({targetFrameRate}). Optimize rendering pipeline.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 404,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Minimum FPS ({stats.minimumFrameRate:F1}) critically low. Investigate performance spikes.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 404,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Minimum FPS ({stats.minimumFrameRate:F1}) critically low. Investigate performance spikes.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 410,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Peak memory usage ({stats.peakMemoryUsage:F1}MB) exceeds target ({targetMemoryMB}MB). Implement memory optimization.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"Peak memory usage ({stats.peakMemoryUsage:F1}MB) exceeds target ({targetMemoryMB}MB). Implement memory optimization.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 417,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"High stale frame rate ({staleFramePercentage:F1}%). Optimize frame consistency.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add($\"High stale frame rate ({staleFramePercentage:F1}%). Optimize frame consistency.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 423,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"CPU bottleneck detected. Consider object pooling, batching, and LOD systems.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"CPU bottleneck detected. Consider object pooling, batching, and LOD systems.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 428,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Memory bottleneck detected. Optimize textures, meshes, and garbage collection.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Memory bottleneck detected. Optimize textures, meshes, and garbage collection.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 432,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Ensure Fixed Foveated Rendering is enabled for Quest devices.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Ensure Fixed Foveated Rendering is enabled for Quest devices.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 433,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Use URP with optimized VR settings for best performance.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Use URP with optimized VR settings for best performance.\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 434,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Implement dynamic quality scaling based on performance metrics.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recommendations.Add(\"Implement dynamic quality scaling based on performance metrics.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string filePath = Path.Combine(Application.persistentDataPath, fileName);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "File.WriteAllText(filePath, reportBuilder.ToString());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udcc4 Performance report exported: {filePath}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to export performance report: {e.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 460,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== BASELINE PROFILER PERFORMANCE REPORT ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 467,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Session: {session.sessionName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 468,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Duration: {session.duration:F2} seconds\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Frames Analyzed: {session.frames.Count}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Report Generated: {System.DateTime.Now}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== PERFORMANCE STATISTICS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 474,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Average FPS: {stats.averageFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Minimum FPS: {stats.minimumFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 476,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Maximum FPS: {stats.maximumFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 477,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Average Frame Time: {stats.averageFrameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Average Memory: {stats.averageMemoryUsage:F1}MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 479,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Peak Memory: {stats.peakMemoryUsage:F1}MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 480,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Stale Frames: {stats.totalStaleFrames}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== BOTTLENECK ANALYSIS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 484,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Primary Bottleneck: {bottleneck.primaryBottleneck}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"CPU Bound: {(bottleneck.isCPUBound ? \"Yes\" : \"No\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"GPU Bound: {(bottleneck.isGPUBound ? \"Yes\" : \"No\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"Memory Bound: {(bottleneck.isMemoryBound ? \"Yes\" : \"No\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine(\"=== OPTIMIZATION RECOMMENDATIONS ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/BaselineProfiler.cs",
        "line": 493,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "reportBuilder.AppendLine($\"\u2022 {recommendation}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 13,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxPoolSize = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int materialsCreated = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int materialsReused = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int materialsReturned = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 35,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"MaterialPool initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 54,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!materialPools.ContainsKey(shader))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 64,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Material material = pool.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 68,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pooledMaterials.Remove(material);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 71,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"MaterialPool: Reused material with shader {shader.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 99,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Shader urpShader = Shader.Find(\"Universal Render Pipeline/Lit\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Shader skyboxShader = Shader.Find(\"Skybox/Gradient\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 112,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetColor(\"_Color1\", color1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 113,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetColor(\"_Color2\", color2);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Shader unlitShader = Shader.Find(\"Unlit/Color\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 132,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!enablePooling || material == null || pooledMaterials.Contains(material))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (shader == null || !materialToShader.ContainsKey(material))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 144,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!materialPools.ContainsKey(shader))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pool.Enqueue(material);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 158,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "pooledMaterials.Add(material);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pooledMaterials.Add(material);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"MaterialPool: Returned material with shader {shader.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 181,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"MaterialPool: Cannot create material with null shader\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 185,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Material material = new Material(shader);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"MaterialPool: Created new material with shader {shader.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Color\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_MainTex\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Metallic\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 210,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetFloat(\"_Metallic\", 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Smoothness\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 213,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetFloat(\"_Smoothness\", 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.shader.name.Contains(\"Skybox\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Color1\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetColor(\"_Color1\", Color.white);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Color2\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetColor(\"_Color2\", Color.white);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 222,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (material.HasProperty(\"_Exponent\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 223,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetFloat(\"_Exponent\", 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Material material = pool.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "materialPools.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 245,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "materialToShader.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 246,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pooledMaterials.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 248,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "materialsCreated = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 249,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "materialsReused = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 250,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "materialsReturned = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"MaterialPool: All pools cleared\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 260,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int totalPooled = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(GetPoolStats());"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 286,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 200, 300, 150));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.BeginArea(new Rect(10, 200, 300, 150));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.Label(GetPoolStats());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (GUILayout.Button(\"Clear Pools\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/MaterialPool.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUILayout.EndArea();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxInstances = 10000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int instanceBatchSize = 1023; // GPU instancing limit"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxRenderDistance = 100f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int computeThreadGroups = 64;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 97,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int visibleInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 98,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int culledInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 99,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastCullingTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udda5\ufe0f Initializing Compute Shader Rendering System...\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 146,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "renderingCamera = Camera.main;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingKernel = cullingComputeShader.FindKernel(\"CSCulling\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodSelectionKernel = cullingComputeShader.FindKernel(\"CSLODSelection\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Compute Shader System initialized - Max Instances: {maxInstances}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 172,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "instanceDataBuffer = new ComputeBuffer(maxInstances, sizeof(float) * 32); // Matrix4x4 + extras"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 175,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingResultsBuffer = new ComputeBuffer(maxInstances, sizeof(int));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 178,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lodDataBuffer = new ComputeBuffer(maxInstances, sizeof(int));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 181,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "visibilityBuffer = new ComputeBuffer(maxInstances, sizeof(int));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 184,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "drawArgsBuffer = new ComputeBuffer(5, sizeof(uint), ComputeBufferType.IndirectArguments);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 199,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to load InstancedCulling compute shader via Addressables: {ex.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 201,
        "description": "Resources.Load is legacy, Unity 6 prefers Addressables",
        "solution": "Convert to Addressable Asset System",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader = // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<ComputeShader>(\"ComputeShaders/InstancedCulling\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 201,
        "description": "Unresolved development notes",
        "solution": "Address or document the issue",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader = // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<ComputeShader>(\"ComputeShaders/InstancedCulling\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Failed to load InstancedRendering compute shader via Addressables: {ex.Message}\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 216,
        "description": "Resources.Load is legacy, Unity 6 prefers Addressables",
        "solution": "Convert to Addressable Asset System",
        "can_auto_fix": false,
        "code_snippet": "instancedRenderingShader = // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<ComputeShader>(\"ComputeShaders/InstancedRendering\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 216,
        "description": "Unresolved development notes",
        "solution": "Address or document the issue",
        "can_auto_fix": false,
        "code_snippet": "instancedRenderingShader = // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - // TODO: Convert to Addressables - Resources.Load<ComputeShader>(\"ComputeShaders/InstancedRendering\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 234,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < lodMaterials.Length; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 236,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "lodMaterials[i] = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 236,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "lodMaterials[i] = new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GeometryUtility.CalculateFrustumPlanes(renderingCamera, frustumPlanes);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 293,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes0 = new Vector4(frustumPlanes[0].normal.x, frustumPlanes[0].normal.y, frustumPlanes[0].normal.z, frustumPlanes[0].distance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 294,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes1 = new Vector4(frustumPlanes[1].normal.x, frustumPlanes[1].normal.y, frustumPlanes[1].normal.z, frustumPlanes[1].distance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 295,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes2 = new Vector4(frustumPlanes[2].normal.x, frustumPlanes[2].normal.y, frustumPlanes[2].normal.z, frustumPlanes[2].distance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 296,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes3 = new Vector4(frustumPlanes[3].normal.x, frustumPlanes[3].normal.y, frustumPlanes[3].normal.z, frustumPlanes[3].distance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 297,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes4 = new Vector4(frustumPlanes[4].normal.x, frustumPlanes[4].normal.y, frustumPlanes[4].normal.z, frustumPlanes[4].distance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 298,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "cullingData.frustumPlanes5 = new Vector4(frustumPlanes[5].normal.x, frustumPlanes[5].normal.y, frustumPlanes[5].normal.z, frustumPlanes[5].distance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetBuffer(cullingKernel, \"InstanceDataBuffer\", instanceDataBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetBuffer(cullingKernel, \"CullingResultsBuffer\", cullingResultsBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetBuffer(cullingKernel, \"VisibilityBuffer\", visibilityBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetMatrix(\"_ViewProjectionMatrix\", cullingData.viewProjectionMatrix);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetVector(\"_CameraPosition\", cullingData.cameraPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetVector(\"_CameraForward\", cullingData.cameraForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 310,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetFloat(\"_MaxDistance\", cullingData.maxDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetInt(\"_EnableFrustumCulling\", cullingData.enableFrustum);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetInt(\"_EnableDistanceCulling\", cullingData.enableDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 315,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int threadGroups = Mathf.CeilToInt((float)instanceDataList.Count / computeThreadGroups);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.Dispatch(cullingKernel, threadGroups, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetBuffer(lodSelectionKernel, \"InstanceDataBuffer\", instanceDataBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetBuffer(lodSelectionKernel, \"LODDataBuffer\", lodDataBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 323,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.SetFloatArray(\"_LODDistances\", lodDistances);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 324,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "cullingComputeShader.Dispatch(lodSelectionKernel, threadGroups, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 330,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "readbackRequest = AsyncGPUReadback.Request(cullingResultsBuffer);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 340,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "visibleInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 341,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "culledInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 343,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < cullingResults.Length && i < instanceDataList.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "drawArgs[0] = batch.mesh.GetIndexCount(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "drawArgs[2] = batch.mesh.GetIndexStart(0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "drawArgs[3] = batch.mesh.GetBaseVertex(0);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 374,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "drawArgs[4] = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "drawArgsBuffer.SetData(drawArgs);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 379,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "batch.material.SetBuffer(\"_InstanceDataBuffer\", instanceDataBuffer);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "batch.material.SetInt(\"_StartIndex\", batch.startIndex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Graphics.DrawMeshInstancedIndirect("
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 387,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Bounds(Vector3.zero, Vector3.one * 1000f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderBatches.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 399,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int lodLevel = 0; lodLevel < lodMeshes.Length; lodLevel++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 403,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int batchStartIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 404,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int batchCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 406,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < instanceDataList.Count; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 420,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "renderBatches.Add(new RenderBatch"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderBatches.Add(new RenderBatch"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 429,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "batchCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 437,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "renderBatches.Add(new RenderBatch"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderBatches.Add(new RenderBatch"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 465,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "boundsCenter = new Vector4(boundsCenter.x, boundsCenter.y, boundsCenter.z, 1f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 466,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "boundsSize = new Vector4(boundsSize.x, boundsSize.y, boundsSize.z, 1f),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 473,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "instanceDataList.Add(newInstance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataList.Add(newInstance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataBuffer.SetData(instanceDataList.ToArray());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 486,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataList.RemoveAt(index);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataBuffer.SetData(instanceDataList.ToArray());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 498,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataList.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 502,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "instanceDataBuffer.SetData(new InstanceData[0]);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 529,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalMemory = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (instanceMatrices.IsCreated) instanceMatrices.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComputeShaderRenderingSystem.cs",
        "line": 550,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (instanceColors.IsCreated) instanceColors.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int jobBatchSize = 32;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxPooledArrays = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int workerThreads = 4;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastUpdateTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 58,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int processedElements = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 59,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageJobExecutionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcbe Initializing Native Collections Optimization System...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 88,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int maxObjects = 1000;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 99,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Native Optimization System initialized - Max Objects: {maxObjects}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 105,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < maxPooledArrays / 4; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float3ArrayPool.Push(new NativeArray<float3>(64, Allocator.Persistent));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "floatArrayPool.Push(new NativeArray<float>(64, Allocator.Persistent));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "quaternionArrayPool.Push(new NativeArray<quaternion>(64, Allocator.Persistent));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 112,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd04 Memory pools initialized - {maxPooledArrays} arrays pre-allocated\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positionUpdateHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 136,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityUpdateHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "distanceCalculationHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 138,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rotationUpdateHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positionUpdateHandle = positionJob.Schedule(positions.Length, jobBatchSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocityUpdateHandle = velocityJob.Schedule(velocities.Length, jobBatchSize, positionUpdateHandle);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 168,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "referencePoint = new float3(0, 0, 0),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "distanceCalculationHandle = distanceJob.Schedule(positions.Length, jobBatchSize);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rotationUpdateHandle = rotationJob.Schedule(rotations.Length, jobBatchSize, velocityUpdateHandle);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 191,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 192,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < isActive.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var array = float3ArrayPool.Pop();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "array.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float3ArrayPool.Push(array);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "array.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 228,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var array = floatArrayPool.Pop();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "array.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 240,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "floatArrayPool.Push(array);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 244,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "array.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 251,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < positions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 316,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (positions.IsCreated) positions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (velocities.IsCreated) velocities.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (accelerations.IsCreated) accelerations.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 319,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rotations.IsCreated) rotations.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (distances.IsCreated) distances.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (isActive.IsCreated) isActive.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float3ArrayPool.Pop().Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "floatArrayPool.Pop().Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "quaternionArrayPool.Pop().Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positions[index] = math.mad(velocities[index], deltaTime, positions[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "velocities[index] = math.mad(accelerations[index], deltaTime, velocities[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 407,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "distances[index] = math.distance(positions[index], referencePoint);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.lengthsq(velocities[index]) > 0.001f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 427,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float3 forward = math.normalize(velocities[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "quaternion targetRotation = quaternion.LookRotationSafe(forward, math.up());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/NativeOptimizationSystem.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rotations[index] = math.slerp(rotations[index], targetRotation, deltaTime * 5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float updateInterval = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int historySize = 60;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetFrameRate = 90f; // Quest 3 target"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minFrameRate = 72f;    // Quest 2 minimum"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxFrameTime = 11.1f;  // 90 FPS = 11.1ms"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxGPUTime = 8f;       // Target GPU time"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float lowPerformanceThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float criticalPerformanceThreshold = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int consecutiveDropsForOptimization = 3;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 75,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int consecutivePerformanceDrops = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 89,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "private StringBuilder debugText = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 118,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "drawCallRecorder = Recorder.Get(\"Render.Mesh\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "triangleRecorder = Recorder.Get(\"Triangles\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 120,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "batchRecorder = Recorder.Get(\"Batches\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"VR Performance Monitor initialized for Unity 6\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 142,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "debugStyle = new GUIStyle();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 144,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "debugStyle.fontSize = 14;"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 152,
        "description": "Legacy Input system, Unity 6 uses new Input System",
        "solution": "Migrate to Unity Input System",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(toggleKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Input.GetKeyDown(toggleKey))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "memoryUsage = Profiler.GetTotalAllocatedMemory(false),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 187,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceHistory.Enqueue(currentMetrics);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "performanceHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Profiler.GetCounterValue(\"GPU Main Thread\") / 1000000f; // Convert to ms"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(currentMetrics.frameTime / maxFrameTime);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 226,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalFrameRate = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 251,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutivePerformanceDrops = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance optimization started\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float newRenderScale = Mathf.Max(0.7f, originalRenderScale - 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Reduced render scale from {originalRenderScale:F2} to {newRenderScale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000); // Wait for changes to take effect"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 286,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance improved with render scale reduction\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 294,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SetShadowQuality(Mathf.Max(0, originalShadowQuality - 1));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Reduced shadow quality from {originalShadowQuality} to {(int)QualitySettings.shadows}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance improved with shadow quality reduction\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Disabled post-processing effects\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance improved by disabling post-processing\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Reduced texture quality from {originalTextureQuality} to {QualitySettings.globalTextureMipmapLimit}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance improved with texture quality reduction\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 331,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int currentQuality = QualitySettings.GetQualityLevel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(currentQuality - 1, true);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 335,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Reduced overall quality level from {currentQuality} to {QualitySettings.GetQualityLevel()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(1000);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance improved with quality level reduction\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Performance optimization completed, but improvements may be minimal\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogError(AdvancedLoggingSystem.LogCategory.Performance, \"VRPerformanceMonitor\", $\"Error during performance optimization: {ex.Message}\", ex);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 354,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutivePerformanceDrops = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 363,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(500);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogError(AdvancedLoggingSystem.LogCategory.Performance, \"VRPerformanceMonitor\", $\"Error in performance check: {ex.Message}\", ex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 378,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "qualityLevel = QualitySettings.GetQualityLevel(),"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 396,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "return xrOrigin.Camera.GetComponent<UnityEngine.Rendering.Universal.UniversalAdditionalCameraData>()?.renderScale ?? 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "scale = Mathf.Clamp(scale, 0.5f, 1f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 420,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var cameraData = xrOrigin.Camera.GetComponent<UnityEngine.Rendering.Universal.UniversalAdditionalCameraData>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 424,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"XR Camera render scale set to: {scale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 435,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"URP render scale set to: {scale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Shadow quality set to: {quality}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 462,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Post-processing set to: {enabled}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 469,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Texture quality set to: {quality}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 482,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float sum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 486,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < frameTimeData.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "min = Unity.Mathematics.math.min(min, value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "max = Unity.Mathematics.math.max(max, value);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 507,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var history = performanceHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 508,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Unity.Mathematics.math.min(history.Length, frameTimeData.Length); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 508,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Unity.Mathematics.math.min(history.Length, frameTimeData.Length); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 520,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = analysisJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 544,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Performance optimizations reset to default\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 549,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return performanceHistory.ToArray();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 554,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var report = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 555,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine(\"=== VR Performance Report ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 556,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Current FPS: {currentMetrics.frameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Average FPS: {AverageFrameRate:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Frame Time: {currentMetrics.frameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 559,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"GPU Time: {currentMetrics.gpuTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 560,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Memory Usage: {currentMetrics.memoryUsage / 1024 / 1024:F1}MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 561,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Draw Calls: {currentMetrics.drawCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 562,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Triangles: {currentMetrics.triangles:N0}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 563,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Batches: {currentMetrics.batches}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 564,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Render Scale: {currentOptimization.renderScale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Shadow Quality: {currentOptimization.shadowQuality}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "report.AppendLine($\"Performance Critical: {IsPerformanceCritical}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 568,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return report.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 575,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 576,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine(\"=== VR Performance Monitor ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 577,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"FPS: {currentMetrics.frameRate:F1} (Target: {targetFrameRate})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 578,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Frame Time: {currentMetrics.frameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 579,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"GPU Time: {currentMetrics.gpuTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Memory: {currentMetrics.memoryUsage / 1024 / 1024:F1}MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Draw Calls: {currentMetrics.drawCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 582,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Triangles: {currentMetrics.triangles:N0}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 583,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Render Scale: {currentOptimization.renderScale:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 584,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Critical: {(IsPerformanceCritical ? \"YES\" : \"NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 585,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Optimizing: {(isOptimizing ? \"YES\" : \"NO\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 589,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "debugText.AppendLine($\"Battery: {SystemInfo.batteryLevel * 100:F0}%\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 592,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 10, 300, 300), debugText.ToString(), debugStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 592,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GUI.Label(new Rect(10, 10, 300, 300), debugText.ToString(), debugStyle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 598,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 600,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frameTimeData.IsCreated) frameTimeData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/VRPerformanceMonitor.cs",
        "line": 601,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (optimizationResults.IsCreated) optimizationResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 15,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int initialPoolSize = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 16,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxPoolSize = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalObjectsCreated = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalObjectsReused = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float poolEfficiency = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int initialSize = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxSize = 50;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 73,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Transform poolContainer = new GameObject(\"Object Pools\").transform;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 74,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "poolContainer.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 88,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Object Pool Manager initialized with {poolConfigs.Length} pools\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (pools.ContainsKey(config.poolName))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Pool {config.poolName} already exists!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 100,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject poolParent = new GameObject($\"Pool_{config.poolName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 101,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "poolParent.transform.SetParent(parent);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 111,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < config.initialSize; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 114,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "obj.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 115,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "pool.Enqueue(obj);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Created pool '{config.poolName}' with {config.initialSize} pre-warmed objects\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!pools.ContainsKey(poolName))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogError(AdvancedLoggingSystem.LogCategory.Performance, \"ObjectPoolManager\", $\"Pool '{poolName}' does not exist!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "obj.SetActive(true);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 141,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "IPooledObject pooledComponent = obj.GetComponent<IPooledObject>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!activeObjects.ContainsKey(obj))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning(\"Trying to return object that wasn't spawned from pool!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObjects.Remove(obj);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 163,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "IPooledObject pooledComponent = obj.GetComponent<IPooledObject>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 167,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "obj.SetActive(false);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "obj.transform.SetParent(poolParents[poolName]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return pool.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 195,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"Pool '{poolName}' is exhausted and cannot expand!\");"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 201,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject obj = Instantiate(prefab, parent);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 204,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "if (obj.GetComponent<IPooledObject>() == null)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 224,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 267,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 270,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < objects.Count && i < maxPoolSize; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = job.Schedule(objects.Count, 32);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!pools.ContainsKey(poolName))"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 309,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "toReturn.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "toReturn.Add(kvp.Key);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 321,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject obj = pool.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 338,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!pools.ContainsKey(poolName))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positionData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ObjectPoolManager.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rotationData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxSamples = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float samplingInterval = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastSampleTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int sampleIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 87,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Initializing Advanced Profiler Integration...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boxingFormSampler = CustomSampler.Create(\"VRBoxing.FormAnalysis\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 93,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiInferenceSampler = CustomSampler.Create(\"VRBoxing.AIInference\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderingOptimizationSampler = CustomSampler.Create(\"VRBoxing.RenderOptimization\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 95,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "nativeCollectionsSampler = CustomSampler.Create(\"VRBoxing.NativeCollections\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 96,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "addressableStreamingSampler = CustomSampler.Create(\"VRBoxing.AddressableStreaming\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 105,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced Profiler Integration initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Profiler.GetTotalAllocatedMemory(0) / (1024f * 1024f); // MB"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Profiler.GetMonoUsedSize() / (1024f * 1024f); // Placeholder"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 203,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float total = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 204,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int count = math.min(sampleIndex, maxSamples);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 206,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < count; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 218,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float total = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int count = math.min(sampleIndex, maxSamples);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 221,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Profiler.BeginSample(sampleName);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 242,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Profiler.EndSample();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boxingFormSampler.Begin();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "boxingFormSampler.End();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiInferenceSampler.Begin();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "aiInferenceSampler.End();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderingOptimizationSampler.Begin();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderingOptimizationSampler.End();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 296,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "var sb = new StringBuilder();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine(\"=== VR Boxing Performance Report ===\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Average Frame Time: {AverageFrameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Average Memory Usage: {AverageMemoryUsage:F2}MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Current Draw Calls: {currentMetrics.drawCalls}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 301,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Active Objects: {currentMetrics.activeObjects}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"AI Inference Time: {currentMetrics.aiInferenceTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"Render Optimization Time: {currentMetrics.renderOptimizationTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 307,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"VR Frame Time: {currentMetrics.vrFrameTime:F2}ms\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "sb.AppendLine($\"VR Performance Rating: {CalculateVRPerformanceRating()}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 311,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return sb.ToString();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "samplesCollected = math.min(sampleIndex, maxSamples),"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 339,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float peak = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int count = math.min(sampleIndex, maxSamples);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 342,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < count; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 355,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float peak = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 356,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int count = math.min(sampleIndex, maxSamples);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 358,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (frameTimeHistory.IsCreated) frameTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (memoryUsageHistory.IsCreated) memoryUsageHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 374,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (drawCallHistory.IsCreated) drawCallHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/AdvancedProfilerIntegration.cs",
        "line": 375,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (vrFrameTimeHistory.IsCreated) vrFrameTimeHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetFrameRate = 90f;        // VR target (Quest 2/3, PICO 4)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 22,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float warningFrameRate = 72f;       // Warning threshold"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float criticalFrameRate = 60f;     // Critical threshold"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetMemoryUsage = 2048f;   // MB target"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float qualityAdjustmentSpeed = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxActiveTargets = 200;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 43,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxActiveParticles = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxActiveObstacles = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 48,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float memoryCheckInterval = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float garbageCollectionThreshold = 0.8f; // 80% of target memory"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentFrameRate = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageFrameRate = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 54,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentMemoryUsage = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int frameCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 56,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float frameTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 57,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float memoryTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 82,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const int FRAME_HISTORY_SIZE = 300; // 5 seconds at 60fps"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 103,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(PerformanceMonitoringCoroutine());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 104,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(AdaptiveQualityCoroutine());"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 108,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(MemoryMonitoringCoroutine());"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 116,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.vSyncCount = 0; // Disable VSync for VR"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 127,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Comprehensive Performance Optimizer initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 161,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameRateHistory.Enqueue(currentFrameRate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "frameRateHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 167,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "frameCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 168,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "frameTimer = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udf9b\ufe0f Adjusting quality from {currentQuality} to {targetQuality}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(5);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 261,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(4);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 287,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(3);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 313,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(2);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "QualitySettings.SetQualityLevel(1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverIterations = Mathf.RoundToInt(6 * quality);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Physics.defaultSolverVelocityIterations = Mathf.RoundToInt(1 * quality);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 412,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f Critical performance: {currentFrameRate:F1} FPS (Target: {targetFrameRate})\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 429,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(2f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 443,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(memoryCheckInterval);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentMemoryUsage = Profiler.GetTotalAllocatedMemory(0) / (1024f * 1024f); // Convert to MB"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 449,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogWarning($\"\u26a0\ufe0f High memory usage: {currentMemoryUsage:F1} MB (Target: {targetMemoryUsage} MB)\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "System.GC.Collect();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 455,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\uddd1\ufe0f Forced garbage collection\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "switch (headsetName.ToLower())"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 508,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 509,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 510,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "criticalFrameRate = 45f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 511,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetMemoryUsage = 1536f; // 1.5GB for Quest 2"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Optimized for Quest 2\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 518,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 519,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 520,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "criticalFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 521,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetMemoryUsage = 2048f; // 2GB for Quest 3"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Optimized for Quest 3\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 528,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 529,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 530,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "criticalFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 531,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetMemoryUsage = 2048f; // 2GB for Pico 4"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 533,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Optimized for Pico 4\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 538,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetFrameRate = 120f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 539,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 540,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "criticalFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 541,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetMemoryUsage = 4096f; // 4GB for PC VR"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 543,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Optimized for Valve Index\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 548,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetFrameRate = 90f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 549,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningFrameRate = 72f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 550,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "criticalFrameRate = 60f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 551,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetMemoryUsage = 2048f; // 2GB default"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 553,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd7d Optimized for Generic VR\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "{\"current_quality\", currentQuality.ToString()},"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 567,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "{\"target_quality\", targetQuality.ToString()},"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 577,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int dropCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 591,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udcca Performance Report:\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 592,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  FPS: {currentFrameRate:F1} / {targetFrameRate:F1} (avg: {averageFrameRate:F1})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 593,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Memory: {currentMemoryUsage:F1} MB / {targetMemoryUsage:F1} MB\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 594,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Quality: {currentQuality} (target: {targetQuality})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Performance/ComprehensivePerformanceOptimizer.cs",
        "line": 595,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"  Frame drops: {GetFrameDropCount()}/{frameRateHistory.Count}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxTargets = 1000;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetLifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnRadius = 2.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int spawnPoints = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnHeight = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int activeTargetCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastSpawnTime = 0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 80,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "targetWorld = new World(\"VR Boxing Targets\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 92,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf ECS Target System initialized - Max Targets: {maxTargets}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 98,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetQuery = entityManager.CreateEntityQuery("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 104,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "movementQuery = entityManager.CreateEntityQuery("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 117,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var archetype = entityManager.CreateArchetype("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 123,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "whiteTargetEntity = entityManager.CreateEntity(archetype);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 126,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(whiteTargetEntity, new TargetComponent"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(whiteTargetEntity, new LocalTransform"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 145,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var archetype = entityManager.CreateArchetype("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 151,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "grayTargetEntity = entityManager.CreateEntity(archetype);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 153,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(grayTargetEntity, new TargetComponent"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(grayTargetEntity, new LocalTransform"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 172,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var archetype = entityManager.CreateArchetype("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "blockTargetEntity = entityManager.CreateEntity(archetype);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(blockTargetEntity, new TargetComponent"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(blockTargetEntity, new LocalTransform"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 202,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < spawnPoints; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 205,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "float3 position = new float3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.cos(angle) * spawnRadius,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 208,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.sin(angle) * spawnRadius"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargetCount = targetQuery.CalculateEntityCount();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetWorld.Update();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetMovementJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetLifetimeJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 233,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetCollisionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetMovementJobHandle = movementJob.ScheduleParallel(movementQuery);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 247,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "commandBuffer = new EntityCommandBuffer(Allocator.TempJob)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 249,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetLifetimeJobHandle = lifetimeJob.Schedule(targetQuery, targetMovementJobHandle);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 256,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "commandBuffer = new EntityCommandBuffer(Allocator.TempJob)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 258,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetCollisionJobHandle = collisionJob.Schedule(targetQuery, targetLifetimeJobHandle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spawnIndex < 0) spawnIndex = UnityEngine.Random.Range(0, spawnPoints);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 278,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnIndex = math.clamp(spawnIndex, 0, spawnPoints - 1);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 292,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "Entity targetEntity = entityManager.Instantiate(prefabEntity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Entity targetEntity = entityManager.Instantiate(prefabEntity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(targetEntity, new LocalTransform"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(targetEntity, targetData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.AddComponentData(targetEntity, new TargetMovementComponent"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 332,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "Entity targetEntity = entityManager.Instantiate(prefabEntity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Entity targetEntity = entityManager.Instantiate(prefabEntity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(targetEntity, new LocalTransform"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.SetComponentData(targetEntity, targetData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 346,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.AddComponentData(targetEntity, new TargetMovementComponent"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entityManager.DestroyEntity(targetQuery);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 366,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var query = entityManager.CreateEntityQuery("
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 370,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var entities = query.ToEntityArray(Allocator.Temp);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "entities.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetMovementJobHandle.IsCreated) targetMovementJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetLifetimeJobHandle.IsCreated) targetLifetimeJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 402,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetCollisionJobHandle.IsCreated) targetCollisionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spawnPositions.IsCreated) spawnPositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 410,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetWorld.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 453,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var transforms = chunk.GetNativeArray(ref transformHandle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 454,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var movements = chunk.GetNativeArray(ref movementHandle);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 456,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < chunk.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float3 direction = math.normalize(movement.targetPosition - movement.startPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var entities = chunk.GetNativeArray(entityHandle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var targets = chunk.GetNativeArray(ref targetHandle);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 493,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < chunk.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "commandBuffer.DestroyEntity(entities[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 519,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var entities = chunk.GetNativeArray(entityHandle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 520,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var transforms = chunk.GetNativeArray(ref transformHandle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var targets = chunk.GetNativeArray(ref targetHandle);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 523,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < chunk.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 529,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = math.distance(transform.Position, playerPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 535,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "commandBuffer.SetComponent(entities[i], updatedTarget);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ECSTargetSystem.cs",
        "line": 536,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "commandBuffer.DestroyEntity(entities[i]);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 15,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float lifetime = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 16,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int baseScore = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hitEffectDuration = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 21,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve scaleOnHit = AnimationCurve.EaseInOut(0, 1, 1, 1.2f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 49,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "targetRenderer = GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 50,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "targetCollider = GetComponent<Collider>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 62,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float alpha = Mathf.PingPong(Time.time * 5f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 86,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int finalScore = Mathf.RoundToInt(baseScore * timingScore);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 89,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTargetHit?.Invoke(finalScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timeDiff = Mathf.Abs(timeAlive - perfectTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 106,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(1f - (timeDiff / maxDiff));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 119,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(50); // 50ms flash"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 126,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float duration = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 127,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 135,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float scaleMultiplier = scaleOnHit.Evaluate(progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 137,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "transform.localScale = Vector3.Lerp(originalScale, targetScale, scaleMultiplier);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 158,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogError(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingTarget\", $\"Error in hit effect: {ex.Message}\", ex);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 172,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTargetMissed?.Invoke();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 182,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"LeftHand\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingTarget.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (other.CompareTag(\"RightHand\"))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int batchSize = 64;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float updateFrequency = 30f; // 30 FPS analysis"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hipRotationWeight = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float footSpacingWeight = 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float weightDistributionWeight = 0.25f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hipVelocityWeight = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float stanceChangeThreshold = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int stanceHistorySize = 30;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 73,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int historyIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int historySize = Mathf.RoundToInt(updateFrequency * 2f); // 2 seconds of history"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 119,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "hipKalmanFilter = new KalmanFilter();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 120,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftFootKalmanFilter = new KalmanFilter();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 121,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightFootKalmanFilter = new KalmanFilter();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 122,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "coachingSystem = new CoachingFeedbackSystem();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\ude80 Advanced Boxing Form Processor initialized with Job System + Kalman Filtering (Burst: {enableBurstCompilation})\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stanceDetectionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 168,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formAnalysisJobHandle = formAnalysisJob.Schedule(batchSize, 8);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 180,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stanceDetectionJobHandle = stanceDetectionJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 190,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stanceDetectionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 198,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "stanceDetectionJob.stanceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogError(AdvancedLoggingSystem.LogCategory.Boxing, \"AdvancedBoxingFormProcessor\", $\"Error in form analysis: {ex.Message}\", ex);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 225,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 filteredHipPos = hipKalmanFilter.Filter(rawHipPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 226,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 filteredLeftFoot = leftFootKalmanFilter.Filter(rawLeftFoot);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 227,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 filteredRightFoot = rightFootKalmanFilter.Filter(rawRightFoot);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 259,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "hipVelocity = new Vector3(0, 0, result.hipVelocityMagnitude),"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 278,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "BoxingFormTracker.Instance.OnStanceChanged?.Invoke(newStance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var feedback = coachingSystem.AnalyzeForm(hipPos, leftFoot, rightFoot, cachedFormData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd4a COACHING: {feedback.primaryAdvice}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 353,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float sum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 354,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < formScoreHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (formAnalysisJobHandle.IsCreated) formAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 365,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (stanceDetectionJobHandle.IsCreated) stanceDetectionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 368,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (hipPositionHistory.IsCreated) hipPositionHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (leftFootHistory.IsCreated) leftFootHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rightFootHistory.IsCreated) rightFootHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (hipRotationHistory.IsCreated) hipRotationHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (formScoreHistory.IsCreated) formScoreHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (formAnalysisResults.IsCreated) formAnalysisResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 429,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "footSpacing = math.distance(leftFootPositions[index], rightFootPositions[index]),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 441,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rotation = math.abs(hipRotations[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 453,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.max(0f, 1f - ((rotation - 45f) / 45f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 459,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float spacing = math.distance(leftFootPositions[index], rightFootPositions[index]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.max(0f, 1f - ((spacing - 0.8f) / 0.4f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftDistance = math.distance(leftFoot, center);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 484,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightDistance = math.distance(rightFoot, center);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float balance = 1f - math.abs(leftDistance - rightDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.clamp(balance, 0f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 504,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.max(0f, 1f - ((velocity - 5f) / 5f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.length(velocity);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 547,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int orthodoxCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 548,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int southpawCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 551,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < leftFootPositions.Length && i < stanceHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 560,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "stanceHistory[i] = 0; // Orthodox"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 565,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "stanceHistory[i] = 1; // Southpaw"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 590,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private readonly float processNoise = 0.005f; // Lower noise for boxing precision"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 591,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private readonly float measurementNoise = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 600,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 kalmanGain = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 606,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "estimate = predictedEstimate + Vector3.Scale(kalmanGain, measurement - predictedEstimate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 607,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "errorCovariance = Vector3.Scale(Vector3.one - kalmanGain, predictedErrorCovariance);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 622,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const float OPTIMAL_STANCE_WIDTH = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 623,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const float OPTIMAL_HIP_HEIGHT = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 624,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const float STANCE_TOLERANCE = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 628,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var feedback = new AdvancedBoxingFormProcessor.CoachingFeedback();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 629,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "feedback.confidenceLevel = 0.9f; // High confidence in basic analysis"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 632,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float stanceWidth = Vector3.Distance(leftFoot, rightFoot);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 633,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(stanceWidth - OPTIMAL_STANCE_WIDTH) > STANCE_TOLERANCE)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 670,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "feedback.confidenceLevel = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedBoxingFormProcessor.cs",
        "line": 675,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "feedback.confidenceLevel = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnRadius = 3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxActiveTargets = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyScaling = 1.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int batchSize = 32;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 132,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentDifficulty = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 133,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerPerformance = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 134,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int consecutiveHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 135,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int consecutiveMisses = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 145,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float adaptiveSpawnRate = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 201,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Advanced Target System initialized with Unity 6 optimizations\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 206,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnParent = new GameObject(\"Spawn Zones\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 207,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnParent.transform.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 211,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 213,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject zone = new GameObject($\"SpawnZone_{i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 214,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "zone.transform.SetParent(spawnParent.transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 217,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 position = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(angle) * spawnRadius,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Random.Range(0.5f, 2.5f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 220,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(angle) * spawnRadius"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 250,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "newDifficulty = Mathf.Clamp(newDifficulty, 0.5f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(newDifficulty - currentDifficulty) > 0.1f)"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 255,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDifficultyChanged?.Invoke(currentDifficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "adaptiveSpawnRate = Mathf.Min(adaptiveSpawnRate * 1.1f, 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "adaptiveSpawnRate = Mathf.Max(adaptiveSpawnRate * 0.9f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 273,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "playerPerformance = Mathf.Lerp(playerPerformance, hitRate, Time.deltaTime * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 280,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "SpawnRequest request = spawnQueue.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 288,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnQueue.Enqueue(request); // Put back if not ready"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 296,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeTargets.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 310,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeCombo.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCombo.RemoveAt(i);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 339,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "target = Instantiate(config.prefab, position, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 345,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(target);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(target);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 350,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeCombo.Add(new ComboTarget"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 350,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCombo.Add(new ComboTarget"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 363,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var targetComponent = target.GetComponent<BoxingTarget>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 367,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetComponent.baseScore = Mathf.RoundToInt(config.scoreValue * currentDifficulty);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 377,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var enhancedTarget = target.GetComponent<EnhancedTarget>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 383,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "enhancedTarget.Initialize(config.type, currentDifficulty);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 450,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnComboCompleted?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 464,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int baseBonus = 200;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 465,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timeMultiplier = Mathf.Clamp(3f - comboTime, 1f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 466,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.RoundToInt(baseBonus * timeMultiplier * currentDifficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCombo.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 477,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutiveMisses = 0;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 482,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTargetHit?.Invoke(hitData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 488,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "consecutiveHits = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 496,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeCombo.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Vector3.Distance(combo.target.transform.position, hitData.hitPosition) < 0.5f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 512,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject powerUpPrefab = powerUpPrefabs[Random.Range(0, powerUpPrefabs.Length)];"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 513,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject powerUp = Instantiate(powerUpPrefab, position, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 515,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var powerUpComponent = powerUp.GetComponent<PowerUp>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "powerUpComponent.Initialize(GetRandomPowerUpType());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 526,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var values = System.Enum.GetValues(typeof(PowerUpType));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return (PowerUpType)values.GetValue(Random.Range(0, values.Length));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 544,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnResults[index] = 1; // Ready to spawn"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 548,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnResults[index] = 0; // Not ready"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 560,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int count = Mathf.Min(positions.Length, batchSize);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 563,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 579,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = spawnJob.Schedule(count, 8);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 586,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform zone = spawnZones[Random.Range(0, spawnZones.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 588,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "randomOffset.y = Mathf.Abs(randomOffset.y); // Keep above ground"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 603,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 612,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 614,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spawnPositions.IsCreated) spawnPositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 615,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (spawnTimes.IsCreated) spawnTimes.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 616,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetTypes.IsCreated) targetTypes.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 630,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(zone.position, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 681,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"Player\"))"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/AdvancedTargetSystem.cs",
        "line": 697,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "AdvancedTargetSystem.Instance?.OnPowerUpCollected?.Invoke(powerUpData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 17,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minPunchVelocity = 2.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 18,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxPunchVelocity = 15.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 19,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float punchCooldown = 0.08f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float velocitySmoothing = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float minAcceleration = 5.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float formAccuracyThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int velocityHistorySize = 10;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 63,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalPunches = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 64,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averagePunchPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 65,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float bestPunchPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 109,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Enhanced Punch Detector initialized for {(isLeftHand ? \"Left\" : \"Right\")} hand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 140,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positionHistory.Enqueue(currentPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 141,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timeHistory.Enqueue(currentTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 146,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "positionHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 147,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "timeHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 156,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 159,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3[] positions = positionHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 160,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float[] times = timeHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < positions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = velocityJob.Schedule(positions.Length - 1, 1);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete(); // Complete immediately for this frame"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 184,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "smoothedVelocity = Vector3.Lerp(smoothedVelocity, currentVelocity, velocitySmoothing);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 192,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3[] positions = positionHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 193,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float[] times = timeHistory.ToArray();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 206,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "smoothedVelocity = Vector3.Lerp(smoothedVelocity, currentVelocity, velocitySmoothing);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float velocityPower = Mathf.Clamp01((velocityMagnitude - minPunchVelocity) / (maxPunchVelocity - minPunchVelocity));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Clamp01(accelerationMagnitude / (minAcceleration * 3f)) : 1f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 257,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPunchDetected?.Invoke(punchData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 258,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnPunchDirection?.Invoke(punchData.direction);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 259,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFormAnalysis?.Invoke(formScore);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"{(isLeftHand ? \"Left\" : \"Right\")} punch: Power={combinedPower:F2}, Form={formScore:F2}, Velocity={velocityMagnitude:F1}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 274,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float forwardAlignment = Vector3.Dot(smoothedVelocity.normalized, forwardDirection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 276,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(forwardAlignment);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 284,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float formScore = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float alignment = Vector3.Dot(wristToKnuckle, punchDirection);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 292,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formScore *= Mathf.Clamp01(alignment);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float stanceMultiplier = BoxingFormTracker.Instance.GetCurrentPowerMultiplier();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float accuracyBonus = BoxingFormTracker.Instance.GetCurrentAccuracyBonus();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 313,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "formScore *= 1.2f; // 20% bonus for using dominant hand"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(formScore);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 365,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalPunches = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 366,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "averagePunchPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 367,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bestPunchPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 372,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "minPunchVelocity = Mathf.Max(0.1f, minVel);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 373,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "maxPunchVelocity = Mathf.Max(minPunchVelocity + 1f, maxVel);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 393,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 395,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (positionData.IsCreated) positionData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 396,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (timeData.IsCreated) timeData.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (velocityResults.IsCreated) velocityResults.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(transform.position, 0.05f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawRay(transform.position, smoothedVelocity * 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawRay(transform.position, currentAcceleration * 0.01f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/EnhancedPunchDetector.cs",
        "line": 422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawLine(wristTransform.position, knuckleTransform.position);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSpeed = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSize = 0.4f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int numberOfLanes = 5;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float laneSpacing = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float laneDistance = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatPrediction = 2f; // Spawn targets 2 seconds before beat"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float musicEnergyMultiplier = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve intensityCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float patternChangeInterval = 16f; // Change pattern every 16 beats"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyProgression = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float obstacleSpawnChance = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float obstacleHeight = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 65,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float flowMultiplierMax = 4f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 66,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float perfectHitWindow = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 67,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float goodHitWindow = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 152,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentBeatTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 153,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 154,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 155,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int maxCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 156,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastPatternChange = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 157,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentPatternIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 160,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int targetsHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 161,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int targetsMissed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 162,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int obstaclesAvoided = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 163,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int obstaclesHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 164,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float totalAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 172,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int instanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 218,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Initializing Flow Mode System...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 223,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject originObj = new GameObject(\"Flow Origin\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 225,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "flowOrigin.position = new Vector3(0, 1.5f, laneDistance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 233,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject targetObj = new GameObject(\"Player Target\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 248,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject target = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 256,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var collider = target.GetComponent<BoxCollider>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 266,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < numberOfLanes; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 268,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject laneObj = new GameObject($\"Flow Lane {i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "laneObj.transform.SetParent(flowOrigin);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 273,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float y = 0f; // Could add vertical lanes later"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 274,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "laneObj.transform.localPosition = new Vector3(x, y, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 285,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udee4\ufe0f Created {numberOfLanes} flow lanes\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 290,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "guideLine.positionCount = 2;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 291,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "guideLine.startWidth = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 292,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "guideLine.endWidth = 0.05f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 293,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "guideLine.material.color = new Color(1f, 1f, 1f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(0, startPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 300,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "guideLine.SetPosition(1, endPos);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 308,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(laneParticles.Length, numberOfLanes); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 308,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(laneParticles.Length, numberOfLanes); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 325,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener(OnBeatDetected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 326,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnMusicEnergyChanged.AddListener(OnMusicEnergyChanged);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 332,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftPropertyBlock = new MaterialPropertyBlock();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 333,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightPropertyBlock = new MaterialPropertyBlock();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 334,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "obstaclePropertyBlock = new MaterialPropertyBlock();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 336,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\ude80 Flow Mode GPU instancing initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 357,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensityMultiplier = intensityCurve.Evaluate(energy) * musicEnergyMultiplier;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingNotes.Enqueue(flowNote);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int laneIndex = UnityEngine.Random.Range(0, numberOfLanes);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingNotes.Enqueue(note);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentPatternIndex = Mathf.RoundToInt(performance * (availablePatterns.Length - 1));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 438,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfb5 Flow pattern changed to: {availablePatterns[currentPatternIndex].patternName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var note = upcomingNotes.Peek();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 451,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingNotes.Dequeue();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 467,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject targetObj = Instantiate(flowTargetPrefab, spawnPos, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 488,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var component = targetObj.GetComponent<FlowTargetComponent>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 494,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.Initialize(flowTarget);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 499,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(flowTarget);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(flowTarget);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 504,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = targetObj.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 509,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = dodgeObstacleMaterial != null ? dodgeObstacleMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = dodgeObstacleMaterial != null ? dodgeObstacleMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 515,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = leftHandMaterial != null ? leftHandMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 515,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = leftHandMaterial != null ? leftHandMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 521,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = rightHandMaterial != null ? rightHandMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "renderer.material = rightHandMaterial != null ? rightHandMaterial : new Material(Shader.Find(\"Standard\"));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 531,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 539,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 currentPos = Vector3.Lerp(target.startPosition, target.endPosition, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 553,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in flow target movement: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 559,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeTargets.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 565,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 573,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 583,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = Mathf.Lerp(currentMultiplier, 1f, Time.deltaTime * 2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 587,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = Mathf.Clamp(currentMultiplier, 1f, flowMultiplierMax);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 589,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFlowMultiplierChanged?.Invoke(currentMultiplier);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 597,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(laneParticles.Length, numberOfLanes); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 597,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < Mathf.Min(laneParticles.Length, numberOfLanes); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 604,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "bool hasActiveTargets = activeTargets.Exists(t => t.laneIndex == i && !t.isHit);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 644,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeTargets.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 663,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timingDifference = Mathf.Abs(Time.time - target.hitTime);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 664,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float accuracy = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 669,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "accuracy = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 674,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "accuracy = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 678,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "accuracy = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 683,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "maxCombo = Mathf.Max(maxCombo, currentCombo);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 687,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier += 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 692,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int finalScore = Mathf.RoundToInt(baseScore * accuracy * currentMultiplier);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 715,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFlowTargetHit?.Invoke(hitData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 723,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFlowCombo?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 732,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 733,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = Mathf.Max(1f, currentMultiplier - 0.5f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 743,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnObstacleHit?.Invoke(obstacleData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 751,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFlowCombo?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 753,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udca5 Obstacle hit! Combo broken.\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 766,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 767,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = Mathf.Max(1f, currentMultiplier - 0.2f);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 776,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFlowCombo?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 794,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentBeatTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 795,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 796,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 797,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "maxCombo = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 800,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetsHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 801,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetsMissed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 802,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "obstaclesAvoided = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 803,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "obstaclesHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 804,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 809,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Flow Mode started!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 816,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingNotes.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 818,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Flow Mode stopped\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 827,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 832,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficulty = Mathf.Clamp01(difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 835,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetSpeed = Mathf.Lerp(6f, 12f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 836,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "obstacleSpawnChance = Mathf.Lerp(0.1f, 0.4f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 837,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfectHitWindow = Mathf.Lerp(0.15f, 0.08f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 838,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "goodHitWindow = Mathf.Lerp(0.3f, 0.15f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 894,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"LeftHand\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 898,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (other.CompareTag(\"RightHand\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/FlowModeSystem.cs",
        "line": 902,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (other.CompareTag(\"Player\") && targetData.isObstacle)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float stanceChangeDelay = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hipRotationThreshold = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float hipPowerMultiplier = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float footSpacingMin = 0.4f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float footSpacingMax = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float stanceWidthOptimal = 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float weightShiftThreshold = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 43,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve weightTransferCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float formAnalysisFrequency = 30f; // 30 FPS analysis"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 48,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxPowerBonus = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float rotationCompensationSmoothing = 5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingFormTracker\", \"\ud83e\udd4a Initializing Boxing Form Tracker...\");"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 175,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(FormAnalysisLoop());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 177,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogInfo(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingFormTracker\", \"\u2705 Boxing Form Tracker initialized!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 193,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject hipObj = new GameObject(\"Hip Reference\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 194,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hipObj.transform.SetParent(playerBody);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 195,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "hipObj.transform.localPosition = new Vector3(0, -0.3f, 0); // Approximate hip level"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 202,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftFootObj = new GameObject(\"Left Foot Reference\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 203,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftFootObj.transform.SetParent(playerBody);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 204,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftFootObj.transform.localPosition = new Vector3(-0.2f, -1f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 210,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightFootObj = new GameObject(\"Right Foot Reference\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 211,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightFootObj.transform.SetParent(playerBody);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 212,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightFootObj.transform.localPosition = new Vector3(0.2f, -1f, 0);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 242,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForSeconds(deltaTime);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 272,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFormAnalyzed?.Invoke(currentFormData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 277,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFormQualityChanged?.Invoke(currentFormData.overallForm);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 299,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentHipRotation = Vector3.SignedAngle(bodyForward, hipForward, Vector3.up);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hipRotationHistory.Enqueue(currentHipRotation);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 306,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hipRotationHistory.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 312,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float hipPower = Mathf.Abs(hipVelocity.magnitude) * hipPowerMultiplier;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 315,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnHipPowerGenerated?.Invoke(hipPower);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentFootSpacing = Vector3.Distance(leftFootPos, rightFootPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float alignment = Vector3.Dot(footLine, bodyForward);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 334,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "currentFormData.footAlignment = new Vector3(alignment, 0, 0);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 359,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 hipProjected = Vector3.Project(hip - leftFoot, footLine) + leftFoot;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 362,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceToLeft = Vector3.Distance(hipProjected, leftFoot);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 363,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float totalDistance = Vector3.Distance(leftFoot, rightFoot);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftForwardness = Vector3.Dot(leftFoot, bodyForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 400,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightForwardness = Vector3.Dot(rightFoot, bodyForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftForwardDistance = Vector3.Dot(leftFoot, bodyForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 412,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightForwardDistance = Vector3.Dot(rightFoot, bodyForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 417,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(forwardDifference) > 0.1f)"
      },
      {
        "severity": "Warning",
        "category": "Unity6Compliance",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 440,
        "description": "Legacy coroutines, consider async/await for Unity 6",
        "solution": "Convert to async Task methods",
        "can_auto_fix": false,
        "code_snippet": "StartCoroutine(StanceTransitionCoroutine());"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 442,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogDebug(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingFormTracker\", $\"\ud83e\udd4a Stance transition started: {currentStance} \u2192 {newStance}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 447,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float transitionDuration = 1f; // 1 second transition"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 455,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStanceTransition?.Invoke(activeTransition);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 457,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "yield return new WaitForEndOfFrame();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 463,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "activeTransition.completionPercentage = 1f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 465,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStanceChanged?.Invoke(currentStance);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 466,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStanceTransition?.Invoke(activeTransition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogDebug(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingFormTracker\", $\"\u2705 Stance transition complete: {currentStance}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 476,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float formScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 477,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int criteriaCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 482,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float spacingQuality = 1f - Mathf.Abs(currentFootSpacing - stanceWidthOptimal) / stanceWidthOptimal;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 483,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formScore += Mathf.Clamp01(spacingQuality);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float hipQuality = Mathf.Clamp01(Mathf.Abs(currentHipRotation) / hipRotationThreshold);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 499,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float weightQuality = 1f - Mathf.Abs(currentWeightDistribution - optimalWeight);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formScore += Mathf.Clamp01(weightQuality);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 507,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "formScore += 1f; // Bonus for stable stance"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 526,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentFormData.isProperStance = formScore >= 0.6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 533,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float baseMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 534,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float bonusMultiplier = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 537,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (enableHipTracking && Mathf.Abs(currentHipRotation) > hipRotationThreshold)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 539,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bonusMultiplier += 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float weightTransferBonus = weightTransferCurve.Evaluate(Mathf.Abs(currentWeightDistribution - 0.5f) * 2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 555,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "case FormQuality.Perfect: bonusMultiplier += 1f; break;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 556,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "case FormQuality.Excellent: bonusMultiplier += 0.7f; break;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 557,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "case FormQuality.Good: bonusMultiplier += 0.4f; break;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 558,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "case FormQuality.Fair: bonusMultiplier += 0.1f; break;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 561,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentFormData.powerMultiplier = baseMultiplier + Mathf.Min(bonusMultiplier, maxPowerBonus);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 614,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedLoggingSystem.LogTrace(AdvancedLoggingSystem.LogCategory.Boxing, \"BoxingFormTracker\", $\"Form Analysis: {currentFormData.overallForm}, Power: {currentFormData.powerMultiplier:F2}x\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 625,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(leftFootReference.position, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 626,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(rightFootReference.position, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 627,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawLine(leftFootReference.position, rightFootReference.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 634,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(hipReference.position, 0.05f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 635,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawRay(hipReference.position, hipVelocity * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/BoxingFormTracker.cs",
        "line": 651,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(playerBody.position + Vector3.up * 2f, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 24,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float staffLength = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float staffRadius = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 32,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float handGripStrength = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxGripDistance = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 41,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSpawnDistance = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 42,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float targetSize = 0.4f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int spawnPointsPerZone = 5;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float zoneWidth = 4f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float zoneHeight = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 54,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float staffSwingThreshold = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 55,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float perfectSwingWindow = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 56,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float goodSwingWindow = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 57,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve swingPowerCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 59,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxComboLength = 8;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 63,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float patternDuration = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 65,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyProgression = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 194,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastSwingTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 198,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int comboCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 199,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float comboMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 200,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastHitTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 203,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int targetsHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 204,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int targetsMissed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 205,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float totalSwingPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 206,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 212,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int currentPatternIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 213,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float patternStartTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 268,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Initializing Two-Handed Staff System...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 282,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject staff = GameObject.CreatePrimitive(PrimitiveType.Cylinder);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 284,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staff.transform.localScale = new Vector3(staffRadius * 2f, staffLength * 0.5f, staffRadius * 2f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 288,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rb.mass = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 289,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rb.drag = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 290,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "rb.angularDrag = 2f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 301,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "var playerPos = Camera.main != null ? Camera.main.transform.position : Vector3.zero;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 305,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject topZone = new GameObject(\"Top Spawn Zone\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 312,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject bottomZone = new GameObject(\"Bottom Spawn Zone\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 319,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject leftZone = new GameObject(\"Left Spawn Zone\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 326,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject rightZone = new GameObject(\"Right Spawn Zone\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 342,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Staff spawn zones configured\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 349,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < spawnPointsPerZone; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 351,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnPoint = new GameObject($\"{zoneName} Spawn Point {i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnPoint.transform.SetParent(parentZone);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 401,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "staffAudioSource.spatialBlend = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 402,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "staffAudioSource.volume = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 422,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftGripLocalPosition = activeStaff.transform.InverseTransformPoint(leftHandTransform.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 433,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightGripLocalPosition = activeStaff.transform.InverseTransformPoint(rightHandTransform.position);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 449,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStaffGripChanged?.Invoke(gripData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 456,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(hand.position, staff.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 464,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(hand.position, staff.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 465,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(1f - (distance / maxGripDistance));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 473,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd32 {(isLeftHand ? \"Left\" : \"Right\")} hand gripped staff\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udc4b {(isLeftHand ? \"Left\" : \"Right\")} hand released staff\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 509,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffRigidbody.AddForce(force);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Quaternion targetRotation = Quaternion.LookRotation(handDirection, Vector3.up);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 torque = Vector3.Cross(activeStaff.transform.forward, targetRotation * Vector3.forward) * 20f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 515,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffRigidbody.AddTorque(torque);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffRigidbody.AddForce(force);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 538,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStaffSwingPower?.Invoke(swingPower);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 540,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd62 Staff swing detected: {swingType} with power {swingPower:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(normalizedVel.x) > 0.7f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 550,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (Mathf.Abs(normalizedVel.y) > 0.7f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 552,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (Mathf.Abs(normalizedVel.z) > 0.7f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 560,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeTargets.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(activeStaff.transform.position, target.gameObject.transform.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 574,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 592,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float powerMultiplier = swingPowerCurve.Evaluate(swingPower / (staffSwingThreshold * 2f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 593,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int finalScore = Mathf.RoundToInt(baseScore * overallAccuracy * powerMultiplier * comboMultiplier);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 631,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStaffTargetHit?.Invoke(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 633,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Staff target hit! Zone: {target.spawnZone}, Accuracy: {overallAccuracy:F2}, Score: {finalScore}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 640,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timingDifference = Mathf.Abs(currentTime - targetTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 647,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Max(0.2f, 1f - (timingDifference / goodSwingWindow));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 652,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(activeStaff.transform.position, target.gameObject.transform.position);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 654,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(1f - (distance / maxDistance));"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 660,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "currentCombo.Add(swingType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 660,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentCombo.Add(swingType);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 665,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboMultiplier = Mathf.Min(comboMultiplier, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 681,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboSequence = currentCombo.ToArray(),"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 684,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStaffCombo?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 693,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 2; i < currentCombo.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 704,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "comboMultiplier *= 1.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 705,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd04 Alternating combo bonus!\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 712,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeTargets.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 718,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 726,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 currentPos = Vector3.Lerp(target.spawnPosition, target.targetPosition, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 733,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 772,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfbc Advanced to pattern: {availablePatterns[currentPatternIndex].patternName}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 780,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Mathf.Abs(target.spawnTime - spawnTime) < 0.1f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 804,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentCombo.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 805,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "comboCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 806,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "comboMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 815,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStaffCombo?.Invoke(comboData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 817,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udca5 Combo reset\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 832,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = Mathf.Clamp01(staffVelocity.magnitude / (staffSwingThreshold * 2f));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 833,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Color trailColor = Color.Lerp(Color.white, Color.red, intensity);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 835,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "staffTrailRenderer.endColor = new Color(trailColor.r, trailColor.g, trailColor.b, 0f);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 840,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = activeStaff.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 859,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject targetObj = Instantiate(targetPrefab, spawnPoint.position, spawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 863,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "Vector3 playerPos = Camera.main != null ? Camera.main.transform.position : Vector3.zero;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 882,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var targetComponent = targetObj.GetComponent<StaffTargetComponent>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 887,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetComponent.Initialize(target);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 889,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(target);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 889,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Add(target);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 891,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfaf Spawned staff target in {zone} zone, swing type: {requiredSwing}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 899,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int pointIndex = UnityEngine.Random.Range(0, spawnPoints[zoneIndex].Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 953,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u274c Staff target missed in {target.spawnZone} zone\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 962,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffHitEffect.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 979,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int index = UnityEngine.Random.Range(0, staffSwingClips.Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 988,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int index = UnityEngine.Random.Range(0, staffHitClips.Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 997,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffAudioSource.PlayOneShot(clip);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1009,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "Vector3 spawnPos = Camera.main != null ? Camera.main.transform.position + Vector3.forward * 0.5f : Vector3.forward * 0.5f;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1010,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeStaff = Instantiate(staffPrefab, spawnPos, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1011,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "staffRigidbody = activeStaff.GetComponent<Rigidbody>();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1016,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetsHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1017,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "targetsMissed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1018,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalSwingPower = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1019,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "averageAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1024,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentPatternIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1026,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Two-Handed Staff Mode started!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1044,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Two-Handed Staff Mode stopped\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1056,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeTargets.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1061,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficulty = Mathf.Clamp01(difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1064,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "staffSwingThreshold = Mathf.Lerp(1.5f, 3f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1065,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "perfectSwingWindow = Mathf.Lerp(0.15f, 0.08f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1066,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "goodSwingWindow = Mathf.Lerp(0.3f, 0.15f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1069,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetSize = Mathf.Lerp(0.5f, 0.3f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/TwoHandedStaffSystem.cs",
        "line": 1103,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(elapsed / patternDuration);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float squatThreshold = 0.4f;        // How low player must go"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spinThreshold = 270f;         // Degrees to complete spin"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float leanThreshold = 0.3f;         // How far to lean"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float duckDuration = 0.5f;          // How long to stay ducked"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float obstacleSpeed = 6f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnDistance = 12f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float obstacleLifetime = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float difficultyMultiplier = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float intensiveSpawnRate = 2f;      // Obstacles per second"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 52,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float intensiveSquatFrequency = 0.7f; // 70% require squats"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 53,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float intensiveSpinFrequency = 0.3f;  // 30% require spins"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 60,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float playerHeight = 1.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 131,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastSpawnTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 132,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerBaseHeight = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 133,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentPlayerHeight = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 134,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float playerRotation = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 135,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastPlayerRotation = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 143,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float spinStartRotation = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 144,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float spinProgress = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 145,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastDodgeTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 148,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int dodgesSuccessful = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 149,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int dodgesFailed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 150,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int obstaclesSpawned = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 151,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float totalDodgeAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 152,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float averageResponseTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 207,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Initializing Comprehensive Dodging System...\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 223,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "dodgeAudioSource.spatialBlend = 0f; // 2D audio for feedback"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 224,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "dodgeAudioSource.volume = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 237,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Player tracking initialized for dodging system\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 245,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject indicatorObj = new GameObject(\"Dodge Warning Indicator\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 247,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.material = new Material(Shader.Find(\"Sprites/Default\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 247,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.material = new Material(Shader.Find(\"Sprites/Default\"));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 249,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.startWidth = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 250,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.endWidth = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 251,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.positionCount = 2;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 262,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Connected to Flow Mode System\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Connected to Staff System\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 287,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 8; i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 289,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject spawnPoint = new GameObject($\"Dodge Spawn Point {i}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spawnPoint.transform.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 295,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 spawnPos = playerPos + new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 296,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Sin(radian) * spawnDistance,"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 297,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "UnityEngine.Random.Range(-1f, 2f), // Varying heights"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 298,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Mathf.Cos(radian) * spawnDistance"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 305,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Created 8 dodge spawn points\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rotationDelta = Mathf.DeltaAngle(lastPlayerRotation, currentRotation);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 340,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "float leanDistance = Vector3.Distance(new Vector3(headPosition.x, 0, headPosition.z),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 340,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leanDistance = Vector3.Distance(new Vector3(headPosition.x, 0, headPosition.z),"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 341,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Vector3(playerBasePosition.x, 0, playerBasePosition.z));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 348,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Player started squatting\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 352,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd86 Player started ducking\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 358,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!isSpinning && Mathf.Abs(playerRotation - spinStartRotation) > 45f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 363,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spinProgress = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 364,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf2a\ufe0f Player started spinning\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 369,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float totalRotation = Mathf.Abs(playerRotation - spinStartRotation);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 383,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spinProgress = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 386,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf2a\ufe0f 360\u00b0 spin completed!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 425,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return (DodgeType)UnityEngine.Random.Range(0, System.Enum.GetValues(typeof(DodgeType)).Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 430,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return (DodgeType)UnityEngine.Random.Range(0, System.Enum.GetValues(typeof(DodgeType)).Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 437,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform spawnPoint = spawnPoints[UnityEngine.Random.Range(0, spawnPoints.Length)];"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 444,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject obstacleObj = Instantiate(obstaclePrefab, spawnPoint.position, spawnPoint.rotation);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 465,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var component = obstacleObj.GetComponent<DodgeObstacleComponent>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 470,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "component.Initialize(obstacle);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 478,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.Add(obstacle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 478,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.Add(obstacle);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 489,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnObstacleSpawned?.Invoke(obstacleData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udea7 Spawned {dodgeType} obstacle\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 522,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return prefabs[UnityEngine.Random.Range(0, prefabs.Length)];"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 527,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject obstacle = GameObject.CreatePrimitive(PrimitiveType.Cube);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 531,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = obstacle.GetComponent<Renderer>();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 546,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = obstacle.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 580,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.SetPosition(0, obstaclePosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 581,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "warningIndicator.SetPosition(1, playerHead.position);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 585,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "Invoke(nameof(HideWarningIndicator), 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 629,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float duration = Vector3.Distance(obstacle.spawnPosition, obstacle.targetPosition) / obstacle.speed;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 630,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 637,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 currentPos = Vector3.Lerp(obstacle.spawnPosition, obstacle.targetPosition, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 640,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 651,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in obstacle movement: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 657,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeObstacles.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 663,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 671,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 694,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(playerHead.position, obstacle.gameObject.transform.position);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 701,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float accuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 722,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "dodgeSuccessful = spinProgress >= 0.75f; // 75% of spin completed"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(playerHead.position, obstacle.gameObject.transform.position);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 757,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "return distance <= 0.3f; // Very close collision detection"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 771,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "bool isPerfect = accuracy >= 0.9f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 773,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int finalScore = Mathf.RoundToInt(baseScore * accuracy);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 796,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDodgeSuccess?.Invoke(dodgeData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 798,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2705 Dodge successful! Type: {obstacle.requiredDodge}, Accuracy: {accuracy:F2}, Score: {finalScore}\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 824,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDodgeFail?.Invoke(dodgeData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 826,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u274c Dodge failed! Type: {obstacle.requiredDodge}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 841,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgeSuccessEffect.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 860,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgeFailEffect.Play();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 871,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int index = UnityEngine.Random.Range(0, clips.Length);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 872,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "dodgeAudioSource.PlayOneShot(clips[index]);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 903,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "dodgesSuccessful = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 904,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "dodgesFailed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 905,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "obstaclesSpawned = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 906,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalDodgeAccuracy = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 907,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "averageResponseTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 919,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Comprehensive Dodging Mode started!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 927,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd38 Comprehensive Dodging Mode stopped\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 933,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnIntensityChanged?.Invoke(intensive ? 1f : 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 935,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udd25 Intensive dodging mode: {(intensive ? \"ON\" : \"OFF\")}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 944,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udf0a Dodging integrated with Flow Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 954,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udd62 Dodging integrated with Staff Mode\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 964,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 969,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "difficultyMultiplier = Mathf.Clamp(difficulty, 0.5f, 3f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 972,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "squatThreshold = Mathf.Lerp(0.5f, 0.3f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 973,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "spinThreshold = Mathf.Lerp(180f, 360f, difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 974,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leanThreshold = Mathf.Lerp(0.2f, 0.4f, difficulty);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 999,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "GameObject obstacleObj = Instantiate(obstaclePrefab, position, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 1015,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.Add(obstacle);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/ComprehensiveDodgingSystem.cs",
        "line": 1015,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeObstacles.Add(obstacle);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float baseSpeed = 5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float maxSpeed = 15f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float circleSize = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spawnDistance = 10f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 39,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float beatAnticipation = 0.5f; // Spawn circles this many seconds before beat"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 40,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spinSpeedMultiplier = 2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve speedCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 44,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float blockCombineTime = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 45,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float blockSpinDuration = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 46,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float blockApproachTime = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 50,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int maxInstancesPerBatch = 1023; // GPU instancing limit"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 109,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentDifficulty = 1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 110,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastBeatTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 119,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int circlesHit = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 120,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int circlesMissed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 121,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int blocksSuccessful = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 122,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int blocksFailed = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 131,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int whiteInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 132,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int grayInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 136,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int totalInstancesRendered = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 137,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastInstanceRenderTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 166,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError(\"Spawn points not assigned! Creating default spawn points.\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 171,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingBeats.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 176,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "AdvancedAudioManager.Instance.OnBeatDetected.AddListener(OnBeatDetected);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 182,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameManager.Instance.OnGameStateChanged.AddListener(OnGameStateChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Rhythm Target System initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 212,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingBeats.Enqueue(spawnTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "while (upcomingBeats.Count > 0 && Time.time >= upcomingBeats.Peek())"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "upcomingBeats.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 264,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "speed = Mathf.Lerp(baseSpeed, maxSpeed, currentDifficulty),"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 272,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "rhythmData.gameObject = Instantiate(prefab, spawnPos, Quaternion.identity);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 276,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var circleComponent = rhythmData.gameObject.GetComponent<RhythmCircleComponent>();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 290,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.Add(rhythmData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 290,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.Add(rhythmData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 295,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject transformedTarget = SceneTransformationSystem.Instance.TransformTarget(rhythmData.gameObject, type);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 313,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float progress = speedCurve.Evaluate(elapsedTime / journeyTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 320,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "circle.gameObject.transform.position = Vector3.Lerp(startPos, endPos, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 322,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in circle movement: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 340,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int circlesNearCenter = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 343,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!circle.isHit && Vector3.Distance(circle.gameObject.transform.position, centerPoint.position) < 1f)"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 360,
        "description": "Direct Instantiate causes GC pressure in VR",
        "solution": "Use object pooling",
        "can_auto_fix": false,
        "code_snippet": "activeBlockObject = Instantiate(combinedBlockPrefab, centerPoint.position, Quaternion.identity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 371,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject transformedBlock = SceneTransformationSystem.Instance.TransformBlock(activeBlockObject, blockSpinSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 390,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float spinDuration = Mathf.Lerp(blockSpinDuration * 1.5f, blockSpinDuration * 0.5f, approachSpeed / maxSpeed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 401,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeBlockObject.transform.Rotate(0, 0, blockSpinSpeed * Time.deltaTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 405,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float scaleMultiplier = 1f + Mathf.Sin(pulseTime * Mathf.PI * 4f) * 0.1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 408,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 414,
        "description": "Camera.main is slow, cache VR camera reference",
        "solution": "Cache camera reference at startup",
        "can_auto_fix": false,
        "code_snippet": "if (xrCamera == null) xrCamera = Camera.main;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 419,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float approachTime = blockApproachTime / Mathf.Max(speedMultiplier, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 420,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 431,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeBlockObject.transform.position = Vector3.Lerp(startPos, endPos, progress);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeBlockObject.transform.Rotate(0, 0, blockSpinSpeed * Time.deltaTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 447,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in block sequence: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 461,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalSpeed = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 462,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int count = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 478,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeCircles.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Vector3.Distance(circle.gameObject.transform.position, centerPoint.position) < 1f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 487,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 494,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = activeCircles.Count - 1; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 500,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 508,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.RemoveAt(i);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentDifficulty = GameManager.Instance.GetDynamicDifficulty();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 526,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnSpeedChange?.Invoke(currentDifficulty);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 533,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < activeCircles.Count; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 540,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(circle.gameObject.transform.position, hitPosition);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 545,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timing = Mathf.Abs(Time.time - circle.targetTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 546,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float accuracy = Mathf.Clamp01(1f - (timing / 0.5f));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 564,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int basePoints = 100;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 566,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int totalPoints = Mathf.RoundToInt((basePoints + bonusPoints) * accuracy);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 571,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnCircleHit?.Invoke(hitData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 590,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(activeBlockObject.transform.position, blockPosition);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 606,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int blockPoints = 200;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 609,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBlockSuccess?.Invoke(blockData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 640,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBlockFailed?.Invoke(blockData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 663,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "activeCircles.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 680,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentDifficulty = Mathf.Clamp01(difficulty);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 689,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(leftSpawnPoint.position, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(rightSpawnPoint.position, 0.2f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 701,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(centerPoint.position, 0.3f);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 710,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "whitePropertyBlock = new MaterialPropertyBlock();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 711,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "grayPropertyBlock = new MaterialPropertyBlock();"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 716,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var meshFilter = whiteCirclePrefab.GetComponent<MeshFilter>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 739,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"GPU Instancing initialized for RhythmTargetSystem\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 745,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "MaterialPool.Instance.GetURPLitMaterial(baseColor) :"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 746,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 746,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "new Material(Shader.Find(\"Universal Render Pipeline/Lit\"));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 748,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetColor(\"_BaseColor\", baseColor);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 749,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetFloat(\"_Metallic\", 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 750,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "material.SetFloat(\"_Smoothness\", 0.8f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "GameObject temp = GameObject.CreatePrimitive(primitiveType);"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 757,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "Mesh mesh = temp.GetComponent<MeshFilter>().sharedMesh;"
      },
      {
        "severity": "Warning",
        "category": "VROptimization",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 784,
        "description": "GetComponent calls should be cached for VR performance",
        "solution": "Cache component references in Start/Awake",
        "can_auto_fix": false,
        "code_snippet": "var renderer = circle.GetComponent<Renderer>();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 798,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "whitePropertyBlock.SetVectorArray(\"_Color\", whiteInstanceColors);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 800,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Graphics.DrawMeshInstanced("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 815,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "grayPropertyBlock.SetVectorArray(\"_Color\", grayInstanceColors);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 817,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Graphics.DrawMeshInstanced("
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 830,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "whiteInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 831,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "grayInstanceCount = 0;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 851,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftSpawnPoint = new GameObject(\"LeftSpawn\").transform;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 852,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftSpawnPoint.position = new Vector3(-3f, 1.5f, spawnDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 853,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "leftSpawnPoint.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 858,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightSpawnPoint = new GameObject(\"RightSpawn\").transform;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 859,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightSpawnPoint.position = new Vector3(3f, 1.5f, spawnDistance);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 860,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "rightSpawnPoint.SetParent(transform);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 865,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "centerPoint = new GameObject(\"CenterPoint\").transform;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 866,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "centerPoint.position = new Vector3(0f, 1.5f, 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 867,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "centerPoint.SetParent(transform);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 871,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "spawnDistance = 8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 879,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "totalInstancesRendered = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 880,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "whiteInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 881,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "grayInstanceCount = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 899,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (other.CompareTag(\"LeftHand\") && requiredHand == RhythmTargetSystem.HandSide.Left)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/RhythmTargetSystem.cs",
        "line": 903,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (other.CompareTag(\"RightHand\") && requiredHand == RhythmTargetSystem.HandSide.Right)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float predictionHorizon = 2f; // Seconds into the future"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 28,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int movementHistorySize = 100;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 29,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int stanceHistorySize = 50;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 30,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float learningRate = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float confidenceThreshold = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float comfortZoneRadius = 1.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 38,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float challengeZoneRadius = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 127,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int historyIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 128,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float lastPredictionTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 129,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float predictionUpdateInterval = 0.1f; // 10 FPS prediction"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 155,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83c\udfaf Initializing Predictive Targeting System...\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 165,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "movementPredictor = new MovementPredictor();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 166,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "stanceAnalyzer = new StanceAnalyzer();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 167,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "targetOptimizer = new TargetOptimizer();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 168,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "behaviorModel = new PlayerBehaviorModel();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Predictive Targeting System initialized!\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 185,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnStanceChanged.AddListener(OnStanceChanged);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formTracker.OnFormAnalyzed.AddListener(OnFormAnalyzed);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 191,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "targetSystem.OnCircleHit.AddListener(OnTargetHit);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 230,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "predictionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 231,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 243,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "predictionJobHandle = movementPredictionJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 255,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analysisJobHandle = stanceAnalysisJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await System.Threading.Tasks.Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 270,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "predictionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "analysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 277,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "predictedTargets.Enqueue(predictedTarget);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 278,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTargetPredicted?.Invoke(predictedTarget);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 326,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int orthodoxCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 327,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int southpawCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 329,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < stanceHistorySize; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = UnityEngine.Random.Range(comfortZoneRadius, challengeZoneRadius);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 345,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float height = playerPos.y + UnityEngine.Random.Range(-0.3f, 0.6f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 347,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Vector3 direction = Quaternion.Euler(0, angleOffset, 0) * Vector3.forward;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 370,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightDot = Vector3.Dot(toTarget, Vector3.Cross(playerForward, Vector3.up));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distance = Vector3.Distance(playerPos, targetPos);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 388,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float normalizedDistance = Mathf.Clamp01(distance / challengeZoneRadius);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 406,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float dataQuality = Mathf.Clamp01((float)historyIndex / movementHistorySize);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 415,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalVariation = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 416,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int samples = Mathf.Min(historyIndex, 10);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 418,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < samples; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 423,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float variation = Vector3.Distance(movementHistory[currentIdx], movementHistory[previousIdx]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 428,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01(1f - averageVariation); // Less variation = more consistency"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "while (predictedTargets.Count > 0 && predictedTargets.Peek().optimalTiming < Time.time)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 436,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "predictedTargets.Dequeue();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 444,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnStancePreferenceUpdated?.Invoke(currentStancePreference);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 465,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return predictedTargets.Peek();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 468,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "return new PredictedTarget { confidence = 0f };"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 484,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (predictionJobHandle.IsCreated) predictionJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 485,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (analysisJobHandle.IsCreated) analysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 488,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (movementHistory.IsCreated) movementHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 489,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rotationHistory.IsCreated) rotationHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 490,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (stanceHistory.IsCreated) stanceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 491,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetSuccessPositions.IsCreated) targetSuccessPositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 492,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (targetSuccessRatings.IsCreated) targetSuccessRatings.Dispose();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 501,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private const int MAX_SAMPLES = 20;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 505,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "kalmanFilter = new KalmanFilter();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 513,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "movementSamples.Clear();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 514,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < math.min(history.Length, MAX_SAMPLES); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 514,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < math.min(history.Length, MAX_SAMPLES); i++)"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 516,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "movementSamples.Add(history[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "movementSamples.Add(history[i]);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 520,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "var filteredPosition = kalmanFilter.Filter(movementSamples[movementSamples.Count - 1]);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 541,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private readonly float processNoise = 0.01f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 542,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private readonly float measurementNoise = 0.1f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 551,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "Vector3 kalmanGain = new Vector3("
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "estimate = predictedEstimate + Vector3.Scale(kalmanGain, measurement - predictedEstimate);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 558,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "errorCovariance = Vector3.Scale(Vector3.one - kalmanGain, predictedErrorCovariance);"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 571,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "classifier = new AdvancedMLStanceClassifier();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 572,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "stanceNetwork = new NeuralNetwork(new int[] { 6, 12, 8, 2 }); // Input: foot positions + hip, Output: Orthodox/Southpaw"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 589,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "inputs[4] = math.atan2(movementHistory[movementHistory.Length - 1].x, movementHistory[movementHistory.Length - 1].z);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 593,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float[] outputs = stanceNetwork.Forward(inputs);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 601,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int changes = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 602,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < stanceHistory.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 621,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float orthodoxScore = 0f, southpawScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 623,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < features.Length && i < 4; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 651,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < layers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 656,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < layers.Length - 1; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 659,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int j = 0; j < layers[i]; j++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 662,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int k = 0; k < layers[i + 1]; k++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 664,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "weights[i][j][k] = UnityEngine.Random.Range(-1f, 1f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 672,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < inputs.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 677,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < layers.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 679,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int j = 0; j < layers[i]; j++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 681,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float sum = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 682,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int k = 0; k < layers[i - 1]; k++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 695,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return 1f / (1f + Mathf.Exp(-x));"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 716,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validSamples = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 718,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < math.min(historySize, 10); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 718,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < math.min(historySize, 10); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 723,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.lengthsq(movementHistory[currentIdx]) > 0.01f &&"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 724,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "math.lengthsq(movementHistory[previousIdx]) > 0.01f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 737,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float rotationVelocity = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 738,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validRotations = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 740,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < math.min(historySize, 10); i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 740,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < math.min(historySize, 10); i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 748,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (rotationDiff > 180f) rotationDiff -= 360f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 749,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "if (rotationDiff < -180f) rotationDiff += 360f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 775,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int orthodoxCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 776,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int southpawCount = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 778,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < historySize; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 785,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int stanceChanges = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 786,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 1; i < historySize; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 798,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float averageSuccessRating = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 799,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "int validSuccesses = 0;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 801,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < targetSuccessPositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/Boxing/PredictiveTargetingSystem.cs",
        "line": 803,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (math.lengthsq(targetSuccessPositions[i]) > 0.01f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 20,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float handTrackingConfidenceThreshold = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float switchingHysteresis = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gestureRecognitionThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 26,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gestureHoldTime = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 130,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float trackingUpdateRate = 90f; // Target 90 FPS for hand tracking"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 164,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "foreach (GestureType gesture in System.Enum.GetValues(typeof(GestureType)))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 166,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gestureTimers[gesture] = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 173,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Hand Tracking Manager initialized with Unity 6 optimizations\");"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 237,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnTrackingModeChanged?.Invoke(currentTrackingMode);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 239,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Tracking mode changed to: {currentTrackingMode}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 260,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 272,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnLeftHandUpdate?.Invoke(leftHandData);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 273,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnRightHandUpdate?.Invoke(rightHandData);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 291,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle = handProcessingJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 306,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "data.confidence = 0.9f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 307,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "data.palmPosition = isLeft ? new Vector3(-0.2f, 1.2f, 0.3f) : new Vector3(0.2f, 1.2f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 311,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < data.jointPositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 330,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "data.confidence = 1.0f;"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 331,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "data.palmPosition = isLeft ? new Vector3(-0.2f, 1.2f, 0.3f) : new Vector3(0.2f, 1.2f, 0.3f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 345,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < data.jointPositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 358,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int finger = 0; finger < 5; finger++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 361,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "data.fingerCurls[finger] = Random.Range(0f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 380,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (!gestureTimers.ContainsKey(detectedGesture))"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 381,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gestureTimers[detectedGesture] = 0f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 399,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGestureDetected?.Invoke(gestureData);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 400,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gestureTimers[detectedGesture] = 0f; // Reset timer"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 408,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "gestureTimers[key] = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 443,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (leftHandModel) leftHandModel.SetActive(showHandModels);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 444,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rightHandModel) rightHandModel.SetActive(showHandModels);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 445,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (leftControllerModel) leftControllerModel.SetActive(showControllerModels);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 446,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rightControllerModel) rightControllerModel.SetActive(showControllerModels);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 462,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < gestureScores.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 471,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return math.clamp(math.sin(gestureIndex * 0.5f), 0f, 1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 521,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "currentJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 523,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (jointPositions.IsCreated) jointPositions.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 524,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (jointRotations.IsCreated) jointRotations.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 525,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gestureScores.IsCreated) gestureScores.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 542,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(handData.palmPosition, 0.05f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 545,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < handData.jointPositions.Length; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HandTrackingManager.cs",
        "line": 547,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Gizmos.DrawWireSphere(handData.jointPositions[i], 0.01f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 21,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float punchHitIntensity = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 23,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float blockSuccessIntensity = 1.0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 25,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float missedPunchIntensity = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 27,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float environmentInteractionIntensity = 0.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 31,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float punchHitDuration = 0.1f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 33,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float blockSuccessDuration = 0.2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float missedPunchDuration = 0.05f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float environmentInteractionDuration = 0.15f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 41,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve punchImpactCurve = AnimationCurve.EaseInOut(0f, 1f, 1f, 0f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 42,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public AnimationCurve blockSuccessCurve = AnimationCurve.Linear(0f, 1f, 1f, 0f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 47,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float underwaterDamping = 0.7f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 49,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float spaceStationAmplification = 1.3f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 51,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float crystalCaveResonance = 1.5f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 63,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private float currentHapticModifier = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 85,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "string controllerName = controller.name.ToLower();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 86,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (controllerName.Contains(\"left\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 89,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Left controller found: {controller.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 91,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (controllerName.Contains(\"right\"))"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 94,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Right controller found: {controller.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 107,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "inputDevices.Clear();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 108,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "InputDevices.GetDevices(inputDevices);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 110,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Found {inputDevices.Count} input devices for haptic feedback\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 124,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Subscribed to rhythm system events\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 131,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Found hand tracking manager for haptic integration\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 144,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentHapticModifier = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 152,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Haptic feedback: Underwater damping applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 157,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Haptic feedback: Space station amplification applied\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 162,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"Haptic feedback: Crystal cave resonance applied\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 166,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "currentHapticModifier = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 178,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = Mathf.Lerp(0.3f, punchHitIntensity, accuracy) * currentHapticModifier;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 186,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, punchHitDuration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 189,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Punch hit haptic: {(isLeftHand ? \"Left\" : \"Right\")} hand, intensity: {intensity:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 209,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Block success haptic: Both hands, intensity: {intensity:F2}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 219,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, missedPunchDuration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 221,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Punch miss haptic: {(isLeftHand ? \"Left\" : \"Right\")} hand\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 232,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, environmentInteractionDuration);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 234,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"Environment interaction haptic: {(isLeftHand ? \"Left\" : \"Right\")} hand, strength: {interactionStrength:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 246,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "leftHapticCancellation = new CancellationTokenSource();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 252,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "rightHapticCancellation = new CancellationTokenSource();"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 261,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float elapsedTime = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = baseIntensity * pattern.Evaluate(normalizedTime) * currentHapticModifier;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 269,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, 0.02f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 271,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "elapsedTime += 0.02f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 272,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(20, cancellationToken); // 20ms = 0.02s"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 281,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in haptic pattern execution: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 300,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < 5; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 302,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float intensity = UnityEngine.Random.Range(0.3f, 0.7f) * currentHapticModifier;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 303,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, 0.1f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 304,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay(100); // 100ms between bubbles"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 309,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in bubble haptic effect: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 327,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float pulseInterval = Mathf.Lerp(0.2f, 0.05f, frequency / 1000f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 328,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int pulseCount = Mathf.RoundToInt(2f / pulseInterval); // 2 second effect"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 330,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < pulseCount; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 333,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "controller.SendHapticImpulse(intensity, pulseInterval * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 334,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Delay((int)(pulseInterval * 1000));"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 339,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.LogError($\"Error in crystal resonance haptic effect: {ex.Message}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 376,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"XR Device connected: {device.name}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/HapticFeedbackManager.cs",
        "line": 382,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"XR Device disconnected: {device.name}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 34,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gestureRecognitionFramerate = 30f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 35,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float gestureConfidenceThreshold = 0.8f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 36,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public int gestureHistorySize = 60; // 2 seconds at 30 FPS"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 37,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public float velocityThreshold = 2f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 191,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "private int historyIndex = 0;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 216,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udc4b Initializing Advanced Gesture Recognition...\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 241,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\u2705 Advanced Gesture Recognition initialized!\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 246,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "gestureClassifier = new GestureClassifier();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 247,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "defensiveAnalyzer = new DefensiveAnalyzer();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 248,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "comboRecognizer = new ComboRecognizer();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 249,
        "description": "Object allocation in Update causes GC pressure",
        "solution": "Move allocations outside of Update or use pooling",
        "can_auto_fix": false,
        "code_snippet": "formAnalyzer = new FormAnalyzer();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 251,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gestureClassifier.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 252,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "defensiveAnalyzer.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 253,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "comboRecognizer.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 254,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formAnalyzer.Initialize();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 256,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83e\udde0 ML gesture components initialized\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 265,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform leftHand = xrOrigin.transform.Find(\"Camera Offset/LeftHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 266,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Transform rightHand = xrOrigin.transform.Find(\"Camera Offset/RightHand Controller\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 271,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log(\"\ud83d\udd0d Hand transforms found from XR Origin\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 317,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gestureAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 318,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "defensiveAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 332,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gestureAnalysisJobHandle = boxingGestureJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 344,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "defensiveAnalysisJobHandle = defensiveGestureJob.Schedule();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 349,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "await Task.Yield();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 353,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "gestureAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 354,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "defensiveAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 385,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(jabGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 385,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(jabGesture);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 386,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(jabGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 387,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udc4a Jab detected - Power: {jabGesture.power:F2}, Confidence: {jabGesture.confidence:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 397,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(crossGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 397,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(crossGesture);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 398,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(crossGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 399,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd4a Cross detected - Power: {crossGesture.power:F2}, Confidence: {crossGesture.confidence:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 411,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(leftHook);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 411,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(leftHook);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 412,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(leftHook);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 413,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\ude9d Left Hook detected - Power: {leftHook.power:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 418,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(rightHook);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 418,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(rightHook);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 419,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(rightHook);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 420,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\ude9d Right Hook detected - Power: {rightHook.power:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 432,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(leftUppercut);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 432,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(leftUppercut);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 433,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(leftUppercut);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 434,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2b06\ufe0f Left Uppercut detected - Power: {leftUppercut.power:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 439,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(rightUppercut);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 439,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.Add(rightUppercut);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 440,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnBoxingGestureDetected?.Invoke(rightUppercut);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 441,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\u2b06\ufe0f Right Uppercut detected - Power: {rightUppercut.power:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 450,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentDefensiveGestures.Add(blockGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 450,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentDefensiveGestures.Add(blockGesture);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 451,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDefensiveGestureDetected?.Invoke(blockGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 452,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83d\udee1\ufe0f Block detected - Effectiveness: {blockGesture.effectiveness:F2}\");"
      },
      {
        "severity": "Warning",
        "category": "MemoryManagement",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 461,
        "description": "Collection modifications in Update can cause GC",
        "solution": "Pre-allocate collections or use object pooling",
        "can_auto_fix": false,
        "code_snippet": "recentDefensiveGestures.Add(dodgeGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 461,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentDefensiveGestures.Add(dodgeGesture);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 462,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnDefensiveGestureDetected?.Invoke(dodgeGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 463,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83c\udfc3 Dodge detected - Direction: {dodgeGesture.dodgeDirection}\");"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 475,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float forwardComponent = Vector3.Dot(handVelocity.normalized, playerForward);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 478,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float jabScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 481,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "jabScore = Mathf.Clamp01(speed / 10f) * forwardComponent;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 506,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float forwardComponent = Vector3.Dot(handVelocity.normalized, playerForward);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 510,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float hipRotation = formTracker != null ? Mathf.Abs(formTracker.CurrentHipRotation) : 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 511,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rotationBonus = Mathf.Clamp01(hipRotation / 30f); // Max bonus at 30 degrees"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 513,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float crossScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 516,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "crossScore = (Mathf.Clamp01(speed / 12f) * forwardComponent + rotationBonus) * 0.5f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 541,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float lateralComponent = Vector3.Dot(handVelocity.normalized, playerRight);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 545,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float hookScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 546,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (speed > velocityThreshold && Mathf.Abs(lateralComponent) > 0.6f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 548,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "hookScore = Mathf.Clamp01(speed / 8f) * Mathf.Abs(lateralComponent);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 555,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "power = CalculatePunchPower(speed, Mathf.Abs(lateralComponent)),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 557,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "accuracy = Mathf.Abs(lateralComponent),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 572,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float upwardComponent = Vector3.Dot(handVelocity.normalized, Vector3.up);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 576,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float uppercutScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 579,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "uppercutScore = Mathf.Clamp01(speed / 8f) * upwardComponent;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 638,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float dodgeScore = headMovement.magnitude > 0.2f ? Mathf.Clamp01(headMovement.magnitude / 0.5f) : 0f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 655,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (Vector3.Dot(movement, Vector3.down) > 0.5f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 657,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (Vector3.Dot(movement, playerRight) > 0.3f)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 659,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "else if (Vector3.Dot(movement, -playerRight) > 0.3f)"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 672,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float optimalDistance = 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 673,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float distanceScore = 1f - Mathf.Abs(distance - optimalDistance) / optimalDistance;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 676,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float heightScore = 1f - Mathf.Abs(handToHead.y) / 0.2f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 678,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "return Mathf.Clamp01((distanceScore + heightScore) * 0.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 689,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "detectedChains.Enqueue(jabCrossCombo);"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 690,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnGestureChainCompleted?.Invoke(jabCrossCombo);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 691,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "Debug.Log($\"\ud83e\udd4a\ud83e\udd4a Jab-Cross combo detected! Flow: {jabCrossCombo.flowRating:F2}\");"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 698,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = recentGestures.Count - 2; i >= 0; i--)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 725,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float timingScore = Mathf.Clamp01(1f - (second.timestamp - first.timestamp) / 1.5f);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 726,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float powerConsistency = 1f - Mathf.Abs(first.power - second.power) / 2f;"
      },
      {
        "severity": "Info",
        "category": "Threading",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 736,
        "description": "Invoke without null checking can cause issues",
        "solution": "Add null checks before Invoke",
        "can_auto_fix": false,
        "code_snippet": "OnFormGestureAnalyzed?.Invoke(guardFormGesture);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 756,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "deviation = Vector3.Distance((leftPos + rightPos) * 0.5f, headPos + Vector3.forward * 0.3f),"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 766,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float basepower = Mathf.Clamp01(speed / 10f);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 770,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float formBonus = 1f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 773,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "formBonus = formTracker.GetCurrentPowerMultiplier();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 784,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentGestures.RemoveAll(g => g.timestamp < cutoffTime);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 785,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "recentDefensiveGestures.RemoveAll(g => g.confidence < cutoffTime); // Using confidence as timestamp"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 791,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gestureAnalysisJobHandle.IsCreated) gestureAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 792,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (defensiveAnalysisJobHandle.IsCreated) defensiveAnalysisJobHandle.Complete();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 795,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (leftHandHistory.IsCreated) leftHandHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 796,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rightHandHistory.IsCreated) rightHandHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 797,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (leftHandVelocityHistory.IsCreated) leftHandVelocityHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 798,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (rightHandVelocityHistory.IsCreated) rightHandVelocityHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 799,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "if (gestureConfidenceHistory.IsCreated) gestureConfidenceHistory.Dispose();"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 806,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public void Initialize() { Debug.Log(\"\ud83e\udd16 Gesture Classifier initialized\"); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 807,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public float ClassifyGesture(Vector3[] handPath) { return UnityEngine.Random.Range(0.6f, 0.95f); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 812,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public void Initialize() { Debug.Log(\"\ud83d\udee1\ufe0f Defensive Analyzer initialized\"); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 813,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public float AnalyzeDefense(Vector3 handPos, Vector3 headPos) { return UnityEngine.Random.Range(0.5f, 0.9f); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 818,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public void Initialize() { Debug.Log(\"\ud83e\udd4a Combo Recognizer initialized\"); }"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 819,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "public bool RecognizeCombo(AdvancedGestureRecognition.BoxingGesture[] gestures) { return gestures.Length >= 2; }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 824,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public void Initialize() { Debug.Log(\"\ud83d\udcca Form Analyzer initialized\"); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 825,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "public float AnalyzeForm(Vector3 leftHand, Vector3 rightHand, Vector3 head) { return UnityEngine.Random.Range(0.6f, 0.9f); }"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 843,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int recentSamples = math.min(10, leftHandPositions.Length);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 849,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < recentSamples; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 863,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftSpeed = math.length(leftAvgVelocity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 864,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightSpeed = math.length(rightAvgVelocity);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 885,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "int validSamples = math.min(historySize, 20);"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 887,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "float totalGuardScore = 0f;"
      },
      {
        "severity": "Info",
        "category": "CodeQuality",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 889,
        "description": "Magic numbers reduce code maintainability",
        "solution": "Replace with named constants",
        "can_auto_fix": false,
        "code_snippet": "for (int i = 0; i < validSamples; i++)"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 898,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftDistance = math.length(leftToHead);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 899,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightDistance = math.length(rightToHead);"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 902,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float leftGuardScore = 1f - math.abs(leftDistance - 0.3f) / 0.3f;"
      },
      {
        "severity": "Info",
        "category": "ErrorHandling",
        "file": "Assets/Scripts/HandTracking/AdvancedGestureRecognition.cs",
        "line": 903,
        "description": "Potential null reference access",
        "solution": "Add null checks where appropriate",
        "can_auto_fix": false,
        "code_snippet": "float rightGuardScore = 1f - math.abs(rightDistance - 0.3f) / 0.3f;"
      },
      {
        "severity": "Warning",
        "category": "Architecture",
        "file": "Assets/Scenes/",
        "line": 0,
        "description": "Only one scene found, may need menu/loading scenes",
        "solution": "Consider adding multiple scenes for better organization",
        "can_auto_fix": false,
        "code_snippet": ""
      }
    ],
    "validation_time": 0.7750329971313477,
    "is_deployment_ready": false,
    "summary": "=== FLOWBOX COMPREHENSIVE VALIDATION REPORT ===\n\n\ud83d\udcca SUMMARY:\nTotal Issues Found: 8599\n\ud83d\udd34 Critical (Must Fix): 32\n\ud83d\udfe1 Warning (Should Fix): 1756\n\ud83d\udd35 Info (Consider): 6811\n\n\u274c CRITICAL ISSUES FOUND - MUST FIX BEFORE DEPLOYMENT\n\n\ud83d\udccb ISSUES BY CATEGORY:\n  Architecture: 1\n  AsyncPatterns: 3\n  CodeQuality: 1579\n  ErrorHandling: 5077\n  MemoryManagement: 1222\n  Performance: 63\n  Threading: 155\n  Unity6Compliance: 255\n  VROptimization: 244\n\n\ud83d\udd34 CRITICAL ISSUES (MUST FIX IMMEDIATELY):\n  \ud83d\udcc1 Assets/Scripts/Core/ComprehensiveProjectValidator.cs:482\n     async void can cause unhandled exceptions and memory leaks\n     \ud83d\udca1 Solution: Change to async Task\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/EmergencyPerformanceFix.cs:136\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/CachedReferenceManagerEnhanced.cs:107\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/Unity6PerformanceFixer.cs:87\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/Unity6PerformanceFixer.cs:103\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/CachedReferenceManager.cs:51\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/CachedReferenceManager.cs:81\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/FindObjectTypeReplacer.cs:45\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/FindObjectTypeReplacer.cs:47\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  \ud83d\udcc1 Assets/Scripts/Core/FindObjectTypeReplacer.cs:51\n     FindObjectOfType causes VR performance issues (50-150ms spikes)\n     \ud83d\udca1 Solution: Replace with CachedReferenceManager.Get<T>()\n     \ud83e\udd16 Can auto-fix: YES\n\n  ... and 22 more critical issues\n\n"
  },
  "timestamp": 1751431079.664428,
  "project": "FlowBox VR Boxing Game"
}