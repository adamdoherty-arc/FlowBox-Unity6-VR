---
description: 
globs: 
alwaysApply: true
---
Unity VR Project Optimization & Modernization Prompt (Meta Quest)

Objective: Drive an AI model to perform a comprehensive, hybrid-format audit and modernization of a Unity VR project targeting Meta Quest devices. Tasks should leverage modern Unity features while ensuring fallback compatibility with older Unity versions and lower-end hardware.

⸻

1. Baseline Profiling

Establish CPU vs. GPU bottleneck and collect performance logs.
	•	Profiler Capture: Attach Unity Profiler to Quest (USB/Wi-Fi). Record 30–60 s sessions in light, medium, and heavy scenes. Note CPU vs. render-thread timings.
	•	MQDH Metrics: Use Meta Quest Developer Hub Performance Analyzer to log CPU/GPU frame times, stale/early frames, and capture Perfetto traces if needed.
	•	Project Auditor Scan: Run Project Auditor (Window → Analysis → Project Auditor). Export report and prioritize issues like GC spikes, heavy APIs, expensive Update() calls.
	•	Runtime Logs: Build in Development mode. Use adb logcat to detect OVRPlugin warnings, memory pressure, or fallback rendering modes.

⸻

2. Project Settings Checklist

Enforce best-in-class Quest build configurations.
	•	Render Pipeline: URP (convert materials/shaders).
	•	Scripting Backend: IL2CPP; Architecture: ARM64.
	•	Graphics API: Vulkan primary; GLES3.2 fallback; disable VSync.
	•	Color Space: Linear; disable HDR & heavy post effects.
	•	Stereo Mode: Single Pass Instanced (Multiview).
	•	MSAA: 2× or 4× via URP Asset.
	•	Multithreaded Rendering & Graphics Jobs enabled.
	•	Texture Compression: ASTC; Optimize Mesh Data.
	•	Fixed Foveated Rendering: Level 2 via OVR/OpenXR settings.

⸻

3. Rendering & Asset Optimization

Reduce draw calls, overdraw, and asset costs.
	•	Draw Calls: Aim <100 calls/frame. Mark static meshes for batching; enable GPU Instancing; combine materials/atlases.
	•	LOD & Culling: Add LODGroups; bake Occlusion Culling; lower far clip; use fog for pop-in.
	•	Lighting: Bake lightmaps & probes; use one real-time directional light; disable dynamic lights.
	•	Reflection Probes: Prefer baked cubemaps; avoid real-time probes.
	•	Textures: ASTC compression; enable mipmaps; use optimized resolutions (2048–512); atlas UI sprites.
	•	Shaders: Use URP Simple Lit/Unlit; avoid complex fragment shaders; ensure single-pass support.
	•	Overdraw: Use Scene Overdraw view; minimize transparent layers; prefer cutout shaders.
	•	Geometry: Strip hidden faces; target <100 k tris visible; optimize mesh import settings.

⸻

4. Modern Systems Adoption

Migrate legacy subsystems to Unity’s new frameworks.
	•	Input System: Enable Input System package; set Player Input Handling to “Both”/“New”; refactor to Action-based API; wrap legacy code in #if ENABLE_LEGACY_INPUT_MANAGER.
	•	XR Interaction Toolkit: Replace custom VR rigs with XR Origin (Action-based); use XRGrabInteractable, XRRayInteractor, snap-turn providers.
	•	Addressables: Remove Resources usage; mark assets addressable; use Addressables.LoadAssetAsync() and Release(); organize groups by scene/common/shared.
	•	Plugin Cleanup: Phase out older Oculus SDK components in favor of XR Plug-in Management (OpenXR/Oculus).
	•	Validation: Test all input bindings, interactions, and dynamic loads in VR on-device after each migration step.

⸻

5. Scalable Architecture

Apply DOTS selectively for high-performance subsystems.
	•	Hybrid ECS: Identify bulk-update systems (crowds, particles). Convert to ECS Entities only where it yields >2× perf gains.
	•	C# Jobs: Offload heavy loops (physics, AI) to Job System with [BurstCompile]. Use IJobParallelFor for parallel workloads; manage dependencies via JobHandles.
	•	Burst & Mathematics: Use Unity.Mathematics types; store data in NativeArrays. Leverage SIMD optimizations.
	•	ECS Bridges: Keep core gameplay on GameObjects; bridge results from ECS back to MonoBehaviours for rendering/UI.

⸻

6. Codebase Refactoring

Eliminate per-frame allocations and expensive calls.
	•	Object Pooling: Implement pooling for frequently spawned objects; initialize on load; reuse by resetting state.
	•	Zero GC Budget: Target 0 bytes/frame; remove allocations in Update; replace string + and LINQ with pre-allocated buffers.
	•	Component Caching: Cache GetComponent results in Awake/Start. Avoid repeated lookups.
	•	Update Optimization: Consolidate Update calls; move non-critical code to Coroutines/InvokeRepeating; consider spread-over-frames for heavy tasks.
	•	Assembly Definitions: Split code into asmdefs by module to speed compile times and enforce modularity.

⸻

7. Compatibility Strategy

Support modern and legacy Unity setups via conditional directives and abstractions.
	•	Input Directives: Use #if ENABLE_INPUT_SYSTEM / #if ENABLE_LEGACY_INPUT_MANAGER around respective code blocks.
	•	Version Guards: Wrap API calls in #if UNITY_2021_3_OR_NEWER for newer features; provide fallbacks for older versions.
	•	Interface Abstraction: Define service interfaces (e.g., IInputProvider) with legacy and modern implementations behind #if.
	•	Platform Guards: Use #if UNITY_ANDROID && (UNITY_OPENXR||UNITY_XR_OCULUS) for Quest-specific code; #if UNITY_EDITOR for editor-only tools.
	•	Legacy Testing: Maintain a branch/build with older Unity LTS to verify backward compatibility periodically.

⸻

8. VR UX & Meta Platform Features

Enhance comfort, safety, and immersion using world-space UIs and Quest APIs.
	•	World-Space UI: Convert all canvases to World Space; attach XR Graphic Raycaster; position at 1–2 m distance; use TextMeshPro.
	•	Interactions: Use XR Interaction Toolkit’s grab & locomotion providers; implement comfort options (snap turn, vignette).
	•	Guardian Integration: Query OVRBoundary/OpenXR Boundary API to warn or fade when near play-area edges; always respect boundary.
	•	Passthrough: Enable OVRPassthroughLayer (Underlay/Overlay); check runtime availability; consider basic mixed-reality features.
	•	Optional SDKs: Use Voice SDK, Spatial Anchors, Hand Tracking if available; guard with platform checks.
	•	Final Validation: Use OVR Metrics Tool or Oculus Profiler to confirm stable 72+ FPS and no frame dips before submission.

⸻

Usage: Copy this entire document as the prompt for an AI model. The AI should execute each checklist item, generate reports, apply code & asset changes, and validate performance gains on device.